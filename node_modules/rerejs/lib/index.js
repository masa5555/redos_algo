'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/** Escape a code point as regular expression source character. */
const escape = (c, inCharClass = false) => {
  // Common escape character.
  switch (c) {
    case 0x09:
      return '\\t';
    case 0x0a:
      return '\\n';
    case 0x0b:
      return '\\v';
    case 0x0c:
      return '\\f';
    case 0x0d:
      return '\\r';
    case 0x5c:
      return '\\\\';
    case 0x5e:
      return '\\^';
    case 0x5d:
      return '\\]';
  }

  if (inCharClass) {
    // In char class, we can use `'\b'` escape.
    if (c === 0x08) {
      return '\\b';
    }
    // In char class, `'-'` must be escaped.
    if (c === 0x2d) {
      return '\\-';
    }
  } else {
    // Character having meaning in pattern string.
    switch (c) {
      case 0x24:
        return '\\$';
      case 0x28:
        return '\\(';
      case 0x29:
        return '\\)';
      case 0x2a:
        return '\\*';
      case 0x2b:
        return '\\+';
      case 0x2e:
        return '\\.';
      case 0x2f:
        return '\\/';
      case 0x3f:
        return '\\?';
      case 0x5b:
        return '\\[';
      case 0x7b:
        return '\\{';
      case 0x7c:
        return '\\|';
      case 0x7d:
        return '\\}';
    }
  }

  // Control character uses hex escape.
  if (c <= 0x1f || (0x7f <= c && c <= 0xff)) {
    return `\\x${c.toString(16).padStart(2, '0')}`;
  }

  // ASCII character returns itself.
  if (c <= 0x80) {
    return String.fromCodePoint(c);
  }

  // BMP code point use `\uXXXX`.
  if (c <= 0xffff) {
    return `\\u${c.toString(16).padStart(4, '0')}`;
  }

  // Other code point use `\u{XXXXXX}`.
  return `\\u{${c.toString(16)}}`;
};

/** The maximum valid code point of Unicode. */
const MAX_CODE_POINT = 0x110000;

/** `CharSet` is a set of code points. */
class CharSet {
  /**
   * Internal data of this.
   *
   * This is a sorted number array.
   * An odd element is begin of a range, and an even element is end of a range.
   * So, this array's size must be even always.
   *
   * ```typescript
   * const set = new CharSet();
   * set.add(10, 20);
   * set.add(30, 40)
   * console.log(set.data);
   * // => [10, 20, 30, 40]
   * ```
   */
  

  constructor(data = []) {
    this.data = data;
  }

  /** Add a range to this. */
   add(begin, end = begin + 1) {
    const i = this.searchBegin(begin);
    const j = this.searchEnd(end);

    const removed = this.data.splice(i * 2, (j - i + 1) * 2);
    if (removed.length > 0) {
      begin = Math.min(begin, removed[0]);
      end = Math.max(end, removed[removed.length - 1]);
    }

    this.data.splice(i * 2, 0, begin, end);
  }

  /** Add another `CharSet` to this. */
   addCharSet(set) {
    for (let i = 0; i < set.data.length; i += 2) {
      const begin = set.data[i];
      const end = set.data[i + 1];
      this.add(begin, end);
    }
  }

  /**
   * Invert this set.
   *
   * Note that this method is mutable like `Array.prototype.reverse`.
   * Please clone before this if immutable is desired.
   */
   invert() {
    if (this.data.length === 0) {
      this.data.push(0, MAX_CODE_POINT);
      return this;
    }

    if (this.data[0] === 0 && this.data[this.data.length - 1] === MAX_CODE_POINT) {
      this.data.shift();
      this.data.pop();
      return this;
    }

    this.data.unshift(0);
    this.data.push(MAX_CODE_POINT);
    return this;
  }

  /** Clone this set. */
   clone() {
    return new CharSet(Array.from(this.data));
  }

  /** Check is a code point contained in this set. */
   has(c) {
    const i = this.searchEnd(c);

    if (i < 0 || this.data.length <= i * 2) {
      return false;
    }
    const begin = this.data[i * 2];
    const end = this.data[i * 2 + 1];
    return begin <= c && c < end;
  }

  /** Convert this into `RegExp` char-class pattern string. */
   toRegExpPattern(invert = false) {
    let s = '[';
    if (invert) {
      s += '^';
    }

    for (let i = 0; i < this.data.length; i += 2) {
      const begin = this.data[i];
      const end = this.data[i + 1];
      s += escape(begin, true);
      if (begin !== end - 1) {
        s += `-${escape(end - 1, true)}`;
      }
    }

    return s + ']';
  }

   toString() {
    return `CharSet${this.toRegExpPattern()}`;
  }

   [Symbol.for('nodejs.util.inspect.custom')](
    _depth,
    options
  ) {
    let s = `${options.stylize('CharSet', 'special')} `;
    s += options.stylize(this.toRegExpPattern(), 'regexp');
    return s;
  }

  /** Find the least `i` such that satisfy `c <= this.data[i * 2 + 1]`. */
   searchBegin(c) {
    let min = -1;
    let max = this.data.length / 2;
    while (max - min > 1) {
      const mid = min + Math.floor((max - min) / 2);
      if (c <= this.data[mid * 2 + 1]) {
        max = mid;
      } else {
        min = mid;
      }
    }
    return max;
  }

  /** Find the maximum `j` such that satisfy `this.ranges[j * 2] <= c`. */
   searchEnd(c) {
    let min = -1;
    let max = this.data.length / 2;
    while (max - min > 1) {
      const mid = min + Math.floor((max - min) / 2);
      if (this.data[mid * 2] <= c) {
        min = mid;
      } else {
        max = mid;
      }
    }
    return min;
  }
}

// THIS SCRIPT IS GENERATED BY tools/make-unicode.ts. DO NOT EDIT!

const foldMap = new Map([
  [0x41, 0x61],
  [0x42, 0x62],
  [0x43, 0x63],
  [0x44, 0x64],
  [0x45, 0x65],
  [0x46, 0x66],
  [0x47, 0x67],
  [0x48, 0x68],
  [0x49, 0x69],
  [0x4A, 0x6A],
  [0x4B, 0x6B],
  [0x4C, 0x6C],
  [0x4D, 0x6D],
  [0x4E, 0x6E],
  [0x4F, 0x6F],
  [0x50, 0x70],
  [0x51, 0x71],
  [0x52, 0x72],
  [0x53, 0x73],
  [0x54, 0x74],
  [0x55, 0x75],
  [0x56, 0x76],
  [0x57, 0x77],
  [0x58, 0x78],
  [0x59, 0x79],
  [0x5A, 0x7A],
  [0xB5, 0x3BC],
  [0xC0, 0xE0],
  [0xC1, 0xE1],
  [0xC2, 0xE2],
  [0xC3, 0xE3],
  [0xC4, 0xE4],
  [0xC5, 0xE5],
  [0xC6, 0xE6],
  [0xC7, 0xE7],
  [0xC8, 0xE8],
  [0xC9, 0xE9],
  [0xCA, 0xEA],
  [0xCB, 0xEB],
  [0xCC, 0xEC],
  [0xCD, 0xED],
  [0xCE, 0xEE],
  [0xCF, 0xEF],
  [0xD0, 0xF0],
  [0xD1, 0xF1],
  [0xD2, 0xF2],
  [0xD3, 0xF3],
  [0xD4, 0xF4],
  [0xD5, 0xF5],
  [0xD6, 0xF6],
  [0xD8, 0xF8],
  [0xD9, 0xF9],
  [0xDA, 0xFA],
  [0xDB, 0xFB],
  [0xDC, 0xFC],
  [0xDD, 0xFD],
  [0xDE, 0xFE],
  [0x100, 0x101],
  [0x102, 0x103],
  [0x104, 0x105],
  [0x106, 0x107],
  [0x108, 0x109],
  [0x10A, 0x10B],
  [0x10C, 0x10D],
  [0x10E, 0x10F],
  [0x110, 0x111],
  [0x112, 0x113],
  [0x114, 0x115],
  [0x116, 0x117],
  [0x118, 0x119],
  [0x11A, 0x11B],
  [0x11C, 0x11D],
  [0x11E, 0x11F],
  [0x120, 0x121],
  [0x122, 0x123],
  [0x124, 0x125],
  [0x126, 0x127],
  [0x128, 0x129],
  [0x12A, 0x12B],
  [0x12C, 0x12D],
  [0x12E, 0x12F],
  [0x132, 0x133],
  [0x134, 0x135],
  [0x136, 0x137],
  [0x139, 0x13A],
  [0x13B, 0x13C],
  [0x13D, 0x13E],
  [0x13F, 0x140],
  [0x141, 0x142],
  [0x143, 0x144],
  [0x145, 0x146],
  [0x147, 0x148],
  [0x14A, 0x14B],
  [0x14C, 0x14D],
  [0x14E, 0x14F],
  [0x150, 0x151],
  [0x152, 0x153],
  [0x154, 0x155],
  [0x156, 0x157],
  [0x158, 0x159],
  [0x15A, 0x15B],
  [0x15C, 0x15D],
  [0x15E, 0x15F],
  [0x160, 0x161],
  [0x162, 0x163],
  [0x164, 0x165],
  [0x166, 0x167],
  [0x168, 0x169],
  [0x16A, 0x16B],
  [0x16C, 0x16D],
  [0x16E, 0x16F],
  [0x170, 0x171],
  [0x172, 0x173],
  [0x174, 0x175],
  [0x176, 0x177],
  [0x178, 0xFF],
  [0x179, 0x17A],
  [0x17B, 0x17C],
  [0x17D, 0x17E],
  [0x17F, 0x73],
  [0x181, 0x253],
  [0x182, 0x183],
  [0x184, 0x185],
  [0x186, 0x254],
  [0x187, 0x188],
  [0x189, 0x256],
  [0x18A, 0x257],
  [0x18B, 0x18C],
  [0x18E, 0x1DD],
  [0x18F, 0x259],
  [0x190, 0x25B],
  [0x191, 0x192],
  [0x193, 0x260],
  [0x194, 0x263],
  [0x196, 0x269],
  [0x197, 0x268],
  [0x198, 0x199],
  [0x19C, 0x26F],
  [0x19D, 0x272],
  [0x19F, 0x275],
  [0x1A0, 0x1A1],
  [0x1A2, 0x1A3],
  [0x1A4, 0x1A5],
  [0x1A6, 0x280],
  [0x1A7, 0x1A8],
  [0x1A9, 0x283],
  [0x1AC, 0x1AD],
  [0x1AE, 0x288],
  [0x1AF, 0x1B0],
  [0x1B1, 0x28A],
  [0x1B2, 0x28B],
  [0x1B3, 0x1B4],
  [0x1B5, 0x1B6],
  [0x1B7, 0x292],
  [0x1B8, 0x1B9],
  [0x1BC, 0x1BD],
  [0x1C4, 0x1C6],
  [0x1C5, 0x1C6],
  [0x1C7, 0x1C9],
  [0x1C8, 0x1C9],
  [0x1CA, 0x1CC],
  [0x1CB, 0x1CC],
  [0x1CD, 0x1CE],
  [0x1CF, 0x1D0],
  [0x1D1, 0x1D2],
  [0x1D3, 0x1D4],
  [0x1D5, 0x1D6],
  [0x1D7, 0x1D8],
  [0x1D9, 0x1DA],
  [0x1DB, 0x1DC],
  [0x1DE, 0x1DF],
  [0x1E0, 0x1E1],
  [0x1E2, 0x1E3],
  [0x1E4, 0x1E5],
  [0x1E6, 0x1E7],
  [0x1E8, 0x1E9],
  [0x1EA, 0x1EB],
  [0x1EC, 0x1ED],
  [0x1EE, 0x1EF],
  [0x1F1, 0x1F3],
  [0x1F2, 0x1F3],
  [0x1F4, 0x1F5],
  [0x1F6, 0x195],
  [0x1F7, 0x1BF],
  [0x1F8, 0x1F9],
  [0x1FA, 0x1FB],
  [0x1FC, 0x1FD],
  [0x1FE, 0x1FF],
  [0x200, 0x201],
  [0x202, 0x203],
  [0x204, 0x205],
  [0x206, 0x207],
  [0x208, 0x209],
  [0x20A, 0x20B],
  [0x20C, 0x20D],
  [0x20E, 0x20F],
  [0x210, 0x211],
  [0x212, 0x213],
  [0x214, 0x215],
  [0x216, 0x217],
  [0x218, 0x219],
  [0x21A, 0x21B],
  [0x21C, 0x21D],
  [0x21E, 0x21F],
  [0x220, 0x19E],
  [0x222, 0x223],
  [0x224, 0x225],
  [0x226, 0x227],
  [0x228, 0x229],
  [0x22A, 0x22B],
  [0x22C, 0x22D],
  [0x22E, 0x22F],
  [0x230, 0x231],
  [0x232, 0x233],
  [0x23A, 0x2C65],
  [0x23B, 0x23C],
  [0x23D, 0x19A],
  [0x23E, 0x2C66],
  [0x241, 0x242],
  [0x243, 0x180],
  [0x244, 0x289],
  [0x245, 0x28C],
  [0x246, 0x247],
  [0x248, 0x249],
  [0x24A, 0x24B],
  [0x24C, 0x24D],
  [0x24E, 0x24F],
  [0x345, 0x3B9],
  [0x370, 0x371],
  [0x372, 0x373],
  [0x376, 0x377],
  [0x37F, 0x3F3],
  [0x386, 0x3AC],
  [0x388, 0x3AD],
  [0x389, 0x3AE],
  [0x38A, 0x3AF],
  [0x38C, 0x3CC],
  [0x38E, 0x3CD],
  [0x38F, 0x3CE],
  [0x391, 0x3B1],
  [0x392, 0x3B2],
  [0x393, 0x3B3],
  [0x394, 0x3B4],
  [0x395, 0x3B5],
  [0x396, 0x3B6],
  [0x397, 0x3B7],
  [0x398, 0x3B8],
  [0x399, 0x3B9],
  [0x39A, 0x3BA],
  [0x39B, 0x3BB],
  [0x39C, 0x3BC],
  [0x39D, 0x3BD],
  [0x39E, 0x3BE],
  [0x39F, 0x3BF],
  [0x3A0, 0x3C0],
  [0x3A1, 0x3C1],
  [0x3A3, 0x3C3],
  [0x3A4, 0x3C4],
  [0x3A5, 0x3C5],
  [0x3A6, 0x3C6],
  [0x3A7, 0x3C7],
  [0x3A8, 0x3C8],
  [0x3A9, 0x3C9],
  [0x3AA, 0x3CA],
  [0x3AB, 0x3CB],
  [0x3C2, 0x3C3],
  [0x3CF, 0x3D7],
  [0x3D0, 0x3B2],
  [0x3D1, 0x3B8],
  [0x3D5, 0x3C6],
  [0x3D6, 0x3C0],
  [0x3D8, 0x3D9],
  [0x3DA, 0x3DB],
  [0x3DC, 0x3DD],
  [0x3DE, 0x3DF],
  [0x3E0, 0x3E1],
  [0x3E2, 0x3E3],
  [0x3E4, 0x3E5],
  [0x3E6, 0x3E7],
  [0x3E8, 0x3E9],
  [0x3EA, 0x3EB],
  [0x3EC, 0x3ED],
  [0x3EE, 0x3EF],
  [0x3F0, 0x3BA],
  [0x3F1, 0x3C1],
  [0x3F4, 0x3B8],
  [0x3F5, 0x3B5],
  [0x3F7, 0x3F8],
  [0x3F9, 0x3F2],
  [0x3FA, 0x3FB],
  [0x3FD, 0x37B],
  [0x3FE, 0x37C],
  [0x3FF, 0x37D],
  [0x400, 0x450],
  [0x401, 0x451],
  [0x402, 0x452],
  [0x403, 0x453],
  [0x404, 0x454],
  [0x405, 0x455],
  [0x406, 0x456],
  [0x407, 0x457],
  [0x408, 0x458],
  [0x409, 0x459],
  [0x40A, 0x45A],
  [0x40B, 0x45B],
  [0x40C, 0x45C],
  [0x40D, 0x45D],
  [0x40E, 0x45E],
  [0x40F, 0x45F],
  [0x410, 0x430],
  [0x411, 0x431],
  [0x412, 0x432],
  [0x413, 0x433],
  [0x414, 0x434],
  [0x415, 0x435],
  [0x416, 0x436],
  [0x417, 0x437],
  [0x418, 0x438],
  [0x419, 0x439],
  [0x41A, 0x43A],
  [0x41B, 0x43B],
  [0x41C, 0x43C],
  [0x41D, 0x43D],
  [0x41E, 0x43E],
  [0x41F, 0x43F],
  [0x420, 0x440],
  [0x421, 0x441],
  [0x422, 0x442],
  [0x423, 0x443],
  [0x424, 0x444],
  [0x425, 0x445],
  [0x426, 0x446],
  [0x427, 0x447],
  [0x428, 0x448],
  [0x429, 0x449],
  [0x42A, 0x44A],
  [0x42B, 0x44B],
  [0x42C, 0x44C],
  [0x42D, 0x44D],
  [0x42E, 0x44E],
  [0x42F, 0x44F],
  [0x460, 0x461],
  [0x462, 0x463],
  [0x464, 0x465],
  [0x466, 0x467],
  [0x468, 0x469],
  [0x46A, 0x46B],
  [0x46C, 0x46D],
  [0x46E, 0x46F],
  [0x470, 0x471],
  [0x472, 0x473],
  [0x474, 0x475],
  [0x476, 0x477],
  [0x478, 0x479],
  [0x47A, 0x47B],
  [0x47C, 0x47D],
  [0x47E, 0x47F],
  [0x480, 0x481],
  [0x48A, 0x48B],
  [0x48C, 0x48D],
  [0x48E, 0x48F],
  [0x490, 0x491],
  [0x492, 0x493],
  [0x494, 0x495],
  [0x496, 0x497],
  [0x498, 0x499],
  [0x49A, 0x49B],
  [0x49C, 0x49D],
  [0x49E, 0x49F],
  [0x4A0, 0x4A1],
  [0x4A2, 0x4A3],
  [0x4A4, 0x4A5],
  [0x4A6, 0x4A7],
  [0x4A8, 0x4A9],
  [0x4AA, 0x4AB],
  [0x4AC, 0x4AD],
  [0x4AE, 0x4AF],
  [0x4B0, 0x4B1],
  [0x4B2, 0x4B3],
  [0x4B4, 0x4B5],
  [0x4B6, 0x4B7],
  [0x4B8, 0x4B9],
  [0x4BA, 0x4BB],
  [0x4BC, 0x4BD],
  [0x4BE, 0x4BF],
  [0x4C0, 0x4CF],
  [0x4C1, 0x4C2],
  [0x4C3, 0x4C4],
  [0x4C5, 0x4C6],
  [0x4C7, 0x4C8],
  [0x4C9, 0x4CA],
  [0x4CB, 0x4CC],
  [0x4CD, 0x4CE],
  [0x4D0, 0x4D1],
  [0x4D2, 0x4D3],
  [0x4D4, 0x4D5],
  [0x4D6, 0x4D7],
  [0x4D8, 0x4D9],
  [0x4DA, 0x4DB],
  [0x4DC, 0x4DD],
  [0x4DE, 0x4DF],
  [0x4E0, 0x4E1],
  [0x4E2, 0x4E3],
  [0x4E4, 0x4E5],
  [0x4E6, 0x4E7],
  [0x4E8, 0x4E9],
  [0x4EA, 0x4EB],
  [0x4EC, 0x4ED],
  [0x4EE, 0x4EF],
  [0x4F0, 0x4F1],
  [0x4F2, 0x4F3],
  [0x4F4, 0x4F5],
  [0x4F6, 0x4F7],
  [0x4F8, 0x4F9],
  [0x4FA, 0x4FB],
  [0x4FC, 0x4FD],
  [0x4FE, 0x4FF],
  [0x500, 0x501],
  [0x502, 0x503],
  [0x504, 0x505],
  [0x506, 0x507],
  [0x508, 0x509],
  [0x50A, 0x50B],
  [0x50C, 0x50D],
  [0x50E, 0x50F],
  [0x510, 0x511],
  [0x512, 0x513],
  [0x514, 0x515],
  [0x516, 0x517],
  [0x518, 0x519],
  [0x51A, 0x51B],
  [0x51C, 0x51D],
  [0x51E, 0x51F],
  [0x520, 0x521],
  [0x522, 0x523],
  [0x524, 0x525],
  [0x526, 0x527],
  [0x528, 0x529],
  [0x52A, 0x52B],
  [0x52C, 0x52D],
  [0x52E, 0x52F],
  [0x531, 0x561],
  [0x532, 0x562],
  [0x533, 0x563],
  [0x534, 0x564],
  [0x535, 0x565],
  [0x536, 0x566],
  [0x537, 0x567],
  [0x538, 0x568],
  [0x539, 0x569],
  [0x53A, 0x56A],
  [0x53B, 0x56B],
  [0x53C, 0x56C],
  [0x53D, 0x56D],
  [0x53E, 0x56E],
  [0x53F, 0x56F],
  [0x540, 0x570],
  [0x541, 0x571],
  [0x542, 0x572],
  [0x543, 0x573],
  [0x544, 0x574],
  [0x545, 0x575],
  [0x546, 0x576],
  [0x547, 0x577],
  [0x548, 0x578],
  [0x549, 0x579],
  [0x54A, 0x57A],
  [0x54B, 0x57B],
  [0x54C, 0x57C],
  [0x54D, 0x57D],
  [0x54E, 0x57E],
  [0x54F, 0x57F],
  [0x550, 0x580],
  [0x551, 0x581],
  [0x552, 0x582],
  [0x553, 0x583],
  [0x554, 0x584],
  [0x555, 0x585],
  [0x556, 0x586],
  [0x10A0, 0x2D00],
  [0x10A1, 0x2D01],
  [0x10A2, 0x2D02],
  [0x10A3, 0x2D03],
  [0x10A4, 0x2D04],
  [0x10A5, 0x2D05],
  [0x10A6, 0x2D06],
  [0x10A7, 0x2D07],
  [0x10A8, 0x2D08],
  [0x10A9, 0x2D09],
  [0x10AA, 0x2D0A],
  [0x10AB, 0x2D0B],
  [0x10AC, 0x2D0C],
  [0x10AD, 0x2D0D],
  [0x10AE, 0x2D0E],
  [0x10AF, 0x2D0F],
  [0x10B0, 0x2D10],
  [0x10B1, 0x2D11],
  [0x10B2, 0x2D12],
  [0x10B3, 0x2D13],
  [0x10B4, 0x2D14],
  [0x10B5, 0x2D15],
  [0x10B6, 0x2D16],
  [0x10B7, 0x2D17],
  [0x10B8, 0x2D18],
  [0x10B9, 0x2D19],
  [0x10BA, 0x2D1A],
  [0x10BB, 0x2D1B],
  [0x10BC, 0x2D1C],
  [0x10BD, 0x2D1D],
  [0x10BE, 0x2D1E],
  [0x10BF, 0x2D1F],
  [0x10C0, 0x2D20],
  [0x10C1, 0x2D21],
  [0x10C2, 0x2D22],
  [0x10C3, 0x2D23],
  [0x10C4, 0x2D24],
  [0x10C5, 0x2D25],
  [0x10C7, 0x2D27],
  [0x10CD, 0x2D2D],
  [0x13F8, 0x13F0],
  [0x13F9, 0x13F1],
  [0x13FA, 0x13F2],
  [0x13FB, 0x13F3],
  [0x13FC, 0x13F4],
  [0x13FD, 0x13F5],
  [0x1C80, 0x432],
  [0x1C81, 0x434],
  [0x1C82, 0x43E],
  [0x1C83, 0x441],
  [0x1C84, 0x442],
  [0x1C85, 0x442],
  [0x1C86, 0x44A],
  [0x1C87, 0x463],
  [0x1C88, 0xA64B],
  [0x1C90, 0x10D0],
  [0x1C91, 0x10D1],
  [0x1C92, 0x10D2],
  [0x1C93, 0x10D3],
  [0x1C94, 0x10D4],
  [0x1C95, 0x10D5],
  [0x1C96, 0x10D6],
  [0x1C97, 0x10D7],
  [0x1C98, 0x10D8],
  [0x1C99, 0x10D9],
  [0x1C9A, 0x10DA],
  [0x1C9B, 0x10DB],
  [0x1C9C, 0x10DC],
  [0x1C9D, 0x10DD],
  [0x1C9E, 0x10DE],
  [0x1C9F, 0x10DF],
  [0x1CA0, 0x10E0],
  [0x1CA1, 0x10E1],
  [0x1CA2, 0x10E2],
  [0x1CA3, 0x10E3],
  [0x1CA4, 0x10E4],
  [0x1CA5, 0x10E5],
  [0x1CA6, 0x10E6],
  [0x1CA7, 0x10E7],
  [0x1CA8, 0x10E8],
  [0x1CA9, 0x10E9],
  [0x1CAA, 0x10EA],
  [0x1CAB, 0x10EB],
  [0x1CAC, 0x10EC],
  [0x1CAD, 0x10ED],
  [0x1CAE, 0x10EE],
  [0x1CAF, 0x10EF],
  [0x1CB0, 0x10F0],
  [0x1CB1, 0x10F1],
  [0x1CB2, 0x10F2],
  [0x1CB3, 0x10F3],
  [0x1CB4, 0x10F4],
  [0x1CB5, 0x10F5],
  [0x1CB6, 0x10F6],
  [0x1CB7, 0x10F7],
  [0x1CB8, 0x10F8],
  [0x1CB9, 0x10F9],
  [0x1CBA, 0x10FA],
  [0x1CBD, 0x10FD],
  [0x1CBE, 0x10FE],
  [0x1CBF, 0x10FF],
  [0x1E00, 0x1E01],
  [0x1E02, 0x1E03],
  [0x1E04, 0x1E05],
  [0x1E06, 0x1E07],
  [0x1E08, 0x1E09],
  [0x1E0A, 0x1E0B],
  [0x1E0C, 0x1E0D],
  [0x1E0E, 0x1E0F],
  [0x1E10, 0x1E11],
  [0x1E12, 0x1E13],
  [0x1E14, 0x1E15],
  [0x1E16, 0x1E17],
  [0x1E18, 0x1E19],
  [0x1E1A, 0x1E1B],
  [0x1E1C, 0x1E1D],
  [0x1E1E, 0x1E1F],
  [0x1E20, 0x1E21],
  [0x1E22, 0x1E23],
  [0x1E24, 0x1E25],
  [0x1E26, 0x1E27],
  [0x1E28, 0x1E29],
  [0x1E2A, 0x1E2B],
  [0x1E2C, 0x1E2D],
  [0x1E2E, 0x1E2F],
  [0x1E30, 0x1E31],
  [0x1E32, 0x1E33],
  [0x1E34, 0x1E35],
  [0x1E36, 0x1E37],
  [0x1E38, 0x1E39],
  [0x1E3A, 0x1E3B],
  [0x1E3C, 0x1E3D],
  [0x1E3E, 0x1E3F],
  [0x1E40, 0x1E41],
  [0x1E42, 0x1E43],
  [0x1E44, 0x1E45],
  [0x1E46, 0x1E47],
  [0x1E48, 0x1E49],
  [0x1E4A, 0x1E4B],
  [0x1E4C, 0x1E4D],
  [0x1E4E, 0x1E4F],
  [0x1E50, 0x1E51],
  [0x1E52, 0x1E53],
  [0x1E54, 0x1E55],
  [0x1E56, 0x1E57],
  [0x1E58, 0x1E59],
  [0x1E5A, 0x1E5B],
  [0x1E5C, 0x1E5D],
  [0x1E5E, 0x1E5F],
  [0x1E60, 0x1E61],
  [0x1E62, 0x1E63],
  [0x1E64, 0x1E65],
  [0x1E66, 0x1E67],
  [0x1E68, 0x1E69],
  [0x1E6A, 0x1E6B],
  [0x1E6C, 0x1E6D],
  [0x1E6E, 0x1E6F],
  [0x1E70, 0x1E71],
  [0x1E72, 0x1E73],
  [0x1E74, 0x1E75],
  [0x1E76, 0x1E77],
  [0x1E78, 0x1E79],
  [0x1E7A, 0x1E7B],
  [0x1E7C, 0x1E7D],
  [0x1E7E, 0x1E7F],
  [0x1E80, 0x1E81],
  [0x1E82, 0x1E83],
  [0x1E84, 0x1E85],
  [0x1E86, 0x1E87],
  [0x1E88, 0x1E89],
  [0x1E8A, 0x1E8B],
  [0x1E8C, 0x1E8D],
  [0x1E8E, 0x1E8F],
  [0x1E90, 0x1E91],
  [0x1E92, 0x1E93],
  [0x1E94, 0x1E95],
  [0x1E9B, 0x1E61],
  [0x1EA0, 0x1EA1],
  [0x1EA2, 0x1EA3],
  [0x1EA4, 0x1EA5],
  [0x1EA6, 0x1EA7],
  [0x1EA8, 0x1EA9],
  [0x1EAA, 0x1EAB],
  [0x1EAC, 0x1EAD],
  [0x1EAE, 0x1EAF],
  [0x1EB0, 0x1EB1],
  [0x1EB2, 0x1EB3],
  [0x1EB4, 0x1EB5],
  [0x1EB6, 0x1EB7],
  [0x1EB8, 0x1EB9],
  [0x1EBA, 0x1EBB],
  [0x1EBC, 0x1EBD],
  [0x1EBE, 0x1EBF],
  [0x1EC0, 0x1EC1],
  [0x1EC2, 0x1EC3],
  [0x1EC4, 0x1EC5],
  [0x1EC6, 0x1EC7],
  [0x1EC8, 0x1EC9],
  [0x1ECA, 0x1ECB],
  [0x1ECC, 0x1ECD],
  [0x1ECE, 0x1ECF],
  [0x1ED0, 0x1ED1],
  [0x1ED2, 0x1ED3],
  [0x1ED4, 0x1ED5],
  [0x1ED6, 0x1ED7],
  [0x1ED8, 0x1ED9],
  [0x1EDA, 0x1EDB],
  [0x1EDC, 0x1EDD],
  [0x1EDE, 0x1EDF],
  [0x1EE0, 0x1EE1],
  [0x1EE2, 0x1EE3],
  [0x1EE4, 0x1EE5],
  [0x1EE6, 0x1EE7],
  [0x1EE8, 0x1EE9],
  [0x1EEA, 0x1EEB],
  [0x1EEC, 0x1EED],
  [0x1EEE, 0x1EEF],
  [0x1EF0, 0x1EF1],
  [0x1EF2, 0x1EF3],
  [0x1EF4, 0x1EF5],
  [0x1EF6, 0x1EF7],
  [0x1EF8, 0x1EF9],
  [0x1EFA, 0x1EFB],
  [0x1EFC, 0x1EFD],
  [0x1EFE, 0x1EFF],
  [0x1F08, 0x1F00],
  [0x1F09, 0x1F01],
  [0x1F0A, 0x1F02],
  [0x1F0B, 0x1F03],
  [0x1F0C, 0x1F04],
  [0x1F0D, 0x1F05],
  [0x1F0E, 0x1F06],
  [0x1F0F, 0x1F07],
  [0x1F18, 0x1F10],
  [0x1F19, 0x1F11],
  [0x1F1A, 0x1F12],
  [0x1F1B, 0x1F13],
  [0x1F1C, 0x1F14],
  [0x1F1D, 0x1F15],
  [0x1F28, 0x1F20],
  [0x1F29, 0x1F21],
  [0x1F2A, 0x1F22],
  [0x1F2B, 0x1F23],
  [0x1F2C, 0x1F24],
  [0x1F2D, 0x1F25],
  [0x1F2E, 0x1F26],
  [0x1F2F, 0x1F27],
  [0x1F38, 0x1F30],
  [0x1F39, 0x1F31],
  [0x1F3A, 0x1F32],
  [0x1F3B, 0x1F33],
  [0x1F3C, 0x1F34],
  [0x1F3D, 0x1F35],
  [0x1F3E, 0x1F36],
  [0x1F3F, 0x1F37],
  [0x1F48, 0x1F40],
  [0x1F49, 0x1F41],
  [0x1F4A, 0x1F42],
  [0x1F4B, 0x1F43],
  [0x1F4C, 0x1F44],
  [0x1F4D, 0x1F45],
  [0x1F59, 0x1F51],
  [0x1F5B, 0x1F53],
  [0x1F5D, 0x1F55],
  [0x1F5F, 0x1F57],
  [0x1F68, 0x1F60],
  [0x1F69, 0x1F61],
  [0x1F6A, 0x1F62],
  [0x1F6B, 0x1F63],
  [0x1F6C, 0x1F64],
  [0x1F6D, 0x1F65],
  [0x1F6E, 0x1F66],
  [0x1F6F, 0x1F67],
  [0x1FB8, 0x1FB0],
  [0x1FB9, 0x1FB1],
  [0x1FBA, 0x1F70],
  [0x1FBB, 0x1F71],
  [0x1FBE, 0x3B9],
  [0x1FC8, 0x1F72],
  [0x1FC9, 0x1F73],
  [0x1FCA, 0x1F74],
  [0x1FCB, 0x1F75],
  [0x1FD8, 0x1FD0],
  [0x1FD9, 0x1FD1],
  [0x1FDA, 0x1F76],
  [0x1FDB, 0x1F77],
  [0x1FE8, 0x1FE0],
  [0x1FE9, 0x1FE1],
  [0x1FEA, 0x1F7A],
  [0x1FEB, 0x1F7B],
  [0x1FEC, 0x1FE5],
  [0x1FF8, 0x1F78],
  [0x1FF9, 0x1F79],
  [0x1FFA, 0x1F7C],
  [0x1FFB, 0x1F7D],
  [0x2126, 0x3C9],
  [0x212A, 0x6B],
  [0x212B, 0xE5],
  [0x2132, 0x214E],
  [0x2160, 0x2170],
  [0x2161, 0x2171],
  [0x2162, 0x2172],
  [0x2163, 0x2173],
  [0x2164, 0x2174],
  [0x2165, 0x2175],
  [0x2166, 0x2176],
  [0x2167, 0x2177],
  [0x2168, 0x2178],
  [0x2169, 0x2179],
  [0x216A, 0x217A],
  [0x216B, 0x217B],
  [0x216C, 0x217C],
  [0x216D, 0x217D],
  [0x216E, 0x217E],
  [0x216F, 0x217F],
  [0x2183, 0x2184],
  [0x24B6, 0x24D0],
  [0x24B7, 0x24D1],
  [0x24B8, 0x24D2],
  [0x24B9, 0x24D3],
  [0x24BA, 0x24D4],
  [0x24BB, 0x24D5],
  [0x24BC, 0x24D6],
  [0x24BD, 0x24D7],
  [0x24BE, 0x24D8],
  [0x24BF, 0x24D9],
  [0x24C0, 0x24DA],
  [0x24C1, 0x24DB],
  [0x24C2, 0x24DC],
  [0x24C3, 0x24DD],
  [0x24C4, 0x24DE],
  [0x24C5, 0x24DF],
  [0x24C6, 0x24E0],
  [0x24C7, 0x24E1],
  [0x24C8, 0x24E2],
  [0x24C9, 0x24E3],
  [0x24CA, 0x24E4],
  [0x24CB, 0x24E5],
  [0x24CC, 0x24E6],
  [0x24CD, 0x24E7],
  [0x24CE, 0x24E8],
  [0x24CF, 0x24E9],
  [0x2C00, 0x2C30],
  [0x2C01, 0x2C31],
  [0x2C02, 0x2C32],
  [0x2C03, 0x2C33],
  [0x2C04, 0x2C34],
  [0x2C05, 0x2C35],
  [0x2C06, 0x2C36],
  [0x2C07, 0x2C37],
  [0x2C08, 0x2C38],
  [0x2C09, 0x2C39],
  [0x2C0A, 0x2C3A],
  [0x2C0B, 0x2C3B],
  [0x2C0C, 0x2C3C],
  [0x2C0D, 0x2C3D],
  [0x2C0E, 0x2C3E],
  [0x2C0F, 0x2C3F],
  [0x2C10, 0x2C40],
  [0x2C11, 0x2C41],
  [0x2C12, 0x2C42],
  [0x2C13, 0x2C43],
  [0x2C14, 0x2C44],
  [0x2C15, 0x2C45],
  [0x2C16, 0x2C46],
  [0x2C17, 0x2C47],
  [0x2C18, 0x2C48],
  [0x2C19, 0x2C49],
  [0x2C1A, 0x2C4A],
  [0x2C1B, 0x2C4B],
  [0x2C1C, 0x2C4C],
  [0x2C1D, 0x2C4D],
  [0x2C1E, 0x2C4E],
  [0x2C1F, 0x2C4F],
  [0x2C20, 0x2C50],
  [0x2C21, 0x2C51],
  [0x2C22, 0x2C52],
  [0x2C23, 0x2C53],
  [0x2C24, 0x2C54],
  [0x2C25, 0x2C55],
  [0x2C26, 0x2C56],
  [0x2C27, 0x2C57],
  [0x2C28, 0x2C58],
  [0x2C29, 0x2C59],
  [0x2C2A, 0x2C5A],
  [0x2C2B, 0x2C5B],
  [0x2C2C, 0x2C5C],
  [0x2C2D, 0x2C5D],
  [0x2C2E, 0x2C5E],
  [0x2C60, 0x2C61],
  [0x2C62, 0x26B],
  [0x2C63, 0x1D7D],
  [0x2C64, 0x27D],
  [0x2C67, 0x2C68],
  [0x2C69, 0x2C6A],
  [0x2C6B, 0x2C6C],
  [0x2C6D, 0x251],
  [0x2C6E, 0x271],
  [0x2C6F, 0x250],
  [0x2C70, 0x252],
  [0x2C72, 0x2C73],
  [0x2C75, 0x2C76],
  [0x2C7E, 0x23F],
  [0x2C7F, 0x240],
  [0x2C80, 0x2C81],
  [0x2C82, 0x2C83],
  [0x2C84, 0x2C85],
  [0x2C86, 0x2C87],
  [0x2C88, 0x2C89],
  [0x2C8A, 0x2C8B],
  [0x2C8C, 0x2C8D],
  [0x2C8E, 0x2C8F],
  [0x2C90, 0x2C91],
  [0x2C92, 0x2C93],
  [0x2C94, 0x2C95],
  [0x2C96, 0x2C97],
  [0x2C98, 0x2C99],
  [0x2C9A, 0x2C9B],
  [0x2C9C, 0x2C9D],
  [0x2C9E, 0x2C9F],
  [0x2CA0, 0x2CA1],
  [0x2CA2, 0x2CA3],
  [0x2CA4, 0x2CA5],
  [0x2CA6, 0x2CA7],
  [0x2CA8, 0x2CA9],
  [0x2CAA, 0x2CAB],
  [0x2CAC, 0x2CAD],
  [0x2CAE, 0x2CAF],
  [0x2CB0, 0x2CB1],
  [0x2CB2, 0x2CB3],
  [0x2CB4, 0x2CB5],
  [0x2CB6, 0x2CB7],
  [0x2CB8, 0x2CB9],
  [0x2CBA, 0x2CBB],
  [0x2CBC, 0x2CBD],
  [0x2CBE, 0x2CBF],
  [0x2CC0, 0x2CC1],
  [0x2CC2, 0x2CC3],
  [0x2CC4, 0x2CC5],
  [0x2CC6, 0x2CC7],
  [0x2CC8, 0x2CC9],
  [0x2CCA, 0x2CCB],
  [0x2CCC, 0x2CCD],
  [0x2CCE, 0x2CCF],
  [0x2CD0, 0x2CD1],
  [0x2CD2, 0x2CD3],
  [0x2CD4, 0x2CD5],
  [0x2CD6, 0x2CD7],
  [0x2CD8, 0x2CD9],
  [0x2CDA, 0x2CDB],
  [0x2CDC, 0x2CDD],
  [0x2CDE, 0x2CDF],
  [0x2CE0, 0x2CE1],
  [0x2CE2, 0x2CE3],
  [0x2CEB, 0x2CEC],
  [0x2CED, 0x2CEE],
  [0x2CF2, 0x2CF3],
  [0xA640, 0xA641],
  [0xA642, 0xA643],
  [0xA644, 0xA645],
  [0xA646, 0xA647],
  [0xA648, 0xA649],
  [0xA64A, 0xA64B],
  [0xA64C, 0xA64D],
  [0xA64E, 0xA64F],
  [0xA650, 0xA651],
  [0xA652, 0xA653],
  [0xA654, 0xA655],
  [0xA656, 0xA657],
  [0xA658, 0xA659],
  [0xA65A, 0xA65B],
  [0xA65C, 0xA65D],
  [0xA65E, 0xA65F],
  [0xA660, 0xA661],
  [0xA662, 0xA663],
  [0xA664, 0xA665],
  [0xA666, 0xA667],
  [0xA668, 0xA669],
  [0xA66A, 0xA66B],
  [0xA66C, 0xA66D],
  [0xA680, 0xA681],
  [0xA682, 0xA683],
  [0xA684, 0xA685],
  [0xA686, 0xA687],
  [0xA688, 0xA689],
  [0xA68A, 0xA68B],
  [0xA68C, 0xA68D],
  [0xA68E, 0xA68F],
  [0xA690, 0xA691],
  [0xA692, 0xA693],
  [0xA694, 0xA695],
  [0xA696, 0xA697],
  [0xA698, 0xA699],
  [0xA69A, 0xA69B],
  [0xA722, 0xA723],
  [0xA724, 0xA725],
  [0xA726, 0xA727],
  [0xA728, 0xA729],
  [0xA72A, 0xA72B],
  [0xA72C, 0xA72D],
  [0xA72E, 0xA72F],
  [0xA732, 0xA733],
  [0xA734, 0xA735],
  [0xA736, 0xA737],
  [0xA738, 0xA739],
  [0xA73A, 0xA73B],
  [0xA73C, 0xA73D],
  [0xA73E, 0xA73F],
  [0xA740, 0xA741],
  [0xA742, 0xA743],
  [0xA744, 0xA745],
  [0xA746, 0xA747],
  [0xA748, 0xA749],
  [0xA74A, 0xA74B],
  [0xA74C, 0xA74D],
  [0xA74E, 0xA74F],
  [0xA750, 0xA751],
  [0xA752, 0xA753],
  [0xA754, 0xA755],
  [0xA756, 0xA757],
  [0xA758, 0xA759],
  [0xA75A, 0xA75B],
  [0xA75C, 0xA75D],
  [0xA75E, 0xA75F],
  [0xA760, 0xA761],
  [0xA762, 0xA763],
  [0xA764, 0xA765],
  [0xA766, 0xA767],
  [0xA768, 0xA769],
  [0xA76A, 0xA76B],
  [0xA76C, 0xA76D],
  [0xA76E, 0xA76F],
  [0xA779, 0xA77A],
  [0xA77B, 0xA77C],
  [0xA77D, 0x1D79],
  [0xA77E, 0xA77F],
  [0xA780, 0xA781],
  [0xA782, 0xA783],
  [0xA784, 0xA785],
  [0xA786, 0xA787],
  [0xA78B, 0xA78C],
  [0xA78D, 0x265],
  [0xA790, 0xA791],
  [0xA792, 0xA793],
  [0xA796, 0xA797],
  [0xA798, 0xA799],
  [0xA79A, 0xA79B],
  [0xA79C, 0xA79D],
  [0xA79E, 0xA79F],
  [0xA7A0, 0xA7A1],
  [0xA7A2, 0xA7A3],
  [0xA7A4, 0xA7A5],
  [0xA7A6, 0xA7A7],
  [0xA7A8, 0xA7A9],
  [0xA7AA, 0x266],
  [0xA7AB, 0x25C],
  [0xA7AC, 0x261],
  [0xA7AD, 0x26C],
  [0xA7AE, 0x26A],
  [0xA7B0, 0x29E],
  [0xA7B1, 0x287],
  [0xA7B2, 0x29D],
  [0xA7B3, 0xAB53],
  [0xA7B4, 0xA7B5],
  [0xA7B6, 0xA7B7],
  [0xA7B8, 0xA7B9],
  [0xA7BA, 0xA7BB],
  [0xA7BC, 0xA7BD],
  [0xA7BE, 0xA7BF],
  [0xA7C2, 0xA7C3],
  [0xA7C4, 0xA794],
  [0xA7C5, 0x282],
  [0xA7C6, 0x1D8E],
  [0xAB70, 0x13A0],
  [0xAB71, 0x13A1],
  [0xAB72, 0x13A2],
  [0xAB73, 0x13A3],
  [0xAB74, 0x13A4],
  [0xAB75, 0x13A5],
  [0xAB76, 0x13A6],
  [0xAB77, 0x13A7],
  [0xAB78, 0x13A8],
  [0xAB79, 0x13A9],
  [0xAB7A, 0x13AA],
  [0xAB7B, 0x13AB],
  [0xAB7C, 0x13AC],
  [0xAB7D, 0x13AD],
  [0xAB7E, 0x13AE],
  [0xAB7F, 0x13AF],
  [0xAB80, 0x13B0],
  [0xAB81, 0x13B1],
  [0xAB82, 0x13B2],
  [0xAB83, 0x13B3],
  [0xAB84, 0x13B4],
  [0xAB85, 0x13B5],
  [0xAB86, 0x13B6],
  [0xAB87, 0x13B7],
  [0xAB88, 0x13B8],
  [0xAB89, 0x13B9],
  [0xAB8A, 0x13BA],
  [0xAB8B, 0x13BB],
  [0xAB8C, 0x13BC],
  [0xAB8D, 0x13BD],
  [0xAB8E, 0x13BE],
  [0xAB8F, 0x13BF],
  [0xAB90, 0x13C0],
  [0xAB91, 0x13C1],
  [0xAB92, 0x13C2],
  [0xAB93, 0x13C3],
  [0xAB94, 0x13C4],
  [0xAB95, 0x13C5],
  [0xAB96, 0x13C6],
  [0xAB97, 0x13C7],
  [0xAB98, 0x13C8],
  [0xAB99, 0x13C9],
  [0xAB9A, 0x13CA],
  [0xAB9B, 0x13CB],
  [0xAB9C, 0x13CC],
  [0xAB9D, 0x13CD],
  [0xAB9E, 0x13CE],
  [0xAB9F, 0x13CF],
  [0xABA0, 0x13D0],
  [0xABA1, 0x13D1],
  [0xABA2, 0x13D2],
  [0xABA3, 0x13D3],
  [0xABA4, 0x13D4],
  [0xABA5, 0x13D5],
  [0xABA6, 0x13D6],
  [0xABA7, 0x13D7],
  [0xABA8, 0x13D8],
  [0xABA9, 0x13D9],
  [0xABAA, 0x13DA],
  [0xABAB, 0x13DB],
  [0xABAC, 0x13DC],
  [0xABAD, 0x13DD],
  [0xABAE, 0x13DE],
  [0xABAF, 0x13DF],
  [0xABB0, 0x13E0],
  [0xABB1, 0x13E1],
  [0xABB2, 0x13E2],
  [0xABB3, 0x13E3],
  [0xABB4, 0x13E4],
  [0xABB5, 0x13E5],
  [0xABB6, 0x13E6],
  [0xABB7, 0x13E7],
  [0xABB8, 0x13E8],
  [0xABB9, 0x13E9],
  [0xABBA, 0x13EA],
  [0xABBB, 0x13EB],
  [0xABBC, 0x13EC],
  [0xABBD, 0x13ED],
  [0xABBE, 0x13EE],
  [0xABBF, 0x13EF],
  [0xFF21, 0xFF41],
  [0xFF22, 0xFF42],
  [0xFF23, 0xFF43],
  [0xFF24, 0xFF44],
  [0xFF25, 0xFF45],
  [0xFF26, 0xFF46],
  [0xFF27, 0xFF47],
  [0xFF28, 0xFF48],
  [0xFF29, 0xFF49],
  [0xFF2A, 0xFF4A],
  [0xFF2B, 0xFF4B],
  [0xFF2C, 0xFF4C],
  [0xFF2D, 0xFF4D],
  [0xFF2E, 0xFF4E],
  [0xFF2F, 0xFF4F],
  [0xFF30, 0xFF50],
  [0xFF31, 0xFF51],
  [0xFF32, 0xFF52],
  [0xFF33, 0xFF53],
  [0xFF34, 0xFF54],
  [0xFF35, 0xFF55],
  [0xFF36, 0xFF56],
  [0xFF37, 0xFF57],
  [0xFF38, 0xFF58],
  [0xFF39, 0xFF59],
  [0xFF3A, 0xFF5A],
  [0x10400, 0x10428],
  [0x10401, 0x10429],
  [0x10402, 0x1042A],
  [0x10403, 0x1042B],
  [0x10404, 0x1042C],
  [0x10405, 0x1042D],
  [0x10406, 0x1042E],
  [0x10407, 0x1042F],
  [0x10408, 0x10430],
  [0x10409, 0x10431],
  [0x1040A, 0x10432],
  [0x1040B, 0x10433],
  [0x1040C, 0x10434],
  [0x1040D, 0x10435],
  [0x1040E, 0x10436],
  [0x1040F, 0x10437],
  [0x10410, 0x10438],
  [0x10411, 0x10439],
  [0x10412, 0x1043A],
  [0x10413, 0x1043B],
  [0x10414, 0x1043C],
  [0x10415, 0x1043D],
  [0x10416, 0x1043E],
  [0x10417, 0x1043F],
  [0x10418, 0x10440],
  [0x10419, 0x10441],
  [0x1041A, 0x10442],
  [0x1041B, 0x10443],
  [0x1041C, 0x10444],
  [0x1041D, 0x10445],
  [0x1041E, 0x10446],
  [0x1041F, 0x10447],
  [0x10420, 0x10448],
  [0x10421, 0x10449],
  [0x10422, 0x1044A],
  [0x10423, 0x1044B],
  [0x10424, 0x1044C],
  [0x10425, 0x1044D],
  [0x10426, 0x1044E],
  [0x10427, 0x1044F],
  [0x104B0, 0x104D8],
  [0x104B1, 0x104D9],
  [0x104B2, 0x104DA],
  [0x104B3, 0x104DB],
  [0x104B4, 0x104DC],
  [0x104B5, 0x104DD],
  [0x104B6, 0x104DE],
  [0x104B7, 0x104DF],
  [0x104B8, 0x104E0],
  [0x104B9, 0x104E1],
  [0x104BA, 0x104E2],
  [0x104BB, 0x104E3],
  [0x104BC, 0x104E4],
  [0x104BD, 0x104E5],
  [0x104BE, 0x104E6],
  [0x104BF, 0x104E7],
  [0x104C0, 0x104E8],
  [0x104C1, 0x104E9],
  [0x104C2, 0x104EA],
  [0x104C3, 0x104EB],
  [0x104C4, 0x104EC],
  [0x104C5, 0x104ED],
  [0x104C6, 0x104EE],
  [0x104C7, 0x104EF],
  [0x104C8, 0x104F0],
  [0x104C9, 0x104F1],
  [0x104CA, 0x104F2],
  [0x104CB, 0x104F3],
  [0x104CC, 0x104F4],
  [0x104CD, 0x104F5],
  [0x104CE, 0x104F6],
  [0x104CF, 0x104F7],
  [0x104D0, 0x104F8],
  [0x104D1, 0x104F9],
  [0x104D2, 0x104FA],
  [0x104D3, 0x104FB],
  [0x10C80, 0x10CC0],
  [0x10C81, 0x10CC1],
  [0x10C82, 0x10CC2],
  [0x10C83, 0x10CC3],
  [0x10C84, 0x10CC4],
  [0x10C85, 0x10CC5],
  [0x10C86, 0x10CC6],
  [0x10C87, 0x10CC7],
  [0x10C88, 0x10CC8],
  [0x10C89, 0x10CC9],
  [0x10C8A, 0x10CCA],
  [0x10C8B, 0x10CCB],
  [0x10C8C, 0x10CCC],
  [0x10C8D, 0x10CCD],
  [0x10C8E, 0x10CCE],
  [0x10C8F, 0x10CCF],
  [0x10C90, 0x10CD0],
  [0x10C91, 0x10CD1],
  [0x10C92, 0x10CD2],
  [0x10C93, 0x10CD3],
  [0x10C94, 0x10CD4],
  [0x10C95, 0x10CD5],
  [0x10C96, 0x10CD6],
  [0x10C97, 0x10CD7],
  [0x10C98, 0x10CD8],
  [0x10C99, 0x10CD9],
  [0x10C9A, 0x10CDA],
  [0x10C9B, 0x10CDB],
  [0x10C9C, 0x10CDC],
  [0x10C9D, 0x10CDD],
  [0x10C9E, 0x10CDE],
  [0x10C9F, 0x10CDF],
  [0x10CA0, 0x10CE0],
  [0x10CA1, 0x10CE1],
  [0x10CA2, 0x10CE2],
  [0x10CA3, 0x10CE3],
  [0x10CA4, 0x10CE4],
  [0x10CA5, 0x10CE5],
  [0x10CA6, 0x10CE6],
  [0x10CA7, 0x10CE7],
  [0x10CA8, 0x10CE8],
  [0x10CA9, 0x10CE9],
  [0x10CAA, 0x10CEA],
  [0x10CAB, 0x10CEB],
  [0x10CAC, 0x10CEC],
  [0x10CAD, 0x10CED],
  [0x10CAE, 0x10CEE],
  [0x10CAF, 0x10CEF],
  [0x10CB0, 0x10CF0],
  [0x10CB1, 0x10CF1],
  [0x10CB2, 0x10CF2],
  [0x118A0, 0x118C0],
  [0x118A1, 0x118C1],
  [0x118A2, 0x118C2],
  [0x118A3, 0x118C3],
  [0x118A4, 0x118C4],
  [0x118A5, 0x118C5],
  [0x118A6, 0x118C6],
  [0x118A7, 0x118C7],
  [0x118A8, 0x118C8],
  [0x118A9, 0x118C9],
  [0x118AA, 0x118CA],
  [0x118AB, 0x118CB],
  [0x118AC, 0x118CC],
  [0x118AD, 0x118CD],
  [0x118AE, 0x118CE],
  [0x118AF, 0x118CF],
  [0x118B0, 0x118D0],
  [0x118B1, 0x118D1],
  [0x118B2, 0x118D2],
  [0x118B3, 0x118D3],
  [0x118B4, 0x118D4],
  [0x118B5, 0x118D5],
  [0x118B6, 0x118D6],
  [0x118B7, 0x118D7],
  [0x118B8, 0x118D8],
  [0x118B9, 0x118D9],
  [0x118BA, 0x118DA],
  [0x118BB, 0x118DB],
  [0x118BC, 0x118DC],
  [0x118BD, 0x118DD],
  [0x118BE, 0x118DE],
  [0x118BF, 0x118DF],
  [0x16E40, 0x16E60],
  [0x16E41, 0x16E61],
  [0x16E42, 0x16E62],
  [0x16E43, 0x16E63],
  [0x16E44, 0x16E64],
  [0x16E45, 0x16E65],
  [0x16E46, 0x16E66],
  [0x16E47, 0x16E67],
  [0x16E48, 0x16E68],
  [0x16E49, 0x16E69],
  [0x16E4A, 0x16E6A],
  [0x16E4B, 0x16E6B],
  [0x16E4C, 0x16E6C],
  [0x16E4D, 0x16E6D],
  [0x16E4E, 0x16E6E],
  [0x16E4F, 0x16E6F],
  [0x16E50, 0x16E70],
  [0x16E51, 0x16E71],
  [0x16E52, 0x16E72],
  [0x16E53, 0x16E73],
  [0x16E54, 0x16E74],
  [0x16E55, 0x16E75],
  [0x16E56, 0x16E76],
  [0x16E57, 0x16E77],
  [0x16E58, 0x16E78],
  [0x16E59, 0x16E79],
  [0x16E5A, 0x16E7A],
  [0x16E5B, 0x16E7B],
  [0x16E5C, 0x16E7C],
  [0x16E5D, 0x16E7D],
  [0x16E5E, 0x16E7E],
  [0x16E5F, 0x16E7F],
  [0x1E900, 0x1E922],
  [0x1E901, 0x1E923],
  [0x1E902, 0x1E924],
  [0x1E903, 0x1E925],
  [0x1E904, 0x1E926],
  [0x1E905, 0x1E927],
  [0x1E906, 0x1E928],
  [0x1E907, 0x1E929],
  [0x1E908, 0x1E92A],
  [0x1E909, 0x1E92B],
  [0x1E90A, 0x1E92C],
  [0x1E90B, 0x1E92D],
  [0x1E90C, 0x1E92E],
  [0x1E90D, 0x1E92F],
  [0x1E90E, 0x1E930],
  [0x1E90F, 0x1E931],
  [0x1E910, 0x1E932],
  [0x1E911, 0x1E933],
  [0x1E912, 0x1E934],
  [0x1E913, 0x1E935],
  [0x1E914, 0x1E936],
  [0x1E915, 0x1E937],
  [0x1E916, 0x1E938],
  [0x1E917, 0x1E939],
  [0x1E918, 0x1E93A],
  [0x1E919, 0x1E93B],
  [0x1E91A, 0x1E93C],
  [0x1E91B, 0x1E93D],
  [0x1E91C, 0x1E93E],
  [0x1E91D, 0x1E93F],
  [0x1E91E, 0x1E940],
  [0x1E91F, 0x1E941],
  [0x1E920, 0x1E942],
  [0x1E921, 0x1E943],
  [0x1E9E, 0xDF],
  [0x1F88, 0x1F80],
  [0x1F89, 0x1F81],
  [0x1F8A, 0x1F82],
  [0x1F8B, 0x1F83],
  [0x1F8C, 0x1F84],
  [0x1F8D, 0x1F85],
  [0x1F8E, 0x1F86],
  [0x1F8F, 0x1F87],
  [0x1F98, 0x1F90],
  [0x1F99, 0x1F91],
  [0x1F9A, 0x1F92],
  [0x1F9B, 0x1F93],
  [0x1F9C, 0x1F94],
  [0x1F9D, 0x1F95],
  [0x1F9E, 0x1F96],
  [0x1F9F, 0x1F97],
  [0x1FA8, 0x1FA0],
  [0x1FA9, 0x1FA1],
  [0x1FAA, 0x1FA2],
  [0x1FAB, 0x1FA3],
  [0x1FAC, 0x1FA4],
  [0x1FAD, 0x1FA5],
  [0x1FAE, 0x1FA6],
  [0x1FAF, 0x1FA7],
  [0x1FBC, 0x1FB3],
  [0x1FCC, 0x1FC3],
  [0x1FFC, 0x1FF3],
]);

const inverseFoldMap = new Map();
for (const [c, d] of foldMap) {
  if (!inverseFoldMap.has(d)) {
    inverseFoldMap.set(d, []);
  }
  inverseFoldMap.get(d).push(c);
}

const extraWordCharacters = new Set([0x17F, 0x212A]);

const category = new Map();
category.set("Cased_Letter", [65,91,97,123,181,182,192,215,216,247,248,443,444,448,452,660,661,688,880,884,886,888,891,894,895,896,902,903,904,907,908,909,910,930,931,1014,1015,1154,1162,1328,1329,1367,1376,1417,4256,4294,4295,4296,4301,4302,4304,4347,4349,4352,5024,5110,5112,5118,7296,7305,7312,7355,7357,7360,7424,7468,7531,7544,7545,7579,7680,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8125,8126,8127,8130,8133,8134,8141,8144,8148,8150,8156,8160,8173,8178,8181,8182,8189,8450,8451,8455,8456,8458,8468,8469,8470,8473,8478,8484,8485,8486,8487,8488,8489,8490,8494,8495,8501,8505,8506,8508,8512,8517,8522,8526,8527,8579,8581,11264,11311,11312,11359,11360,11388,11390,11493,11499,11503,11506,11508,11520,11558,11559,11560,11565,11566,42560,42606,42624,42652,42786,42864,42865,42888,42891,42895,42896,42944,42946,42951,43002,43003,43824,43867,43872,43880,43888,43968,64256,64263,64275,64280,65313,65339,65345,65371,66560,66640,66736,66772,66776,66812,68736,68787,68800,68851,71840,71904,93760,93824,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120513,120514,120539,120540,120571,120572,120597,120598,120629,120630,120655,120656,120687,120688,120713,120714,120745,120746,120771,120772,120780,125184,125252]);
category.set("Close_Punctuation", [41,42,93,94,125,126,3899,3900,3901,3902,5788,5789,8262,8263,8318,8319,8334,8335,8969,8970,8971,8972,9002,9003,10089,10090,10091,10092,10093,10094,10095,10096,10097,10098,10099,10100,10101,10102,10182,10183,10215,10216,10217,10218,10219,10220,10221,10222,10223,10224,10628,10629,10630,10631,10632,10633,10634,10635,10636,10637,10638,10639,10640,10641,10642,10643,10644,10645,10646,10647,10648,10649,10713,10714,10715,10716,10749,10750,11811,11812,11813,11814,11815,11816,11817,11818,12297,12298,12299,12300,12301,12302,12303,12304,12305,12306,12309,12310,12311,12312,12313,12314,12315,12316,12318,12320,64830,64831,65048,65049,65078,65079,65080,65081,65082,65083,65084,65085,65086,65087,65088,65089,65090,65091,65092,65093,65096,65097,65114,65115,65116,65117,65118,65119,65289,65290,65341,65342,65373,65374,65376,65377,65379,65380]);
category.set("Connector_Punctuation", [95,96,8255,8257,8276,8277,65075,65077,65101,65104,65343,65344]);
category.set("Control", [0,32,127,160]);
category.set("Currency_Symbol", [36,37,162,166,1423,1424,1547,1548,2046,2048,2546,2548,2555,2556,2801,2802,3065,3066,3647,3648,6107,6108,8352,8384,43064,43065,65020,65021,65129,65130,65284,65285,65504,65506,65509,65511,73693,73697,123647,123648,126128,126129]);
category.set("Dash_Punctuation", [45,46,1418,1419,1470,1471,5120,5121,6150,6151,8208,8214,11799,11800,11802,11803,11834,11836,11840,11841,12316,12317,12336,12337,12448,12449,65073,65075,65112,65113,65123,65124,65293,65294]);
category.set("Decimal_Number", [48,58,1632,1642,1776,1786,1984,1994,2406,2416,2534,2544,2662,2672,2790,2800,2918,2928,3046,3056,3174,3184,3302,3312,3430,3440,3558,3568,3664,3674,3792,3802,3872,3882,4160,4170,4240,4250,6112,6122,6160,6170,6470,6480,6608,6618,6784,6794,6800,6810,6992,7002,7088,7098,7232,7242,7248,7258,42528,42538,43216,43226,43264,43274,43472,43482,43504,43514,43600,43610,44016,44026,65296,65306,66720,66730,68912,68922,69734,69744,69872,69882,69942,69952,70096,70106,70384,70394,70736,70746,70864,70874,71248,71258,71360,71370,71472,71482,71904,71914,72784,72794,73040,73050,73120,73130,92768,92778,93008,93018,120782,120832,123200,123210,123632,123642,125264,125274]);
category.set("Enclosing_Mark", [1160,1162,6846,6847,8413,8417,8418,8421,42608,42611]);
category.set("Final_Punctuation", [187,188,8217,8218,8221,8222,8250,8251,11779,11780,11781,11782,11786,11787,11789,11790,11805,11806,11809,11810]);
category.set("Format", [173,174,1536,1542,1564,1565,1757,1758,1807,1808,2274,2275,6158,6159,8203,8208,8234,8239,8288,8293,8294,8304,65279,65280,65529,65532,69821,69822,69837,69838,78896,78905,113824,113828,119155,119163,917505,917506,917536,917632]);
category.set("Initial_Punctuation", [171,172,8216,8217,8219,8221,8223,8224,8249,8250,11778,11779,11780,11781,11785,11786,11788,11789,11804,11805,11808,11809]);
category.set("Letter", [65,91,97,123,170,171,181,182,186,187,192,215,216,247,248,706,710,722,736,741,748,749,750,751,880,885,886,888,890,894,895,896,902,903,904,907,908,909,910,930,931,1014,1015,1154,1162,1328,1329,1367,1369,1370,1376,1417,1488,1515,1519,1523,1568,1611,1646,1648,1649,1748,1749,1750,1765,1767,1774,1776,1786,1789,1791,1792,1808,1809,1810,1840,1869,1958,1969,1970,1994,2027,2036,2038,2042,2043,2048,2070,2074,2075,2084,2085,2088,2089,2112,2137,2144,2155,2208,2229,2230,2238,2308,2362,2365,2366,2384,2385,2392,2402,2417,2433,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2493,2494,2510,2511,2524,2526,2527,2530,2544,2546,2556,2557,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2649,2653,2654,2655,2674,2677,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2749,2750,2768,2769,2784,2786,2809,2810,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2877,2878,2908,2910,2911,2914,2929,2930,2947,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3024,3025,3077,3085,3086,3089,3090,3113,3114,3130,3133,3134,3160,3163,3168,3170,3200,3201,3205,3213,3214,3217,3218,3241,3242,3252,3253,3258,3261,3262,3294,3295,3296,3298,3313,3315,3333,3341,3342,3345,3346,3387,3389,3390,3406,3407,3412,3415,3423,3426,3450,3456,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3585,3633,3634,3636,3648,3655,3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3761,3762,3764,3773,3774,3776,3781,3782,3783,3804,3808,3840,3841,3904,3912,3913,3949,3976,3981,4096,4139,4159,4160,4176,4182,4186,4190,4193,4194,4197,4199,4206,4209,4213,4226,4238,4239,4256,4294,4295,4296,4301,4302,4304,4347,4348,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4992,5008,5024,5110,5112,5118,5121,5741,5743,5760,5761,5787,5792,5867,5873,5881,5888,5901,5902,5906,5920,5938,5952,5970,5984,5997,5998,6001,6016,6068,6103,6104,6108,6109,6176,6265,6272,6277,6279,6313,6314,6315,6320,6390,6400,6431,6480,6510,6512,6517,6528,6572,6576,6602,6656,6679,6688,6741,6823,6824,6917,6964,6981,6988,7043,7073,7086,7088,7098,7142,7168,7204,7245,7248,7258,7294,7296,7305,7312,7355,7357,7360,7401,7405,7406,7412,7413,7415,7418,7419,7424,7616,7680,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8125,8126,8127,8130,8133,8134,8141,8144,8148,8150,8156,8160,8173,8178,8181,8182,8189,8305,8306,8319,8320,8336,8349,8450,8451,8455,8456,8458,8468,8469,8470,8473,8478,8484,8485,8486,8487,8488,8489,8490,8494,8495,8506,8508,8512,8517,8522,8526,8527,8579,8581,11264,11311,11312,11359,11360,11493,11499,11503,11506,11508,11520,11558,11559,11560,11565,11566,11568,11624,11631,11632,11648,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,11823,11824,12293,12295,12337,12342,12347,12349,12353,12439,12445,12448,12449,12539,12540,12544,12549,12592,12593,12687,12704,12731,12784,12800,13312,19894,19968,40944,40960,42125,42192,42238,42240,42509,42512,42528,42538,42540,42560,42607,42623,42654,42656,42726,42775,42784,42786,42889,42891,42944,42946,42951,42999,43010,43011,43014,43015,43019,43020,43043,43072,43124,43138,43188,43250,43256,43259,43260,43261,43263,43274,43302,43312,43335,43360,43389,43396,43443,43471,43472,43488,43493,43494,43504,43514,43519,43520,43561,43584,43587,43588,43596,43616,43639,43642,43643,43646,43696,43697,43698,43701,43703,43705,43710,43712,43713,43714,43715,43739,43742,43744,43755,43762,43765,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823,43824,43867,43868,43880,43888,44003,44032,55204,55216,55239,55243,55292,63744,64110,64112,64218,64256,64263,64275,64280,64285,64286,64287,64297,64298,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64434,64467,64830,64848,64912,64914,64968,65008,65020,65136,65141,65142,65277,65313,65339,65345,65371,65382,65471,65474,65480,65482,65488,65490,65496,65498,65501,65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787,66176,66205,66208,66257,66304,66336,66349,66369,66370,66378,66384,66422,66432,66462,66464,66500,66504,66512,66560,66718,66736,66772,66776,66812,66816,66856,66864,66916,67072,67383,67392,67414,67424,67432,67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67670,67680,67703,67712,67743,67808,67827,67828,67830,67840,67862,67872,67898,67968,68024,68030,68032,68096,68097,68112,68116,68117,68120,68121,68150,68192,68221,68224,68253,68288,68296,68297,68325,68352,68406,68416,68438,68448,68467,68480,68498,68608,68681,68736,68787,68800,68851,68864,68900,69376,69405,69415,69416,69424,69446,69600,69623,69635,69688,69763,69808,69840,69865,69891,69927,69956,69957,69968,70003,70006,70007,70019,70067,70081,70085,70106,70107,70108,70109,70144,70162,70163,70188,70272,70279,70280,70281,70282,70286,70287,70302,70303,70313,70320,70367,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70461,70462,70480,70481,70493,70498,70656,70709,70727,70731,70751,70752,70784,70832,70852,70854,70855,70856,71040,71087,71128,71132,71168,71216,71236,71237,71296,71339,71352,71353,71424,71451,71680,71724,71840,71904,71935,71936,72096,72104,72106,72145,72161,72162,72163,72164,72192,72193,72203,72243,72250,72251,72272,72273,72284,72330,72349,72350,72384,72441,72704,72713,72714,72751,72768,72769,72818,72848,72960,72967,72968,72970,72971,73009,73030,73031,73056,73062,73063,73065,73066,73098,73112,73113,73440,73459,73728,74650,74880,75076,77824,78895,82944,83527,92160,92729,92736,92767,92880,92910,92928,92976,92992,92996,93027,93048,93053,93072,93760,93824,93952,94027,94032,94033,94099,94112,94176,94178,94179,94180,94208,100344,100352,101107,110592,110879,110928,110931,110948,110952,110960,111356,113664,113771,113776,113789,113792,113801,113808,113818,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120513,120514,120539,120540,120571,120572,120597,120598,120629,120630,120655,120656,120687,120688,120713,120714,120745,120746,120771,120772,120780,123136,123181,123191,123198,123214,123215,123584,123628,124928,125125,125184,125252,125259,125260,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102]);
category.set("Letter_Number", [5870,5873,8544,8579,8581,8585,12295,12296,12321,12330,12344,12347,42726,42736,65856,65909,66369,66370,66378,66379,66513,66518,74752,74863]);
category.set("Line_Separator", [8232,8233]);
category.set("Lowercase_Letter", [97,123,181,182,223,247,248,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,378,379,380,381,382,385,387,388,389,390,392,393,396,398,402,403,405,406,409,412,414,415,417,418,419,420,421,422,424,425,426,428,429,430,432,433,436,437,438,439,441,443,445,448,454,455,457,458,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,497,499,500,501,502,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,570,572,573,575,577,578,579,583,584,585,586,587,588,589,590,591,660,661,688,881,882,883,884,887,888,891,894,912,913,940,975,976,978,981,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1012,1013,1014,1016,1017,1019,1021,1072,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1376,1417,4304,4347,4349,4352,5112,5118,7296,7305,7424,7468,7531,7544,7545,7579,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7944,7952,7958,7968,7976,7984,7992,8000,8006,8016,8024,8032,8040,8048,8062,8064,8072,8080,8088,8096,8104,8112,8117,8118,8120,8126,8127,8130,8133,8134,8136,8144,8148,8150,8152,8160,8168,8178,8181,8182,8184,8458,8459,8462,8464,8467,8468,8495,8496,8500,8501,8505,8506,8508,8510,8518,8522,8526,8527,8580,8581,11312,11359,11361,11362,11365,11367,11368,11369,11370,11371,11372,11373,11377,11378,11379,11381,11382,11388,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11493,11500,11501,11502,11503,11507,11508,11520,11558,11559,11560,11565,11566,42561,42562,42563,42564,42565,42566,42567,42568,42569,42570,42571,42572,42573,42574,42575,42576,42577,42578,42579,42580,42581,42582,42583,42584,42585,42586,42587,42588,42589,42590,42591,42592,42593,42594,42595,42596,42597,42598,42599,42600,42601,42602,42603,42604,42605,42606,42625,42626,42627,42628,42629,42630,42631,42632,42633,42634,42635,42636,42637,42638,42639,42640,42641,42642,42643,42644,42645,42646,42647,42648,42649,42650,42651,42652,42787,42788,42789,42790,42791,42792,42793,42794,42795,42796,42797,42798,42799,42802,42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,42833,42834,42835,42836,42837,42838,42839,42840,42841,42842,42843,42844,42845,42846,42847,42848,42849,42850,42851,42852,42853,42854,42855,42856,42857,42858,42859,42860,42861,42862,42863,42864,42865,42873,42874,42875,42876,42877,42879,42880,42881,42882,42883,42884,42885,42886,42887,42888,42892,42893,42894,42895,42897,42898,42899,42902,42903,42904,42905,42906,42907,42908,42909,42910,42911,42912,42913,42914,42915,42916,42917,42918,42919,42920,42921,42922,42927,42928,42933,42934,42935,42936,42937,42938,42939,42940,42941,42942,42943,42944,42947,42948,43002,43003,43824,43867,43872,43880,43888,43968,64256,64263,64275,64280,65345,65371,66600,66640,66776,66812,68800,68851,71872,71904,93792,93824,119834,119860,119886,119893,119894,119912,119938,119964,119990,119994,119995,119996,119997,120004,120005,120016,120042,120068,120094,120120,120146,120172,120198,120224,120250,120276,120302,120328,120354,120380,120406,120432,120458,120486,120514,120539,120540,120546,120572,120597,120598,120604,120630,120655,120656,120662,120688,120713,120714,120720,120746,120771,120772,120778,120779,120780,125218,125252]);
category.set("Mark", [768,880,1155,1162,1425,1470,1471,1472,1473,1475,1476,1478,1479,1480,1552,1563,1611,1632,1648,1649,1750,1757,1759,1765,1767,1769,1770,1774,1809,1810,1840,1867,1958,1969,2027,2036,2045,2046,2070,2074,2075,2084,2085,2088,2089,2094,2137,2140,2259,2274,2275,2308,2362,2365,2366,2384,2385,2392,2402,2404,2433,2436,2492,2493,2494,2501,2503,2505,2507,2510,2519,2520,2530,2532,2558,2559,2561,2564,2620,2621,2622,2627,2631,2633,2635,2638,2641,2642,2672,2674,2677,2678,2689,2692,2748,2749,2750,2758,2759,2762,2763,2766,2786,2788,2810,2816,2817,2820,2876,2877,2878,2885,2887,2889,2891,2894,2902,2904,2914,2916,2946,2947,3006,3011,3014,3017,3018,3022,3031,3032,3072,3077,3134,3141,3142,3145,3146,3150,3157,3159,3170,3172,3201,3204,3260,3261,3262,3269,3270,3273,3274,3278,3285,3287,3298,3300,3328,3332,3387,3389,3390,3397,3398,3401,3402,3406,3415,3416,3426,3428,3458,3460,3530,3531,3535,3541,3542,3543,3544,3552,3570,3572,3633,3634,3636,3643,3655,3663,3761,3762,3764,3773,3784,3790,3864,3866,3893,3894,3895,3896,3897,3898,3902,3904,3953,3973,3974,3976,3981,3992,3993,4029,4038,4039,4139,4159,4182,4186,4190,4193,4194,4197,4199,4206,4209,4213,4226,4238,4239,4240,4250,4254,4957,4960,5906,5909,5938,5941,5970,5972,6002,6004,6068,6100,6109,6110,6155,6158,6277,6279,6313,6314,6432,6444,6448,6460,6679,6684,6741,6751,6752,6781,6783,6784,6832,6847,6912,6917,6964,6981,7019,7028,7040,7043,7073,7086,7142,7156,7204,7224,7376,7379,7380,7401,7405,7406,7412,7413,7415,7418,7616,7674,7675,7680,8400,8433,11503,11506,11647,11648,11744,11776,12330,12336,12441,12443,42607,42611,42612,42622,42654,42656,42736,42738,43010,43011,43014,43015,43019,43020,43043,43048,43136,43138,43188,43206,43232,43250,43263,43264,43302,43310,43335,43348,43392,43396,43443,43457,43493,43494,43561,43575,43587,43588,43596,43598,43643,43646,43696,43697,43698,43701,43703,43705,43710,43712,43713,43714,43755,43760,43765,43767,44003,44011,44012,44014,64286,64287,65024,65040,65056,65072,66045,66046,66272,66273,66422,66427,68097,68100,68101,68103,68108,68112,68152,68155,68159,68160,68325,68327,68900,68904,69446,69457,69632,69635,69688,69703,69759,69763,69808,69819,69888,69891,69927,69941,69957,69959,70003,70004,70016,70019,70067,70081,70089,70093,70188,70200,70206,70207,70367,70379,70400,70404,70459,70461,70462,70469,70471,70473,70475,70478,70487,70488,70498,70500,70502,70509,70512,70517,70709,70727,70750,70751,70832,70852,71087,71094,71096,71105,71132,71134,71216,71233,71339,71352,71453,71468,71724,71739,72145,72152,72154,72161,72164,72165,72193,72203,72243,72250,72251,72255,72263,72264,72273,72284,72330,72346,72751,72759,72760,72768,72850,72872,72873,72887,73009,73015,73018,73019,73020,73022,73023,73030,73031,73032,73098,73103,73104,73106,73107,73112,73459,73463,92912,92917,92976,92983,94031,94032,94033,94088,94095,94099,113821,113823,119141,119146,119149,119155,119163,119171,119173,119180,119210,119214,119362,119365,121344,121399,121403,121453,121461,121462,121476,121477,121499,121504,121505,121520,122880,122887,122888,122905,122907,122914,122915,122917,122918,122923,123184,123191,123628,123632,125136,125143,125252,125259,917760,918000]);
category.set("Math_Symbol", [43,44,60,63,124,125,126,127,172,173,177,178,215,216,247,248,1014,1015,1542,1545,8260,8261,8274,8275,8314,8317,8330,8333,8472,8473,8512,8517,8523,8524,8592,8597,8602,8604,8608,8609,8611,8612,8614,8615,8622,8623,8654,8656,8658,8659,8660,8661,8692,8960,8992,8994,9084,9085,9115,9140,9180,9186,9655,9656,9665,9666,9720,9728,9839,9840,10176,10181,10183,10214,10224,10240,10496,10627,10649,10712,10716,10748,10750,11008,11056,11077,11079,11085,64297,64298,65122,65123,65124,65127,65291,65292,65308,65311,65372,65373,65374,65375,65506,65507,65513,65517,120513,120514,120539,120540,120571,120572,120597,120598,120629,120630,120655,120656,120687,120688,120713,120714,120745,120746,120771,120772,126704,126706]);
category.set("Modifier_Letter", [688,706,710,722,736,741,748,749,750,751,884,885,890,891,1369,1370,1600,1601,1765,1767,2036,2038,2042,2043,2074,2075,2084,2085,2088,2089,2417,2418,3654,3655,3782,3783,4348,4349,6103,6104,6211,6212,6823,6824,7288,7294,7468,7531,7544,7545,7579,7616,8305,8306,8319,8320,8336,8349,11388,11390,11631,11632,11823,11824,12293,12294,12337,12342,12347,12348,12445,12447,12540,12543,40981,40982,42232,42238,42508,42509,42623,42624,42652,42654,42775,42784,42864,42865,42888,42889,43000,43002,43471,43472,43494,43495,43632,43633,43741,43742,43763,43765,43868,43872,65392,65393,65438,65440,92992,92996,94099,94112,94176,94178,94179,94180,123191,123198,125259,125260]);
category.set("Modifier_Symbol", [94,95,96,97,168,169,175,176,180,181,184,185,706,710,722,736,741,748,749,750,751,768,885,886,900,902,8125,8126,8127,8130,8141,8144,8157,8160,8173,8176,8189,8191,12443,12445,42752,42775,42784,42786,42889,42891,43867,43868,64434,64450,65342,65343,65344,65345,65507,65508,127995,128000]);
category.set("Nonspacing_Mark", [768,880,1155,1160,1425,1470,1471,1472,1473,1475,1476,1478,1479,1480,1552,1563,1611,1632,1648,1649,1750,1757,1759,1765,1767,1769,1770,1774,1809,1810,1840,1867,1958,1969,2027,2036,2045,2046,2070,2074,2075,2084,2085,2088,2089,2094,2137,2140,2259,2274,2275,2307,2362,2363,2364,2365,2369,2377,2381,2382,2385,2392,2402,2404,2433,2434,2492,2493,2497,2501,2509,2510,2530,2532,2558,2559,2561,2563,2620,2621,2625,2627,2631,2633,2635,2638,2641,2642,2672,2674,2677,2678,2689,2691,2748,2749,2753,2758,2759,2761,2765,2766,2786,2788,2810,2816,2817,2818,2876,2877,2879,2880,2881,2885,2893,2894,2902,2903,2914,2916,2946,2947,3008,3009,3021,3022,3072,3073,3076,3077,3134,3137,3142,3145,3146,3150,3157,3159,3170,3172,3201,3202,3260,3261,3263,3264,3270,3271,3276,3278,3298,3300,3328,3330,3387,3389,3393,3397,3405,3406,3426,3428,3530,3531,3538,3541,3542,3543,3633,3634,3636,3643,3655,3663,3761,3762,3764,3773,3784,3790,3864,3866,3893,3894,3895,3896,3897,3898,3953,3967,3968,3973,3974,3976,3981,3992,3993,4029,4038,4039,4141,4145,4146,4152,4153,4155,4157,4159,4184,4186,4190,4193,4209,4213,4226,4227,4229,4231,4237,4238,4253,4254,4957,4960,5906,5909,5938,5941,5970,5972,6002,6004,6068,6070,6071,6078,6086,6087,6089,6100,6109,6110,6155,6158,6277,6279,6313,6314,6432,6435,6439,6441,6450,6451,6457,6460,6679,6681,6683,6684,6742,6743,6744,6751,6752,6753,6754,6755,6757,6765,6771,6781,6783,6784,6832,6846,6912,6916,6964,6965,6966,6971,6972,6973,6978,6979,7019,7028,7040,7042,7074,7078,7080,7082,7083,7086,7142,7143,7144,7146,7149,7150,7151,7154,7212,7220,7222,7224,7376,7379,7380,7393,7394,7401,7405,7406,7412,7413,7416,7418,7616,7674,7675,7680,8400,8413,8417,8418,8421,8433,11503,11506,11647,11648,11744,11776,12330,12334,12441,12443,42607,42608,42612,42622,42654,42656,42736,42738,43010,43011,43014,43015,43019,43020,43045,43047,43204,43206,43232,43250,43263,43264,43302,43310,43335,43346,43392,43395,43443,43444,43446,43450,43452,43454,43493,43494,43561,43567,43569,43571,43573,43575,43587,43588,43596,43597,43644,43645,43696,43697,43698,43701,43703,43705,43710,43712,43713,43714,43756,43758,43766,43767,44005,44006,44008,44009,44013,44014,64286,64287,65024,65040,65056,65072,66045,66046,66272,66273,66422,66427,68097,68100,68101,68103,68108,68112,68152,68155,68159,68160,68325,68327,68900,68904,69446,69457,69633,69634,69688,69703,69759,69762,69811,69815,69817,69819,69888,69891,69927,69932,69933,69941,70003,70004,70016,70018,70070,70079,70089,70093,70191,70194,70196,70197,70198,70200,70206,70207,70367,70368,70371,70379,70400,70402,70459,70461,70464,70465,70502,70509,70512,70517,70712,70720,70722,70725,70726,70727,70750,70751,70835,70841,70842,70843,70847,70849,70850,70852,71090,71094,71100,71102,71103,71105,71132,71134,71219,71227,71229,71230,71231,71233,71339,71340,71341,71342,71344,71350,71351,71352,71453,71456,71458,71462,71463,71468,71727,71736,71737,71739,72148,72152,72154,72156,72160,72161,72193,72203,72243,72249,72251,72255,72263,72264,72273,72279,72281,72284,72330,72343,72344,72346,72752,72759,72760,72766,72767,72768,72850,72872,72874,72881,72882,72884,72885,72887,73009,73015,73018,73019,73020,73022,73023,73030,73031,73032,73104,73106,73109,73110,73111,73112,73459,73461,92912,92917,92976,92983,94031,94032,94095,94099,113821,113823,119143,119146,119163,119171,119173,119180,119210,119214,119362,119365,121344,121399,121403,121453,121461,121462,121476,121477,121499,121504,121505,121520,122880,122887,122888,122905,122907,122914,122915,122917,122918,122923,123184,123191,123628,123632,125136,125143,125252,125259,917760,918000]);
category.set("Number", [48,58,178,180,185,186,188,191,1632,1642,1776,1786,1984,1994,2406,2416,2534,2544,2548,2554,2662,2672,2790,2800,2918,2928,2930,2936,3046,3059,3174,3184,3192,3199,3302,3312,3416,3423,3430,3449,3558,3568,3664,3674,3792,3802,3872,3892,4160,4170,4240,4250,4969,4989,5870,5873,6112,6122,6128,6138,6160,6170,6470,6480,6608,6619,6784,6794,6800,6810,6992,7002,7088,7098,7232,7242,7248,7258,8304,8305,8308,8314,8320,8330,8528,8579,8581,8586,9312,9372,9450,9472,10102,10132,11517,11518,12295,12296,12321,12330,12344,12347,12690,12694,12832,12842,12872,12880,12881,12896,12928,12938,12977,12992,42528,42538,42726,42736,43056,43062,43216,43226,43264,43274,43472,43482,43504,43514,43600,43610,44016,44026,65296,65306,65799,65844,65856,65913,65930,65932,66273,66300,66336,66340,66369,66370,66378,66379,66513,66518,66720,66730,67672,67680,67705,67712,67751,67760,67835,67840,67862,67868,68028,68030,68032,68048,68050,68096,68160,68169,68221,68223,68253,68256,68331,68336,68440,68448,68472,68480,68521,68528,68858,68864,68912,68922,69216,69247,69405,69415,69457,69461,69714,69744,69872,69882,69942,69952,70096,70106,70113,70133,70384,70394,70736,70746,70864,70874,71248,71258,71360,71370,71472,71484,71904,71923,72784,72813,73040,73050,73120,73130,73664,73685,74752,74863,92768,92778,93008,93018,93019,93026,93824,93847,119520,119540,119648,119673,120782,120832,123200,123210,123632,123642,125127,125136,125264,125274,126065,126124,126125,126128,126129,126133,126209,126254,126255,126270,127232,127245]);
category.set("Open_Punctuation", [40,41,91,92,123,124,3898,3899,3900,3901,5787,5788,8218,8219,8222,8223,8261,8262,8317,8318,8333,8334,8968,8969,8970,8971,9001,9002,10088,10089,10090,10091,10092,10093,10094,10095,10096,10097,10098,10099,10100,10101,10181,10182,10214,10215,10216,10217,10218,10219,10220,10221,10222,10223,10627,10628,10629,10630,10631,10632,10633,10634,10635,10636,10637,10638,10639,10640,10641,10642,10643,10644,10645,10646,10647,10648,10712,10713,10714,10715,10748,10749,11810,11811,11812,11813,11814,11815,11816,11817,11842,11843,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,12308,12309,12310,12311,12312,12313,12314,12315,12317,12318,64831,64832,65047,65048,65077,65078,65079,65080,65081,65082,65083,65084,65085,65086,65087,65088,65089,65090,65091,65092,65095,65096,65113,65114,65115,65116,65117,65118,65288,65289,65339,65340,65371,65372,65375,65376,65378,65379]);
category.set("Other", [0,32,127,160,173,174,888,890,896,900,907,908,909,910,930,931,1328,1329,1367,1369,1419,1421,1424,1425,1480,1488,1515,1519,1525,1542,1564,1566,1757,1758,1806,1808,1867,1869,1970,1984,2043,2045,2094,2096,2111,2112,2140,2142,2143,2144,2155,2208,2229,2230,2238,2259,2274,2275,2436,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2492,2501,2503,2505,2507,2511,2519,2520,2524,2526,2527,2532,2534,2559,2561,2564,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2620,2621,2622,2627,2631,2633,2635,2638,2641,2642,2649,2653,2654,2655,2662,2679,2689,2692,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2748,2758,2759,2762,2763,2766,2768,2769,2784,2788,2790,2802,2809,2816,2817,2820,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2876,2885,2887,2889,2891,2894,2902,2904,2908,2910,2911,2916,2918,2936,2946,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3006,3011,3014,3017,3018,3022,3024,3025,3031,3032,3046,3067,3072,3085,3086,3089,3090,3113,3114,3130,3133,3141,3142,3145,3146,3150,3157,3159,3160,3163,3168,3172,3174,3184,3191,3213,3214,3217,3218,3241,3242,3252,3253,3258,3260,3269,3270,3273,3274,3278,3285,3287,3294,3295,3296,3300,3302,3312,3313,3315,3328,3332,3333,3341,3342,3345,3346,3397,3398,3401,3402,3408,3412,3428,3430,3456,3458,3460,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3530,3531,3535,3541,3542,3543,3544,3552,3558,3568,3570,3573,3585,3643,3647,3676,3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3774,3776,3781,3782,3783,3784,3790,3792,3802,3804,3808,3840,3912,3913,3949,3953,3992,3993,4029,4030,4045,4046,4059,4096,4294,4295,4296,4301,4302,4304,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4957,4989,4992,5018,5024,5110,5112,5118,5120,5789,5792,5881,5888,5901,5902,5909,5920,5943,5952,5972,5984,5997,5998,6001,6002,6004,6016,6110,6112,6122,6128,6138,6144,6158,6160,6170,6176,6265,6272,6315,6320,6390,6400,6431,6432,6444,6448,6460,6464,6465,6468,6510,6512,6517,6528,6572,6576,6602,6608,6619,6622,6684,6686,6751,6752,6781,6783,6794,6800,6810,6816,6830,6832,6847,6912,6988,6992,7037,7040,7156,7164,7224,7227,7242,7245,7305,7312,7355,7357,7368,7376,7419,7424,7674,7675,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8133,8134,8148,8150,8156,8157,8176,8178,8181,8182,8191,8192,8203,8208,8234,8239,8288,8304,8306,8308,8335,8336,8349,8352,8384,8400,8433,8448,8588,8592,9255,9280,9291,9312,11124,11126,11158,11160,11311,11312,11359,11360,11508,11513,11558,11559,11560,11565,11566,11568,11624,11631,11633,11647,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,11744,11856,11904,11930,11931,12020,12032,12246,12272,12284,12288,12352,12353,12439,12441,12544,12549,12592,12593,12687,12688,12731,12736,12772,12784,12831,12832,13055,13056,19894,19904,40944,40960,42125,42128,42183,42192,42540,42560,42744,42752,42944,42946,42951,42999,43052,43056,43066,43072,43128,43136,43206,43214,43226,43232,43348,43359,43389,43392,43470,43471,43482,43486,43519,43520,43575,43584,43598,43600,43610,43612,43715,43739,43767,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823,43824,43880,43888,44014,44016,44026,44032,55204,55216,55239,55243,55292,63744,64110,64112,64218,64256,64263,64275,64280,64285,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64450,64467,64832,64848,64912,64914,64968,65008,65022,65024,65050,65056,65107,65108,65127,65128,65132,65136,65141,65142,65277,65281,65471,65474,65480,65482,65488,65490,65496,65498,65501,65504,65511,65512,65519,65532,65534,65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787,65792,65795,65799,65844,65847,65935,65936,65948,65952,65953,66000,66046,66176,66205,66208,66257,66272,66300,66304,66340,66349,66379,66384,66427,66432,66462,66463,66500,66504,66518,66560,66718,66720,66730,66736,66772,66776,66812,66816,66856,66864,66916,66927,66928,67072,67383,67392,67414,67424,67432,67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67670,67671,67743,67751,67760,67808,67827,67828,67830,67835,67868,67871,67898,67903,67904,67968,68024,68028,68048,68050,68100,68101,68103,68108,68116,68117,68120,68121,68150,68152,68155,68159,68169,68176,68185,68192,68256,68288,68327,68331,68343,68352,68406,68409,68438,68440,68467,68472,68498,68505,68509,68521,68528,68608,68681,68736,68787,68800,68851,68858,68904,68912,68922,69216,69247,69376,69416,69424,69466,69600,69623,69632,69710,69714,69744,69759,69821,69822,69826,69840,69865,69872,69882,69888,69941,69942,69959,69968,70007,70016,70094,70096,70112,70113,70133,70144,70162,70163,70207,70272,70279,70280,70281,70282,70286,70287,70302,70303,70314,70320,70379,70384,70394,70400,70404,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70459,70469,70471,70473,70475,70478,70480,70481,70487,70488,70493,70500,70502,70509,70512,70517,70656,70746,70747,70748,70749,70752,70784,70856,70864,70874,71040,71094,71096,71134,71168,71237,71248,71258,71264,71277,71296,71353,71360,71370,71424,71451,71453,71468,71472,71488,71680,71740,71840,71923,71935,71936,72096,72104,72106,72152,72154,72165,72192,72264,72272,72355,72384,72441,72704,72713,72714,72759,72760,72774,72784,72813,72816,72848,72850,72872,72873,72887,72960,72967,72968,72970,72971,73015,73018,73019,73020,73022,73023,73032,73040,73050,73056,73062,73063,73065,73066,73103,73104,73106,73107,73113,73120,73130,73440,73465,73664,73714,73727,74650,74752,74863,74864,74869,74880,75076,77824,78895,82944,83527,92160,92729,92736,92767,92768,92778,92782,92784,92880,92910,92912,92918,92928,92998,93008,93018,93019,93026,93027,93048,93053,93072,93760,93851,93952,94027,94031,94088,94095,94112,94176,94180,94208,100344,100352,101107,110592,110879,110928,110931,110948,110952,110960,111356,113664,113771,113776,113789,113792,113801,113808,113818,113820,113824,118784,119030,119040,119079,119081,119155,119163,119273,119296,119366,119520,119540,119552,119639,119648,119673,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120780,120782,121484,121499,121504,121505,121520,122880,122887,122888,122905,122907,122914,122915,122917,122918,122923,123136,123181,123184,123198,123200,123210,123214,123216,123584,123642,123647,123648,124928,125125,125127,125143,125184,125260,125264,125274,125278,125280,126065,126133,126209,126270,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,126704,126706,126976,127020,127024,127124,127136,127151,127153,127168,127169,127184,127185,127222,127232,127245,127248,127341,127344,127405,127462,127491,127504,127548,127552,127561,127568,127570,127584,127590,127744,128726,128736,128749,128752,128763,128768,128884,128896,128985,128992,129004,129024,129036,129040,129096,129104,129114,129120,129160,129168,129198,129280,129292,129293,129394,129395,129399,129402,129443,129445,129451,129454,129483,129485,129620,129632,129646,129648,129652,129656,129659,129664,129667,129680,129686,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102,917760,918000,1114112]);
category.set("Other_Letter", [170,171,186,187,443,444,448,452,660,661,1488,1515,1519,1523,1568,1600,1601,1611,1646,1648,1649,1748,1749,1750,1774,1776,1786,1789,1791,1792,1808,1809,1810,1840,1869,1958,1969,1970,1994,2027,2048,2070,2112,2137,2144,2155,2208,2229,2230,2238,2308,2362,2365,2366,2384,2385,2392,2402,2418,2433,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2493,2494,2510,2511,2524,2526,2527,2530,2544,2546,2556,2557,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2649,2653,2654,2655,2674,2677,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2749,2750,2768,2769,2784,2786,2809,2810,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2877,2878,2908,2910,2911,2914,2929,2930,2947,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3024,3025,3077,3085,3086,3089,3090,3113,3114,3130,3133,3134,3160,3163,3168,3170,3200,3201,3205,3213,3214,3217,3218,3241,3242,3252,3253,3258,3261,3262,3294,3295,3296,3298,3313,3315,3333,3341,3342,3345,3346,3387,3389,3390,3406,3407,3412,3415,3423,3426,3450,3456,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3585,3633,3634,3636,3648,3654,3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3761,3762,3764,3773,3774,3776,3781,3804,3808,3840,3841,3904,3912,3913,3949,3976,3981,4096,4139,4159,4160,4176,4182,4186,4190,4193,4194,4197,4199,4206,4209,4213,4226,4238,4239,4352,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4992,5008,5121,5741,5743,5760,5761,5787,5792,5867,5873,5881,5888,5901,5902,5906,5920,5938,5952,5970,5984,5997,5998,6001,6016,6068,6108,6109,6176,6211,6212,6265,6272,6277,6279,6313,6314,6315,6320,6390,6400,6431,6480,6510,6512,6517,6528,6572,6576,6602,6656,6679,6688,6741,6917,6964,6981,6988,7043,7073,7086,7088,7098,7142,7168,7204,7245,7248,7258,7288,7401,7405,7406,7412,7413,7415,7418,7419,8501,8505,11568,11624,11648,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,12294,12295,12348,12349,12353,12439,12447,12448,12449,12539,12543,12544,12549,12592,12593,12687,12704,12731,12784,12800,13312,19894,19968,40944,40960,40981,40982,42125,42192,42232,42240,42508,42512,42528,42538,42540,42606,42607,42656,42726,42895,42896,42999,43000,43003,43010,43011,43014,43015,43019,43020,43043,43072,43124,43138,43188,43250,43256,43259,43260,43261,43263,43274,43302,43312,43335,43360,43389,43396,43443,43488,43493,43495,43504,43514,43519,43520,43561,43584,43587,43588,43596,43616,43632,43633,43639,43642,43643,43646,43696,43697,43698,43701,43703,43705,43710,43712,43713,43714,43715,43739,43741,43744,43755,43762,43763,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823,43968,44003,44032,55204,55216,55239,55243,55292,63744,64110,64112,64218,64285,64286,64287,64297,64298,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64434,64467,64830,64848,64912,64914,64968,65008,65020,65136,65141,65142,65277,65382,65392,65393,65438,65440,65471,65474,65480,65482,65488,65490,65496,65498,65501,65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787,66176,66205,66208,66257,66304,66336,66349,66369,66370,66378,66384,66422,66432,66462,66464,66500,66504,66512,66640,66718,66816,66856,66864,66916,67072,67383,67392,67414,67424,67432,67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67670,67680,67703,67712,67743,67808,67827,67828,67830,67840,67862,67872,67898,67968,68024,68030,68032,68096,68097,68112,68116,68117,68120,68121,68150,68192,68221,68224,68253,68288,68296,68297,68325,68352,68406,68416,68438,68448,68467,68480,68498,68608,68681,68864,68900,69376,69405,69415,69416,69424,69446,69600,69623,69635,69688,69763,69808,69840,69865,69891,69927,69956,69957,69968,70003,70006,70007,70019,70067,70081,70085,70106,70107,70108,70109,70144,70162,70163,70188,70272,70279,70280,70281,70282,70286,70287,70302,70303,70313,70320,70367,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70461,70462,70480,70481,70493,70498,70656,70709,70727,70731,70751,70752,70784,70832,70852,70854,70855,70856,71040,71087,71128,71132,71168,71216,71236,71237,71296,71339,71352,71353,71424,71451,71680,71724,71935,71936,72096,72104,72106,72145,72161,72162,72163,72164,72192,72193,72203,72243,72250,72251,72272,72273,72284,72330,72349,72350,72384,72441,72704,72713,72714,72751,72768,72769,72818,72848,72960,72967,72968,72970,72971,73009,73030,73031,73056,73062,73063,73065,73066,73098,73112,73113,73440,73459,73728,74650,74880,75076,77824,78895,82944,83527,92160,92729,92736,92767,92880,92910,92928,92976,93027,93048,93053,93072,93952,94027,94032,94033,94208,100344,100352,101107,110592,110879,110928,110931,110948,110952,110960,111356,113664,113771,113776,113789,113792,113801,113808,113818,123136,123181,123214,123215,123584,123628,124928,125125,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102]);
category.set("Other_Number", [178,180,185,186,188,191,2548,2554,2930,2936,3056,3059,3192,3199,3416,3423,3440,3449,3882,3892,4969,4989,6128,6138,6618,6619,8304,8305,8308,8314,8320,8330,8528,8544,8585,8586,9312,9372,9450,9472,10102,10132,11517,11518,12690,12694,12832,12842,12872,12880,12881,12896,12928,12938,12977,12992,43056,43062,65799,65844,65909,65913,65930,65932,66273,66300,66336,66340,67672,67680,67705,67712,67751,67760,67835,67840,67862,67868,68028,68030,68032,68048,68050,68096,68160,68169,68221,68223,68253,68256,68331,68336,68440,68448,68472,68480,68521,68528,68858,68864,69216,69247,69405,69415,69457,69461,69714,69734,70113,70133,71482,71484,71914,71923,72794,72813,73664,73685,93019,93026,93824,93847,119520,119540,119648,119673,125127,125136,126065,126124,126125,126128,126129,126133,126209,126254,126255,126270,127232,127245]);
category.set("Other_Punctuation", [33,36,37,40,42,43,44,45,46,48,58,60,63,65,92,93,161,162,167,168,182,184,191,192,894,895,903,904,1370,1376,1417,1418,1472,1473,1475,1476,1478,1479,1523,1525,1545,1547,1548,1550,1563,1564,1566,1568,1642,1646,1748,1749,1792,1806,2039,2042,2096,2111,2142,2143,2404,2406,2416,2417,2557,2558,2678,2679,2800,2801,3191,3192,3204,3205,3572,3573,3663,3664,3674,3676,3844,3859,3860,3861,3973,3974,4048,4053,4057,4059,4170,4176,4347,4348,4960,4969,5742,5743,5867,5870,5941,5943,6100,6103,6104,6107,6144,6150,6151,6155,6468,6470,6686,6688,6816,6823,6824,6830,7002,7009,7164,7168,7227,7232,7294,7296,7360,7368,7379,7380,8214,8216,8224,8232,8240,8249,8251,8255,8257,8260,8263,8274,8275,8276,8277,8287,11513,11517,11518,11520,11632,11633,11776,11778,11782,11785,11787,11788,11790,11799,11800,11802,11803,11804,11806,11808,11818,11823,11824,11834,11836,11840,11841,11842,11843,11856,12289,12292,12349,12350,12539,12540,42238,42240,42509,42512,42611,42612,42622,42623,42738,42744,43124,43128,43214,43216,43256,43259,43260,43261,43310,43312,43359,43360,43457,43470,43486,43488,43612,43616,43742,43744,43760,43762,44011,44012,65040,65047,65049,65050,65072,65073,65093,65095,65097,65101,65104,65107,65108,65112,65119,65122,65128,65129,65130,65132,65281,65284,65285,65288,65290,65291,65292,65293,65294,65296,65306,65308,65311,65313,65340,65341,65377,65378,65380,65382,65792,65795,66463,66464,66512,66513,66927,66928,67671,67672,67871,67872,67903,67904,68176,68185,68223,68224,68336,68343,68409,68416,68505,68509,69461,69466,69703,69710,69819,69821,69822,69826,69952,69956,70004,70006,70085,70089,70093,70094,70107,70108,70109,70112,70200,70206,70313,70314,70731,70736,70747,70748,70749,70750,70854,70855,71105,71128,71233,71236,71264,71277,71484,71487,71739,71740,72162,72163,72255,72263,72346,72349,72350,72355,72769,72774,72816,72818,73463,73465,73727,73728,74864,74869,92782,92784,92917,92918,92983,92988,92996,92997,93847,93851,94178,94179,113823,113824,121479,121484,125278,125280]);
category.set("Other_Symbol", [166,167,169,170,174,175,176,177,1154,1155,1421,1423,1550,1552,1758,1759,1769,1770,1789,1791,2038,2039,2554,2555,2928,2929,3059,3065,3066,3067,3199,3200,3407,3408,3449,3450,3841,3844,3859,3860,3861,3864,3866,3872,3892,3893,3894,3895,3896,3897,4030,4038,4039,4045,4046,4048,4053,4057,4254,4256,5008,5018,5741,5742,6464,6465,6622,6656,7009,7019,7028,7037,8448,8450,8451,8455,8456,8458,8468,8469,8470,8472,8478,8484,8485,8486,8487,8488,8489,8490,8494,8495,8506,8508,8522,8523,8524,8526,8527,8528,8586,8588,8597,8602,8604,8608,8609,8611,8612,8614,8615,8622,8623,8654,8656,8658,8659,8660,8661,8692,8960,8968,8972,8992,8994,9001,9003,9084,9085,9115,9140,9180,9186,9255,9280,9291,9372,9450,9472,9655,9656,9665,9666,9720,9728,9839,9840,10088,10132,10176,10240,10496,11008,11056,11077,11079,11085,11124,11126,11158,11160,11264,11493,11499,11904,11930,11931,12020,12032,12246,12272,12284,12292,12293,12306,12308,12320,12321,12342,12344,12350,12352,12688,12690,12694,12704,12736,12772,12800,12831,12842,12872,12880,12881,12896,12928,12938,12977,12992,13055,13056,13312,19904,19968,42128,42183,43048,43052,43062,43064,43065,43066,43639,43642,65021,65022,65508,65509,65512,65513,65517,65519,65532,65534,65847,65856,65913,65930,65932,65935,65936,65948,65952,65953,66000,66045,67703,67705,68296,68297,71487,71488,73685,73693,73697,73714,92988,92992,92997,92998,113820,113821,118784,119030,119040,119079,119081,119141,119146,119149,119171,119173,119180,119210,119214,119273,119296,119362,119365,119366,119552,119639,120832,121344,121399,121403,121453,121461,121462,121476,121477,121479,123215,123216,126124,126125,126254,126255,126976,127020,127024,127124,127136,127151,127153,127168,127169,127184,127185,127222,127248,127341,127344,127405,127462,127491,127504,127548,127552,127561,127568,127570,127584,127590,127744,127995,128000,128726,128736,128749,128752,128763,128768,128884,128896,128985,128992,129004,129024,129036,129040,129096,129104,129114,129120,129160,129168,129198,129280,129292,129293,129394,129395,129399,129402,129443,129445,129451,129454,129483,129485,129620,129632,129646,129648,129652,129656,129659,129664,129667,129680,129686]);
category.set("Paragraph_Separator", [8233,8234]);
category.set("Private_Use", [57344,63744,983040,1048574,1048576,1114110]);
category.set("Punctuation", [33,36,37,43,44,48,58,60,63,65,91,94,95,96,123,124,125,126,161,162,167,168,171,172,182,184,187,188,191,192,894,895,903,904,1370,1376,1417,1419,1470,1471,1472,1473,1475,1476,1478,1479,1523,1525,1545,1547,1548,1550,1563,1564,1566,1568,1642,1646,1748,1749,1792,1806,2039,2042,2096,2111,2142,2143,2404,2406,2416,2417,2557,2558,2678,2679,2800,2801,3191,3192,3204,3205,3572,3573,3663,3664,3674,3676,3844,3859,3860,3861,3898,3902,3973,3974,4048,4053,4057,4059,4170,4176,4347,4348,4960,4969,5120,5121,5742,5743,5787,5789,5867,5870,5941,5943,6100,6103,6104,6107,6144,6155,6468,6470,6686,6688,6816,6823,6824,6830,7002,7009,7164,7168,7227,7232,7294,7296,7360,7368,7379,7380,8208,8232,8240,8260,8261,8274,8275,8287,8317,8319,8333,8335,8968,8972,9001,9003,10088,10102,10181,10183,10214,10224,10627,10649,10712,10716,10748,10750,11513,11517,11518,11520,11632,11633,11776,11823,11824,11856,12289,12292,12296,12306,12308,12320,12336,12337,12349,12350,12448,12449,12539,12540,42238,42240,42509,42512,42611,42612,42622,42623,42738,42744,43124,43128,43214,43216,43256,43259,43260,43261,43310,43312,43359,43360,43457,43470,43486,43488,43612,43616,43742,43744,43760,43762,44011,44012,64830,64832,65040,65050,65072,65107,65108,65122,65123,65124,65128,65129,65130,65132,65281,65284,65285,65291,65292,65296,65306,65308,65311,65313,65339,65342,65343,65344,65371,65372,65373,65374,65375,65382,65792,65795,66463,66464,66512,66513,66927,66928,67671,67672,67871,67872,67903,67904,68176,68185,68223,68224,68336,68343,68409,68416,68505,68509,69461,69466,69703,69710,69819,69821,69822,69826,69952,69956,70004,70006,70085,70089,70093,70094,70107,70108,70109,70112,70200,70206,70313,70314,70731,70736,70747,70748,70749,70750,70854,70855,71105,71128,71233,71236,71264,71277,71484,71487,71739,71740,72162,72163,72255,72263,72346,72349,72350,72355,72769,72774,72816,72818,73463,73465,73727,73728,74864,74869,92782,92784,92917,92918,92983,92988,92996,92997,93847,93851,94178,94179,113823,113824,121479,121484,125278,125280]);
category.set("Separator", [32,33,160,161,5760,5761,8192,8203,8232,8234,8239,8240,8287,8288,12288,12289]);
category.set("Space_Separator", [32,33,160,161,5760,5761,8192,8203,8239,8240,8287,8288,12288,12289]);
category.set("Spacing_Mark", [2307,2308,2363,2364,2366,2369,2377,2381,2382,2384,2434,2436,2494,2497,2503,2505,2507,2509,2519,2520,2563,2564,2622,2625,2691,2692,2750,2753,2761,2762,2763,2765,2818,2820,2878,2879,2880,2881,2887,2889,2891,2893,2903,2904,3006,3008,3009,3011,3014,3017,3018,3021,3031,3032,3073,3076,3137,3141,3202,3204,3262,3263,3264,3269,3271,3273,3274,3276,3285,3287,3330,3332,3390,3393,3398,3401,3402,3405,3415,3416,3458,3460,3535,3538,3544,3552,3570,3572,3902,3904,3967,3968,4139,4141,4145,4146,4152,4153,4155,4157,4182,4184,4194,4197,4199,4206,4227,4229,4231,4237,4239,4240,4250,4253,6070,6071,6078,6086,6087,6089,6435,6439,6441,6444,6448,6450,6451,6457,6681,6683,6741,6742,6743,6744,6753,6754,6755,6757,6765,6771,6916,6917,6965,6966,6971,6972,6973,6978,6979,6981,7042,7043,7073,7074,7078,7080,7082,7083,7143,7144,7146,7149,7150,7151,7154,7156,7204,7212,7220,7222,7393,7394,7415,7416,12334,12336,43043,43045,43047,43048,43136,43138,43188,43204,43346,43348,43395,43396,43444,43446,43450,43452,43454,43457,43567,43569,43571,43573,43597,43598,43643,43644,43645,43646,43755,43756,43758,43760,43765,43766,44003,44005,44006,44008,44009,44011,44012,44013,69632,69633,69634,69635,69762,69763,69808,69811,69815,69817,69932,69933,69957,69959,70018,70019,70067,70070,70079,70081,70188,70191,70194,70196,70197,70198,70368,70371,70402,70404,70462,70464,70465,70469,70471,70473,70475,70478,70487,70488,70498,70500,70709,70712,70720,70722,70725,70726,70832,70835,70841,70842,70843,70847,70849,70850,71087,71090,71096,71100,71102,71103,71216,71219,71227,71229,71230,71231,71340,71341,71342,71344,71350,71351,71456,71458,71462,71463,71724,71727,71736,71737,72145,72148,72156,72160,72164,72165,72249,72250,72279,72281,72343,72344,72751,72752,72766,72767,72873,72874,72881,72882,72884,72885,73098,73103,73107,73109,73110,73111,73461,73463,94033,94088,119141,119143,119149,119155]);
category.set("Surrogate", [55296,57344]);
category.set("Symbol", [36,37,43,44,60,63,94,95,96,97,124,125,126,127,162,167,168,170,172,173,174,178,180,181,184,185,215,216,247,248,706,710,722,736,741,748,749,750,751,768,885,886,900,902,1014,1015,1154,1155,1421,1424,1542,1545,1547,1548,1550,1552,1758,1759,1769,1770,1789,1791,2038,2039,2046,2048,2546,2548,2554,2556,2801,2802,2928,2929,3059,3067,3199,3200,3407,3408,3449,3450,3647,3648,3841,3844,3859,3860,3861,3864,3866,3872,3892,3893,3894,3895,3896,3897,4030,4038,4039,4045,4046,4048,4053,4057,4254,4256,5008,5018,5741,5742,6107,6108,6464,6465,6622,6656,7009,7019,7028,7037,8125,8126,8127,8130,8141,8144,8157,8160,8173,8176,8189,8191,8260,8261,8274,8275,8314,8317,8330,8333,8352,8384,8448,8450,8451,8455,8456,8458,8468,8469,8470,8473,8478,8484,8485,8486,8487,8488,8489,8490,8494,8495,8506,8508,8512,8517,8522,8526,8527,8528,8586,8588,8592,8968,8972,9001,9003,9255,9280,9291,9372,9450,9472,10088,10132,10181,10183,10214,10224,10627,10649,10712,10716,10748,10750,11124,11126,11158,11160,11264,11493,11499,11904,11930,11931,12020,12032,12246,12272,12284,12292,12293,12306,12308,12320,12321,12342,12344,12350,12352,12443,12445,12688,12690,12694,12704,12736,12772,12800,12831,12842,12872,12880,12881,12896,12928,12938,12977,12992,13055,13056,13312,19904,19968,42128,42183,42752,42775,42784,42786,42889,42891,43048,43052,43062,43066,43639,43642,43867,43868,64297,64298,64434,64450,65020,65022,65122,65123,65124,65127,65129,65130,65284,65285,65291,65292,65308,65311,65342,65343,65344,65345,65372,65373,65374,65375,65504,65511,65512,65519,65532,65534,65847,65856,65913,65930,65932,65935,65936,65948,65952,65953,66000,66045,67703,67705,68296,68297,71487,71488,73685,73714,92988,92992,92997,92998,113820,113821,118784,119030,119040,119079,119081,119141,119146,119149,119171,119173,119180,119210,119214,119273,119296,119362,119365,119366,119552,119639,120513,120514,120539,120540,120571,120572,120597,120598,120629,120630,120655,120656,120687,120688,120713,120714,120745,120746,120771,120772,120832,121344,121399,121403,121453,121461,121462,121476,121477,121479,123215,123216,123647,123648,126124,126125,126128,126129,126254,126255,126704,126706,126976,127020,127024,127124,127136,127151,127153,127168,127169,127184,127185,127222,127248,127341,127344,127405,127462,127491,127504,127548,127552,127561,127568,127570,127584,127590,127744,128726,128736,128749,128752,128763,128768,128884,128896,128985,128992,129004,129024,129036,129040,129096,129104,129114,129120,129160,129168,129198,129280,129292,129293,129394,129395,129399,129402,129443,129445,129451,129454,129483,129485,129620,129632,129646,129648,129652,129656,129659,129664,129667,129680,129686]);
category.set("Titlecase_Letter", [453,454,456,457,459,460,498,499,8072,8080,8088,8096,8104,8112,8124,8125,8140,8141,8188,8189]);
category.set("Unassigned", [888,890,896,900,907,908,909,910,930,931,1328,1329,1367,1369,1419,1421,1424,1425,1480,1488,1515,1519,1525,1536,1565,1566,1806,1807,1867,1869,1970,1984,2043,2045,2094,2096,2111,2112,2140,2142,2143,2144,2155,2208,2229,2230,2238,2259,2436,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2492,2501,2503,2505,2507,2511,2519,2520,2524,2526,2527,2532,2534,2559,2561,2564,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2620,2621,2622,2627,2631,2633,2635,2638,2641,2642,2649,2653,2654,2655,2662,2679,2689,2692,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2748,2758,2759,2762,2763,2766,2768,2769,2784,2788,2790,2802,2809,2816,2817,2820,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2876,2885,2887,2889,2891,2894,2902,2904,2908,2910,2911,2916,2918,2936,2946,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3006,3011,3014,3017,3018,3022,3024,3025,3031,3032,3046,3067,3072,3085,3086,3089,3090,3113,3114,3130,3133,3141,3142,3145,3146,3150,3157,3159,3160,3163,3168,3172,3174,3184,3191,3213,3214,3217,3218,3241,3242,3252,3253,3258,3260,3269,3270,3273,3274,3278,3285,3287,3294,3295,3296,3300,3302,3312,3313,3315,3328,3332,3333,3341,3342,3345,3346,3397,3398,3401,3402,3408,3412,3428,3430,3456,3458,3460,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3530,3531,3535,3541,3542,3543,3544,3552,3558,3568,3570,3573,3585,3643,3647,3676,3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3774,3776,3781,3782,3783,3784,3790,3792,3802,3804,3808,3840,3912,3913,3949,3953,3992,3993,4029,4030,4045,4046,4059,4096,4294,4295,4296,4301,4302,4304,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4957,4989,4992,5018,5024,5110,5112,5118,5120,5789,5792,5881,5888,5901,5902,5909,5920,5943,5952,5972,5984,5997,5998,6001,6002,6004,6016,6110,6112,6122,6128,6138,6144,6159,6160,6170,6176,6265,6272,6315,6320,6390,6400,6431,6432,6444,6448,6460,6464,6465,6468,6510,6512,6517,6528,6572,6576,6602,6608,6619,6622,6684,6686,6751,6752,6781,6783,6794,6800,6810,6816,6830,6832,6847,6912,6988,6992,7037,7040,7156,7164,7224,7227,7242,7245,7305,7312,7355,7357,7368,7376,7419,7424,7674,7675,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8133,8134,8148,8150,8156,8157,8176,8178,8181,8182,8191,8192,8293,8294,8306,8308,8335,8336,8349,8352,8384,8400,8433,8448,8588,8592,9255,9280,9291,9312,11124,11126,11158,11160,11311,11312,11359,11360,11508,11513,11558,11559,11560,11565,11566,11568,11624,11631,11633,11647,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,11744,11856,11904,11930,11931,12020,12032,12246,12272,12284,12288,12352,12353,12439,12441,12544,12549,12592,12593,12687,12688,12731,12736,12772,12784,12831,12832,13055,13056,19894,19904,40944,40960,42125,42128,42183,42192,42540,42560,42744,42752,42944,42946,42951,42999,43052,43056,43066,43072,43128,43136,43206,43214,43226,43232,43348,43359,43389,43392,43470,43471,43482,43486,43519,43520,43575,43584,43598,43600,43610,43612,43715,43739,43767,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823,43824,43880,43888,44014,44016,44026,44032,55204,55216,55239,55243,55292,55296,64110,64112,64218,64256,64263,64275,64280,64285,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64450,64467,64832,64848,64912,64914,64968,65008,65022,65024,65050,65056,65107,65108,65127,65128,65132,65136,65141,65142,65277,65279,65280,65281,65471,65474,65480,65482,65488,65490,65496,65498,65501,65504,65511,65512,65519,65529,65534,65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787,65792,65795,65799,65844,65847,65935,65936,65948,65952,65953,66000,66046,66176,66205,66208,66257,66272,66300,66304,66340,66349,66379,66384,66427,66432,66462,66463,66500,66504,66518,66560,66718,66720,66730,66736,66772,66776,66812,66816,66856,66864,66916,66927,66928,67072,67383,67392,67414,67424,67432,67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67670,67671,67743,67751,67760,67808,67827,67828,67830,67835,67868,67871,67898,67903,67904,67968,68024,68028,68048,68050,68100,68101,68103,68108,68116,68117,68120,68121,68150,68152,68155,68159,68169,68176,68185,68192,68256,68288,68327,68331,68343,68352,68406,68409,68438,68440,68467,68472,68498,68505,68509,68521,68528,68608,68681,68736,68787,68800,68851,68858,68904,68912,68922,69216,69247,69376,69416,69424,69466,69600,69623,69632,69710,69714,69744,69759,69826,69837,69838,69840,69865,69872,69882,69888,69941,69942,69959,69968,70007,70016,70094,70096,70112,70113,70133,70144,70162,70163,70207,70272,70279,70280,70281,70282,70286,70287,70302,70303,70314,70320,70379,70384,70394,70400,70404,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70459,70469,70471,70473,70475,70478,70480,70481,70487,70488,70493,70500,70502,70509,70512,70517,70656,70746,70747,70748,70749,70752,70784,70856,70864,70874,71040,71094,71096,71134,71168,71237,71248,71258,71264,71277,71296,71353,71360,71370,71424,71451,71453,71468,71472,71488,71680,71740,71840,71923,71935,71936,72096,72104,72106,72152,72154,72165,72192,72264,72272,72355,72384,72441,72704,72713,72714,72759,72760,72774,72784,72813,72816,72848,72850,72872,72873,72887,72960,72967,72968,72970,72971,73015,73018,73019,73020,73022,73023,73032,73040,73050,73056,73062,73063,73065,73066,73103,73104,73106,73107,73113,73120,73130,73440,73465,73664,73714,73727,74650,74752,74863,74864,74869,74880,75076,77824,78895,78896,78905,82944,83527,92160,92729,92736,92767,92768,92778,92782,92784,92880,92910,92912,92918,92928,92998,93008,93018,93019,93026,93027,93048,93053,93072,93760,93851,93952,94027,94031,94088,94095,94112,94176,94180,94208,100344,100352,101107,110592,110879,110928,110931,110948,110952,110960,111356,113664,113771,113776,113789,113792,113801,113808,113818,113820,113828,118784,119030,119040,119079,119081,119273,119296,119366,119520,119540,119552,119639,119648,119673,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120780,120782,121484,121499,121504,121505,121520,122880,122887,122888,122905,122907,122914,122915,122917,122918,122923,123136,123181,123184,123198,123200,123210,123214,123216,123584,123642,123647,123648,124928,125125,125127,125143,125184,125260,125264,125274,125278,125280,126065,126133,126209,126270,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,126704,126706,126976,127020,127024,127124,127136,127151,127153,127168,127169,127184,127185,127222,127232,127245,127248,127341,127344,127405,127462,127491,127504,127548,127552,127561,127568,127570,127584,127590,127744,128726,128736,128749,128752,128763,128768,128884,128896,128985,128992,129004,129024,129036,129040,129096,129104,129114,129120,129160,129168,129198,129280,129292,129293,129394,129395,129399,129402,129443,129445,129451,129454,129483,129485,129620,129632,129646,129648,129652,129656,129659,129664,129667,129680,129686,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102,917505,917506,917536,917632,917760,918000,983040,1048574,1048576,1114110,1114112]);
category.set("Uppercase_Letter", [65,91,192,215,216,223,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,378,379,380,381,382,385,387,388,389,390,392,393,396,398,402,403,405,406,409,412,414,415,417,418,419,420,421,422,424,425,426,428,429,430,432,433,436,437,438,439,441,444,445,452,453,455,456,458,459,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,497,498,500,501,502,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,570,572,573,575,577,578,579,583,584,585,586,587,588,589,590,591,880,881,882,883,886,887,895,896,902,903,904,907,908,909,910,912,913,930,931,940,975,976,978,981,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1012,1013,1015,1016,1017,1019,1021,1072,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1329,1367,4256,4294,4295,4296,4301,4302,5024,5110,7312,7355,7357,7360,7680,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7944,7952,7960,7966,7976,7984,7992,8000,8008,8014,8025,8026,8027,8028,8029,8030,8031,8032,8040,8048,8120,8124,8136,8140,8152,8156,8168,8173,8184,8188,8450,8451,8455,8456,8459,8462,8464,8467,8469,8470,8473,8478,8484,8485,8486,8487,8488,8489,8490,8494,8496,8500,8510,8512,8517,8518,8579,8580,11264,11311,11360,11361,11362,11365,11367,11368,11369,11370,11371,11372,11373,11377,11378,11379,11381,11382,11390,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11499,11500,11501,11502,11506,11507,42560,42561,42562,42563,42564,42565,42566,42567,42568,42569,42570,42571,42572,42573,42574,42575,42576,42577,42578,42579,42580,42581,42582,42583,42584,42585,42586,42587,42588,42589,42590,42591,42592,42593,42594,42595,42596,42597,42598,42599,42600,42601,42602,42603,42604,42605,42624,42625,42626,42627,42628,42629,42630,42631,42632,42633,42634,42635,42636,42637,42638,42639,42640,42641,42642,42643,42644,42645,42646,42647,42648,42649,42650,42651,42786,42787,42788,42789,42790,42791,42792,42793,42794,42795,42796,42797,42798,42799,42802,42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,42833,42834,42835,42836,42837,42838,42839,42840,42841,42842,42843,42844,42845,42846,42847,42848,42849,42850,42851,42852,42853,42854,42855,42856,42857,42858,42859,42860,42861,42862,42863,42873,42874,42875,42876,42877,42879,42880,42881,42882,42883,42884,42885,42886,42887,42891,42892,42893,42894,42896,42897,42898,42899,42902,42903,42904,42905,42906,42907,42908,42909,42910,42911,42912,42913,42914,42915,42916,42917,42918,42919,42920,42921,42922,42927,42928,42933,42934,42935,42936,42937,42938,42939,42940,42941,42942,42943,42946,42947,42948,42951,65313,65339,66560,66600,66736,66772,68736,68787,71840,71872,93760,93792,119808,119834,119860,119886,119912,119938,119964,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119990,120016,120042,120068,120070,120071,120075,120077,120085,120086,120093,120120,120122,120123,120127,120128,120133,120134,120135,120138,120145,120172,120198,120224,120250,120276,120302,120328,120354,120380,120406,120432,120458,120488,120513,120546,120571,120604,120629,120662,120687,120720,120745,120778,120779,125184,125218]);

const property = new Map();
property.set("ASCII", [0,128]);
property.set("ASCII_Hex_Digit", [48,58,65,71,97,103]);
property.set("Alphabetic", [65,91,97,123,170,171,181,182,186,187,192,215,216,247,248,706,710,722,736,741,748,749,750,751,837,838,880,885,886,888,890,894,895,896,902,903,904,907,908,909,910,930,931,1014,1015,1154,1162,1328,1329,1367,1369,1370,1376,1417,1456,1470,1471,1472,1473,1475,1476,1478,1479,1480,1488,1515,1519,1523,1552,1563,1568,1624,1625,1632,1646,1748,1749,1757,1761,1769,1773,1776,1786,1789,1791,1792,1808,1856,1869,1970,1994,2027,2036,2038,2042,2043,2048,2072,2074,2093,2112,2137,2144,2155,2208,2229,2230,2238,2260,2272,2275,2282,2288,2364,2365,2381,2382,2385,2389,2404,2417,2436,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2493,2501,2503,2505,2507,2509,2510,2511,2519,2520,2524,2526,2527,2532,2544,2546,2556,2557,2561,2564,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2622,2627,2631,2633,2635,2637,2641,2642,2649,2653,2654,2655,2672,2678,2689,2692,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2749,2758,2759,2762,2763,2765,2768,2769,2784,2788,2809,2813,2817,2820,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2877,2885,2887,2889,2891,2893,2902,2904,2908,2910,2911,2916,2929,2930,2946,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3006,3011,3014,3017,3018,3021,3024,3025,3031,3032,3072,3076,3077,3085,3086,3089,3090,3113,3114,3130,3133,3141,3142,3145,3146,3149,3157,3159,3160,3163,3168,3172,3200,3204,3205,3213,3214,3217,3218,3241,3242,3252,3253,3258,3261,3269,3270,3273,3274,3277,3285,3287,3294,3295,3296,3300,3313,3315,3328,3332,3333,3341,3342,3345,3346,3387,3389,3397,3398,3401,3402,3405,3406,3407,3412,3416,3423,3428,3450,3456,3458,3460,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3535,3541,3542,3543,3544,3552,3570,3572,3585,3643,3648,3655,3661,3662,3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3770,3771,3774,3776,3781,3782,3783,3789,3790,3804,3808,3840,3841,3904,3912,3913,3949,3953,3970,3976,3992,3993,4029,4096,4151,4152,4153,4155,4160,4176,4240,4250,4254,4256,4294,4295,4296,4301,4302,4304,4347,4348,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4992,5008,5024,5110,5112,5118,5121,5741,5743,5760,5761,5787,5792,5867,5870,5881,5888,5901,5902,5908,5920,5940,5952,5972,5984,5997,5998,6001,6002,6004,6016,6068,6070,6089,6103,6104,6108,6109,6176,6265,6272,6315,6320,6390,6400,6431,6432,6444,6448,6457,6480,6510,6512,6517,6528,6572,6576,6602,6656,6684,6688,6751,6753,6773,6823,6824,6912,6964,6965,6980,6981,6988,7040,7082,7084,7088,7098,7142,7143,7154,7168,7223,7245,7248,7258,7294,7296,7305,7312,7355,7357,7360,7401,7405,7406,7412,7413,7415,7418,7419,7424,7616,7655,7669,7680,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8125,8126,8127,8130,8133,8134,8141,8144,8148,8150,8156,8160,8173,8178,8181,8182,8189,8305,8306,8319,8320,8336,8349,8450,8451,8455,8456,8458,8468,8469,8470,8473,8478,8484,8485,8486,8487,8488,8489,8490,8494,8495,8506,8508,8512,8517,8522,8526,8527,8544,8585,9398,9450,11264,11311,11312,11359,11360,11493,11499,11503,11506,11508,11520,11558,11559,11560,11565,11566,11568,11624,11631,11632,11648,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,11744,11776,11823,11824,12293,12296,12321,12330,12337,12342,12344,12349,12353,12439,12445,12448,12449,12539,12540,12544,12549,12592,12593,12687,12704,12731,12784,12800,13312,19894,19968,40944,40960,42125,42192,42238,42240,42509,42512,42528,42538,42540,42560,42607,42612,42620,42623,42736,42775,42784,42786,42889,42891,42944,42946,42951,42999,43014,43015,43048,43072,43124,43136,43204,43205,43206,43250,43256,43259,43260,43261,43264,43274,43307,43312,43347,43360,43389,43392,43443,43444,43456,43471,43472,43488,43504,43514,43519,43520,43575,43584,43598,43616,43639,43642,43711,43712,43713,43714,43715,43739,43742,43744,43760,43762,43766,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823,43824,43867,43868,43880,43888,44011,44032,55204,55216,55239,55243,55292,63744,64110,64112,64218,64256,64263,64275,64280,64285,64297,64298,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64434,64467,64830,64848,64912,64914,64968,65008,65020,65136,65141,65142,65277,65313,65339,65345,65371,65382,65471,65474,65480,65482,65488,65490,65496,65498,65501,65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787,65856,65909,66176,66205,66208,66257,66304,66336,66349,66379,66384,66427,66432,66462,66464,66500,66504,66512,66513,66518,66560,66718,66736,66772,66776,66812,66816,66856,66864,66916,67072,67383,67392,67414,67424,67432,67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67670,67680,67703,67712,67743,67808,67827,67828,67830,67840,67862,67872,67898,67968,68024,68030,68032,68096,68100,68101,68103,68108,68116,68117,68120,68121,68150,68192,68221,68224,68253,68288,68296,68297,68325,68352,68406,68416,68438,68448,68467,68480,68498,68608,68681,68736,68787,68800,68851,68864,68904,69376,69405,69415,69416,69424,69446,69600,69623,69632,69702,69762,69817,69840,69865,69888,69939,69956,69959,69968,70003,70006,70007,70016,70080,70081,70085,70106,70107,70108,70109,70144,70162,70163,70197,70199,70200,70206,70207,70272,70279,70280,70281,70282,70286,70287,70302,70303,70313,70320,70377,70400,70404,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70461,70469,70471,70473,70475,70477,70480,70481,70487,70488,70493,70500,70656,70722,70723,70726,70727,70731,70751,70752,70784,70850,70852,70854,70855,70856,71040,71094,71096,71103,71128,71134,71168,71231,71232,71233,71236,71237,71296,71350,71352,71353,71424,71451,71453,71467,71680,71737,71840,71904,71935,71936,72096,72104,72106,72152,72154,72160,72161,72162,72163,72165,72192,72243,72245,72255,72272,72344,72349,72350,72384,72441,72704,72713,72714,72759,72760,72767,72768,72769,72818,72848,72850,72872,72873,72887,72960,72967,72968,72970,72971,73015,73018,73019,73020,73022,73023,73026,73027,73028,73030,73032,73056,73062,73063,73065,73066,73103,73104,73106,73107,73111,73112,73113,73440,73463,73728,74650,74752,74863,74880,75076,77824,78895,82944,83527,92160,92729,92736,92767,92880,92910,92928,92976,92992,92996,93027,93048,93053,93072,93760,93824,93952,94027,94031,94088,94095,94112,94176,94178,94179,94180,94208,100344,100352,101107,110592,110879,110928,110931,110948,110952,110960,111356,113664,113771,113776,113789,113792,113801,113808,113818,113822,113823,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120513,120514,120539,120540,120571,120572,120597,120598,120629,120630,120655,120656,120687,120688,120713,120714,120745,120746,120771,120772,120780,122880,122887,122888,122905,122907,122914,122915,122917,122918,122923,123136,123181,123191,123198,123214,123215,123584,123628,124928,125125,125184,125252,125255,125256,125259,125260,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,127280,127306,127312,127338,127344,127370,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102]);
property.set("Any", [0,1114112]);
property.set("Assigned", [0,888,890,896,900,907,908,909,910,930,931,1328,1329,1367,1369,1419,1421,1424,1425,1480,1488,1515,1519,1525,1536,1565,1566,1806,1807,1867,1869,1970,1984,2043,2045,2094,2096,2111,2112,2140,2142,2143,2144,2155,2208,2229,2230,2238,2259,2436,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2492,2501,2503,2505,2507,2511,2519,2520,2524,2526,2527,2532,2534,2559,2561,2564,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2620,2621,2622,2627,2631,2633,2635,2638,2641,2642,2649,2653,2654,2655,2662,2679,2689,2692,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2748,2758,2759,2762,2763,2766,2768,2769,2784,2788,2790,2802,2809,2816,2817,2820,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2876,2885,2887,2889,2891,2894,2902,2904,2908,2910,2911,2916,2918,2936,2946,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3006,3011,3014,3017,3018,3022,3024,3025,3031,3032,3046,3067,3072,3085,3086,3089,3090,3113,3114,3130,3133,3141,3142,3145,3146,3150,3157,3159,3160,3163,3168,3172,3174,3184,3191,3213,3214,3217,3218,3241,3242,3252,3253,3258,3260,3269,3270,3273,3274,3278,3285,3287,3294,3295,3296,3300,3302,3312,3313,3315,3328,3332,3333,3341,3342,3345,3346,3397,3398,3401,3402,3408,3412,3428,3430,3456,3458,3460,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3530,3531,3535,3541,3542,3543,3544,3552,3558,3568,3570,3573,3585,3643,3647,3676,3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3774,3776,3781,3782,3783,3784,3790,3792,3802,3804,3808,3840,3912,3913,3949,3953,3992,3993,4029,4030,4045,4046,4059,4096,4294,4295,4296,4301,4302,4304,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4957,4989,4992,5018,5024,5110,5112,5118,5120,5789,5792,5881,5888,5901,5902,5909,5920,5943,5952,5972,5984,5997,5998,6001,6002,6004,6016,6110,6112,6122,6128,6138,6144,6159,6160,6170,6176,6265,6272,6315,6320,6390,6400,6431,6432,6444,6448,6460,6464,6465,6468,6510,6512,6517,6528,6572,6576,6602,6608,6619,6622,6684,6686,6751,6752,6781,6783,6794,6800,6810,6816,6830,6832,6847,6912,6988,6992,7037,7040,7156,7164,7224,7227,7242,7245,7305,7312,7355,7357,7368,7376,7419,7424,7674,7675,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8133,8134,8148,8150,8156,8157,8176,8178,8181,8182,8191,8192,8293,8294,8306,8308,8335,8336,8349,8352,8384,8400,8433,8448,8588,8592,9255,9280,9291,9312,11124,11126,11158,11160,11311,11312,11359,11360,11508,11513,11558,11559,11560,11565,11566,11568,11624,11631,11633,11647,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,11744,11856,11904,11930,11931,12020,12032,12246,12272,12284,12288,12352,12353,12439,12441,12544,12549,12592,12593,12687,12688,12731,12736,12772,12784,12831,12832,13055,13056,19894,19904,40944,40960,42125,42128,42183,42192,42540,42560,42744,42752,42944,42946,42951,42999,43052,43056,43066,43072,43128,43136,43206,43214,43226,43232,43348,43359,43389,43392,43470,43471,43482,43486,43519,43520,43575,43584,43598,43600,43610,43612,43715,43739,43767,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823,43824,43880,43888,44014,44016,44026,44032,55204,55216,55239,55243,55292,55296,64110,64112,64218,64256,64263,64275,64280,64285,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64450,64467,64832,64848,64912,64914,64968,65008,65022,65024,65050,65056,65107,65108,65127,65128,65132,65136,65141,65142,65277,65279,65280,65281,65471,65474,65480,65482,65488,65490,65496,65498,65501,65504,65511,65512,65519,65529,65534,65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787,65792,65795,65799,65844,65847,65935,65936,65948,65952,65953,66000,66046,66176,66205,66208,66257,66272,66300,66304,66340,66349,66379,66384,66427,66432,66462,66463,66500,66504,66518,66560,66718,66720,66730,66736,66772,66776,66812,66816,66856,66864,66916,66927,66928,67072,67383,67392,67414,67424,67432,67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67670,67671,67743,67751,67760,67808,67827,67828,67830,67835,67868,67871,67898,67903,67904,67968,68024,68028,68048,68050,68100,68101,68103,68108,68116,68117,68120,68121,68150,68152,68155,68159,68169,68176,68185,68192,68256,68288,68327,68331,68343,68352,68406,68409,68438,68440,68467,68472,68498,68505,68509,68521,68528,68608,68681,68736,68787,68800,68851,68858,68904,68912,68922,69216,69247,69376,69416,69424,69466,69600,69623,69632,69710,69714,69744,69759,69826,69837,69838,69840,69865,69872,69882,69888,69941,69942,69959,69968,70007,70016,70094,70096,70112,70113,70133,70144,70162,70163,70207,70272,70279,70280,70281,70282,70286,70287,70302,70303,70314,70320,70379,70384,70394,70400,70404,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70459,70469,70471,70473,70475,70478,70480,70481,70487,70488,70493,70500,70502,70509,70512,70517,70656,70746,70747,70748,70749,70752,70784,70856,70864,70874,71040,71094,71096,71134,71168,71237,71248,71258,71264,71277,71296,71353,71360,71370,71424,71451,71453,71468,71472,71488,71680,71740,71840,71923,71935,71936,72096,72104,72106,72152,72154,72165,72192,72264,72272,72355,72384,72441,72704,72713,72714,72759,72760,72774,72784,72813,72816,72848,72850,72872,72873,72887,72960,72967,72968,72970,72971,73015,73018,73019,73020,73022,73023,73032,73040,73050,73056,73062,73063,73065,73066,73103,73104,73106,73107,73113,73120,73130,73440,73465,73664,73714,73727,74650,74752,74863,74864,74869,74880,75076,77824,78895,78896,78905,82944,83527,92160,92729,92736,92767,92768,92778,92782,92784,92880,92910,92912,92918,92928,92998,93008,93018,93019,93026,93027,93048,93053,93072,93760,93851,93952,94027,94031,94088,94095,94112,94176,94180,94208,100344,100352,101107,110592,110879,110928,110931,110948,110952,110960,111356,113664,113771,113776,113789,113792,113801,113808,113818,113820,113828,118784,119030,119040,119079,119081,119273,119296,119366,119520,119540,119552,119639,119648,119673,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120780,120782,121484,121499,121504,121505,121520,122880,122887,122888,122905,122907,122914,122915,122917,122918,122923,123136,123181,123184,123198,123200,123210,123214,123216,123584,123642,123647,123648,124928,125125,125127,125143,125184,125260,125264,125274,125278,125280,126065,126133,126209,126270,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,126704,126706,126976,127020,127024,127124,127136,127151,127153,127168,127169,127184,127185,127222,127232,127245,127248,127341,127344,127405,127462,127491,127504,127548,127552,127561,127568,127570,127584,127590,127744,128726,128736,128749,128752,128763,128768,128884,128896,128985,128992,129004,129024,129036,129040,129096,129104,129114,129120,129160,129168,129198,129280,129292,129293,129394,129395,129399,129402,129443,129445,129451,129454,129483,129485,129620,129632,129646,129648,129652,129656,129659,129664,129667,129680,129686,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102,917505,917506,917536,917632,917760,918000,983040,1048574,1048576,1114110]);
property.set("Bidi_Control", [1564,1565,8206,8208,8234,8239,8294,8298]);
property.set("Bidi_Mirrored", [40,42,60,61,62,63,91,92,93,94,123,124,125,126,171,172,187,188,3898,3902,5787,5789,8249,8251,8261,8263,8317,8319,8333,8335,8512,8513,8705,8709,8712,8718,8721,8722,8725,8727,8730,8734,8735,8739,8740,8741,8742,8743,8747,8756,8761,8762,8763,8781,8786,8790,8799,8801,8802,8803,8804,8812,8814,8845,8847,8851,8856,8857,8866,8868,8870,8889,8894,8896,8905,8910,8912,8914,8918,8942,8944,8960,8968,8972,8992,8994,9001,9003,10088,10102,10176,10177,10179,10183,10184,10186,10187,10190,10195,10199,10204,10207,10210,10224,10627,10649,10651,10657,10658,10672,10680,10681,10688,10694,10697,10698,10702,10707,10708,10710,10712,10717,10721,10722,10723,10726,10728,10730,10740,10746,10748,10750,10762,10781,10782,10786,10788,10789,10790,10791,10793,10794,10795,10799,10804,10806,10812,10815,10839,10841,10852,10854,10858,10862,10863,10865,10867,10869,10873,10916,10918,10926,10927,10967,10972,10973,10974,10975,10978,10983,10988,10991,10995,10996,10999,11004,11005,11006,11262,11263,11778,11782,11785,11787,11788,11790,11804,11806,11808,11818,12296,12306,12308,12316,65113,65119,65124,65126,65288,65290,65308,65309,65310,65311,65339,65340,65341,65342,65371,65372,65373,65374,65375,65377,65378,65380,120539,120540,120597,120598,120655,120656,120713,120714,120771,120772]);
property.set("Case_Ignorable", [39,40,46,47,58,59,94,95,96,97,168,169,173,174,175,176,180,181,183,185,688,880,884,886,890,891,900,902,903,904,1155,1162,1369,1370,1425,1470,1471,1472,1473,1475,1476,1478,1479,1480,1524,1525,1536,1542,1552,1563,1564,1565,1600,1601,1611,1632,1648,1649,1750,1758,1759,1769,1770,1774,1807,1808,1809,1810,1840,1867,1958,1969,2027,2038,2042,2043,2045,2046,2070,2094,2137,2140,2259,2307,2362,2363,2364,2365,2369,2377,2381,2382,2385,2392,2402,2404,2417,2418,2433,2434,2492,2493,2497,2501,2509,2510,2530,2532,2558,2559,2561,2563,2620,2621,2625,2627,2631,2633,2635,2638,2641,2642,2672,2674,2677,2678,2689,2691,2748,2749,2753,2758,2759,2761,2765,2766,2786,2788,2810,2816,2817,2818,2876,2877,2879,2880,2881,2885,2893,2894,2902,2903,2914,2916,2946,2947,3008,3009,3021,3022,3072,3073,3076,3077,3134,3137,3142,3145,3146,3150,3157,3159,3170,3172,3201,3202,3260,3261,3263,3264,3270,3271,3276,3278,3298,3300,3328,3330,3387,3389,3393,3397,3405,3406,3426,3428,3530,3531,3538,3541,3542,3543,3633,3634,3636,3643,3654,3663,3761,3762,3764,3773,3782,3783,3784,3790,3864,3866,3893,3894,3895,3896,3897,3898,3953,3967,3968,3973,3974,3976,3981,3992,3993,4029,4038,4039,4141,4145,4146,4152,4153,4155,4157,4159,4184,4186,4190,4193,4209,4213,4226,4227,4229,4231,4237,4238,4253,4254,4348,4349,4957,4960,5906,5909,5938,5941,5970,5972,6002,6004,6068,6070,6071,6078,6086,6087,6089,6100,6103,6104,6109,6110,6155,6159,6211,6212,6277,6279,6313,6314,6432,6435,6439,6441,6450,6451,6457,6460,6679,6681,6683,6684,6742,6743,6744,6751,6752,6753,6754,6755,6757,6765,6771,6781,6783,6784,6823,6824,6832,6847,6912,6916,6964,6965,6966,6971,6972,6973,6978,6979,7019,7028,7040,7042,7074,7078,7080,7082,7083,7086,7142,7143,7144,7146,7149,7150,7151,7154,7212,7220,7222,7224,7288,7294,7376,7379,7380,7393,7394,7401,7405,7406,7412,7413,7416,7418,7468,7531,7544,7545,7579,7674,7675,7680,8125,8126,8127,8130,8141,8144,8157,8160,8173,8176,8189,8191,8203,8208,8216,8218,8228,8229,8231,8232,8234,8239,8288,8293,8294,8304,8305,8306,8319,8320,8336,8349,8400,8433,11388,11390,11503,11506,11631,11632,11647,11648,11744,11776,11823,11824,12293,12294,12330,12334,12337,12342,12347,12348,12441,12447,12540,12543,40981,40982,42232,42238,42508,42509,42607,42611,42612,42622,42623,42624,42652,42656,42736,42738,42752,42786,42864,42865,42888,42891,43000,43002,43010,43011,43014,43015,43019,43020,43045,43047,43204,43206,43232,43250,43263,43264,43302,43310,43335,43346,43392,43395,43443,43444,43446,43450,43452,43454,43471,43472,43493,43495,43561,43567,43569,43571,43573,43575,43587,43588,43596,43597,43632,43633,43644,43645,43696,43697,43698,43701,43703,43705,43710,43712,43713,43714,43741,43742,43756,43758,43763,43765,43766,43767,43867,43872,44005,44006,44008,44009,44013,44014,64286,64287,64434,64450,65024,65040,65043,65044,65056,65072,65106,65107,65109,65110,65279,65280,65287,65288,65294,65295,65306,65307,65342,65343,65344,65345,65392,65393,65438,65440,65507,65508,65529,65532,66045,66046,66272,66273,66422,66427,68097,68100,68101,68103,68108,68112,68152,68155,68159,68160,68325,68327,68900,68904,69446,69457,69633,69634,69688,69703,69759,69762,69811,69815,69817,69819,69821,69822,69837,69838,69888,69891,69927,69932,69933,69941,70003,70004,70016,70018,70070,70079,70089,70093,70191,70194,70196,70197,70198,70200,70206,70207,70367,70368,70371,70379,70400,70402,70459,70461,70464,70465,70502,70509,70512,70517,70712,70720,70722,70725,70726,70727,70750,70751,70835,70841,70842,70843,70847,70849,70850,70852,71090,71094,71100,71102,71103,71105,71132,71134,71219,71227,71229,71230,71231,71233,71339,71340,71341,71342,71344,71350,71351,71352,71453,71456,71458,71462,71463,71468,71727,71736,71737,71739,72148,72152,72154,72156,72160,72161,72193,72203,72243,72249,72251,72255,72263,72264,72273,72279,72281,72284,72330,72343,72344,72346,72752,72759,72760,72766,72767,72768,72850,72872,72874,72881,72882,72884,72885,72887,73009,73015,73018,73019,73020,73022,73023,73030,73031,73032,73104,73106,73109,73110,73111,73112,73459,73461,78896,78905,92912,92917,92976,92983,92992,92996,94031,94032,94095,94112,94176,94178,94179,94180,113821,113823,113824,113828,119143,119146,119155,119171,119173,119180,119210,119214,119362,119365,121344,121399,121403,121453,121461,121462,121476,121477,121499,121504,121505,121520,122880,122887,122888,122905,122907,122914,122915,122917,122918,122923,123184,123198,123628,123632,125136,125143,125252,125260,127995,128000,917505,917506,917536,917632,917760,918000]);
property.set("Cased", [65,91,97,123,170,171,181,182,186,187,192,215,216,247,248,443,444,448,452,660,661,697,704,706,736,741,837,838,880,884,886,888,890,894,895,896,902,903,904,907,908,909,910,930,931,1014,1015,1154,1162,1328,1329,1367,1376,1417,4256,4294,4295,4296,4301,4302,4304,4347,4349,4352,5024,5110,5112,5118,7296,7305,7312,7355,7357,7360,7424,7616,7680,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8125,8126,8127,8130,8133,8134,8141,8144,8148,8150,8156,8160,8173,8178,8181,8182,8189,8305,8306,8319,8320,8336,8349,8450,8451,8455,8456,8458,8468,8469,8470,8473,8478,8484,8485,8486,8487,8488,8489,8490,8494,8495,8501,8505,8506,8508,8512,8517,8522,8526,8527,8544,8576,8579,8581,9398,9450,11264,11311,11312,11359,11360,11493,11499,11503,11506,11508,11520,11558,11559,11560,11565,11566,42560,42606,42624,42654,42786,42888,42891,42895,42896,42944,42946,42951,43000,43003,43824,43867,43868,43880,43888,43968,64256,64263,64275,64280,65313,65339,65345,65371,66560,66640,66736,66772,66776,66812,68736,68787,68800,68851,71840,71904,93760,93824,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120513,120514,120539,120540,120571,120572,120597,120598,120629,120630,120655,120656,120687,120688,120713,120714,120745,120746,120771,120772,120780,125184,125252,127280,127306,127312,127338,127344,127370]);
property.set("Changes_When_Casefolded", [65,91,181,182,192,215,216,224,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,378,379,380,381,382,383,384,385,387,388,389,390,392,393,396,398,402,403,405,406,409,412,414,415,417,418,419,420,421,422,424,425,426,428,429,430,432,433,436,437,438,439,441,444,445,452,454,455,457,458,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,497,499,500,501,502,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,570,572,573,575,577,578,579,583,584,585,586,587,588,589,590,591,837,838,880,881,882,883,886,887,895,896,902,903,904,907,908,909,910,912,913,930,931,940,962,963,975,978,981,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1010,1012,1014,1015,1016,1017,1019,1021,1072,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1329,1367,1415,1416,4256,4294,4295,4296,4301,4302,5112,5118,7296,7305,7312,7355,7357,7360,7680,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7834,7836,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7944,7952,7960,7966,7976,7984,7992,8000,8008,8014,8025,8026,8027,8028,8029,8030,8031,8032,8040,8048,8064,8112,8114,8117,8119,8125,8130,8133,8135,8141,8152,8156,8168,8173,8178,8181,8183,8189,8486,8487,8490,8492,8498,8499,8544,8560,8579,8580,9398,9424,11264,11311,11360,11361,11362,11365,11367,11368,11369,11370,11371,11372,11373,11377,11378,11379,11381,11382,11390,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11499,11500,11501,11502,11506,11507,42560,42561,42562,42563,42564,42565,42566,42567,42568,42569,42570,42571,42572,42573,42574,42575,42576,42577,42578,42579,42580,42581,42582,42583,42584,42585,42586,42587,42588,42589,42590,42591,42592,42593,42594,42595,42596,42597,42598,42599,42600,42601,42602,42603,42604,42605,42624,42625,42626,42627,42628,42629,42630,42631,42632,42633,42634,42635,42636,42637,42638,42639,42640,42641,42642,42643,42644,42645,42646,42647,42648,42649,42650,42651,42786,42787,42788,42789,42790,42791,42792,42793,42794,42795,42796,42797,42798,42799,42802,42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,42833,42834,42835,42836,42837,42838,42839,42840,42841,42842,42843,42844,42845,42846,42847,42848,42849,42850,42851,42852,42853,42854,42855,42856,42857,42858,42859,42860,42861,42862,42863,42873,42874,42875,42876,42877,42879,42880,42881,42882,42883,42884,42885,42886,42887,42891,42892,42893,42894,42896,42897,42898,42899,42902,42903,42904,42905,42906,42907,42908,42909,42910,42911,42912,42913,42914,42915,42916,42917,42918,42919,42920,42921,42922,42927,42928,42933,42934,42935,42936,42937,42938,42939,42940,42941,42942,42943,42946,42947,42948,42951,43888,43968,64256,64263,64275,64280,65313,65339,66560,66600,66736,66772,68736,68787,71840,71872,93760,93792,125184,125218]);
property.set("Changes_When_Casemapped", [65,91,97,123,181,182,192,215,216,247,248,312,313,397,398,411,412,426,428,442,444,446,447,448,452,545,546,564,570,597,598,600,601,602,603,605,608,610,611,612,613,615,616,621,623,624,625,627,629,630,637,638,640,641,642,644,647,653,658,659,669,671,837,838,880,884,886,888,891,894,895,896,902,903,904,907,908,909,910,930,931,978,981,1014,1015,1020,1021,1154,1162,1328,1329,1367,1377,1416,4256,4294,4295,4296,4301,4302,4304,4347,4349,4352,5024,5110,5112,5118,7296,7305,7312,7355,7357,7360,7545,7546,7549,7550,7566,7567,7680,7836,7838,7839,7840,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8125,8126,8127,8130,8133,8134,8141,8144,8148,8150,8156,8160,8173,8178,8181,8182,8189,8486,8487,8490,8492,8498,8499,8526,8527,8544,8576,8579,8581,9398,9450,11264,11311,11312,11359,11360,11377,11378,11380,11381,11383,11390,11492,11499,11503,11506,11508,11520,11558,11559,11560,11565,11566,42560,42606,42624,42652,42786,42800,42802,42864,42873,42888,42891,42894,42896,42901,42902,42927,42928,42944,42946,42951,43859,43860,43888,43968,64256,64263,64275,64280,65313,65339,65345,65371,66560,66640,66736,66772,66776,66812,68736,68787,68800,68851,71840,71904,93760,93824,125184,125252]);
property.set("Changes_When_Lowercased", [65,91,192,215,216,223,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,378,379,380,381,382,385,387,388,389,390,392,393,396,398,402,403,405,406,409,412,414,415,417,418,419,420,421,422,424,425,426,428,429,430,432,433,436,437,438,439,441,444,445,452,454,455,457,458,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,497,499,500,501,502,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,570,572,573,575,577,578,579,583,584,585,586,587,588,589,590,591,880,881,882,883,886,887,895,896,902,903,904,907,908,909,910,912,913,930,931,940,975,976,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1012,1013,1015,1016,1017,1019,1021,1072,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1329,1367,4256,4294,4295,4296,4301,4302,5024,5110,7312,7355,7357,7360,7680,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7944,7952,7960,7966,7976,7984,7992,8000,8008,8014,8025,8026,8027,8028,8029,8030,8031,8032,8040,8048,8072,8080,8088,8096,8104,8112,8120,8125,8136,8141,8152,8156,8168,8173,8184,8189,8486,8487,8490,8492,8498,8499,8544,8560,8579,8580,9398,9424,11264,11311,11360,11361,11362,11365,11367,11368,11369,11370,11371,11372,11373,11377,11378,11379,11381,11382,11390,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11499,11500,11501,11502,11506,11507,42560,42561,42562,42563,42564,42565,42566,42567,42568,42569,42570,42571,42572,42573,42574,42575,42576,42577,42578,42579,42580,42581,42582,42583,42584,42585,42586,42587,42588,42589,42590,42591,42592,42593,42594,42595,42596,42597,42598,42599,42600,42601,42602,42603,42604,42605,42624,42625,42626,42627,42628,42629,42630,42631,42632,42633,42634,42635,42636,42637,42638,42639,42640,42641,42642,42643,42644,42645,42646,42647,42648,42649,42650,42651,42786,42787,42788,42789,42790,42791,42792,42793,42794,42795,42796,42797,42798,42799,42802,42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,42833,42834,42835,42836,42837,42838,42839,42840,42841,42842,42843,42844,42845,42846,42847,42848,42849,42850,42851,42852,42853,42854,42855,42856,42857,42858,42859,42860,42861,42862,42863,42873,42874,42875,42876,42877,42879,42880,42881,42882,42883,42884,42885,42886,42887,42891,42892,42893,42894,42896,42897,42898,42899,42902,42903,42904,42905,42906,42907,42908,42909,42910,42911,42912,42913,42914,42915,42916,42917,42918,42919,42920,42921,42922,42927,42928,42933,42934,42935,42936,42937,42938,42939,42940,42941,42942,42943,42946,42947,42948,42951,65313,65339,66560,66600,66736,66772,68736,68787,71840,71872,93760,93792,125184,125218]);
property.set("Changes_When_NFKC_Casefolded", [65,91,160,161,168,169,170,171,173,174,175,176,178,182,184,187,188,191,192,215,216,224,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,309,310,311,313,314,315,316,317,318,319,322,323,324,325,326,327,328,329,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,378,379,380,381,382,383,384,385,387,388,389,390,392,393,396,398,402,403,405,406,409,412,414,415,417,418,419,420,421,422,424,425,426,428,429,430,432,433,436,437,438,439,441,444,445,452,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,497,501,502,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,570,572,573,575,577,578,579,583,584,585,586,587,588,589,590,591,688,697,728,734,736,741,832,834,835,838,847,848,880,881,882,883,884,885,886,887,890,891,894,896,900,907,908,909,910,912,913,930,931,940,962,963,975,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1011,1012,1014,1015,1016,1017,1019,1021,1072,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1329,1367,1415,1416,1564,1565,1653,1657,2392,2400,2524,2526,2527,2528,2611,2612,2614,2615,2649,2652,2654,2655,2908,2910,3635,3636,3763,3764,3804,3806,3852,3853,3907,3908,3917,3918,3922,3923,3927,3928,3932,3933,3945,3946,3955,3956,3957,3962,3969,3970,3987,3988,3997,3998,4002,4003,4007,4008,4012,4013,4025,4026,4256,4294,4295,4296,4301,4302,4348,4349,4447,4449,5112,5118,6068,6070,6155,6159,7296,7305,7312,7355,7357,7360,7468,7471,7472,7483,7484,7502,7503,7531,7544,7545,7579,7616,7680,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7834,7836,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7944,7952,7960,7966,7976,7984,7992,8000,8008,8014,8025,8026,8027,8028,8029,8030,8031,8032,8040,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8059,8060,8061,8062,8064,8112,8114,8117,8119,8133,8135,8144,8147,8148,8152,8156,8157,8160,8163,8164,8168,8176,8178,8181,8183,8191,8192,8208,8209,8210,8215,8216,8228,8231,8234,8240,8243,8245,8246,8248,8252,8253,8254,8255,8263,8266,8279,8280,8287,8306,8308,8335,8336,8349,8360,8361,8448,8452,8453,8456,8457,8468,8469,8471,8473,8478,8480,8483,8484,8485,8486,8487,8488,8489,8490,8494,8495,8506,8507,8513,8517,8522,8528,8576,8579,8580,8585,8586,8748,8750,8751,8753,9001,9003,9312,9451,10764,10765,10868,10871,10972,10973,11264,11311,11360,11361,11362,11365,11367,11368,11369,11370,11371,11372,11373,11377,11378,11379,11381,11382,11388,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11499,11500,11501,11502,11506,11507,11631,11632,11935,11936,12019,12020,12032,12246,12288,12289,12342,12343,12344,12347,12443,12445,12447,12448,12543,12544,12593,12687,12690,12704,12800,12831,12832,12872,12880,12927,12928,13055,13056,13312,42560,42561,42562,42563,42564,42565,42566,42567,42568,42569,42570,42571,42572,42573,42574,42575,42576,42577,42578,42579,42580,42581,42582,42583,42584,42585,42586,42587,42588,42589,42590,42591,42592,42593,42594,42595,42596,42597,42598,42599,42600,42601,42602,42603,42604,42605,42624,42625,42626,42627,42628,42629,42630,42631,42632,42633,42634,42635,42636,42637,42638,42639,42640,42641,42642,42643,42644,42645,42646,42647,42648,42649,42650,42651,42652,42654,42786,42787,42788,42789,42790,42791,42792,42793,42794,42795,42796,42797,42798,42799,42802,42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,42833,42834,42835,42836,42837,42838,42839,42840,42841,42842,42843,42844,42845,42846,42847,42848,42849,42850,42851,42852,42853,42854,42855,42856,42857,42858,42859,42860,42861,42862,42863,42864,42865,42873,42874,42875,42876,42877,42879,42880,42881,42882,42883,42884,42885,42886,42887,42891,42892,42893,42894,42896,42897,42898,42899,42902,42903,42904,42905,42906,42907,42908,42909,42910,42911,42912,42913,42914,42915,42916,42917,42918,42919,42920,42921,42922,42927,42928,42933,42934,42935,42936,42937,42938,42939,42940,42941,42942,42943,42946,42947,42948,42951,43000,43002,43868,43872,43888,43968,63744,64014,64016,64017,64018,64019,64021,64031,64032,64033,64034,64035,64037,64039,64042,64110,64112,64218,64256,64263,64275,64280,64285,64286,64287,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64434,64467,64830,64848,64912,64914,64968,65008,65021,65024,65050,65072,65093,65095,65107,65108,65127,65128,65132,65136,65139,65140,65141,65142,65277,65279,65280,65281,65471,65474,65480,65482,65488,65490,65496,65498,65501,65504,65511,65512,65519,65520,65529,66560,66600,66736,66772,68736,68787,71840,71872,93760,93792,113824,113828,119134,119141,119155,119163,119227,119233,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120780,120782,120832,125184,125218,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,127232,127243,127248,127279,127280,127312,127338,127341,127376,127377,127488,127491,127504,127548,127552,127561,127568,127570,194560,195102,917504,921600]);
property.set("Changes_When_Titlecased", [97,123,181,182,223,247,248,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,378,379,380,381,382,385,387,388,389,390,392,393,396,397,402,403,405,406,409,411,414,415,417,418,419,420,421,422,424,425,429,430,432,433,436,437,438,439,441,442,445,446,447,448,452,453,454,456,457,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,500,501,502,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,572,573,575,577,578,579,583,584,585,586,587,588,589,590,591,597,598,600,601,602,603,605,608,610,611,612,613,615,616,621,623,624,625,627,629,630,637,638,640,641,642,644,647,653,658,659,669,671,837,838,881,882,883,884,887,888,891,894,912,913,940,975,976,978,981,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1012,1013,1014,1016,1017,1019,1020,1072,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1377,1416,5112,5118,7296,7305,7545,7546,7549,7550,7566,7567,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7836,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7944,7952,7958,7968,7976,7984,7992,8000,8006,8016,8024,8032,8040,8048,8062,8064,8072,8080,8088,8096,8104,8112,8117,8118,8120,8126,8127,8130,8133,8134,8136,8144,8148,8150,8152,8160,8168,8178,8181,8182,8184,8526,8527,8560,8576,8580,8581,9424,9450,11312,11359,11361,11362,11365,11367,11368,11369,11370,11371,11372,11373,11379,11380,11382,11383,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11492,11500,11501,11502,11503,11507,11508,11520,11558,11559,11560,11565,11566,42561,42562,42563,42564,42565,42566,42567,42568,42569,42570,42571,42572,42573,42574,42575,42576,42577,42578,42579,42580,42581,42582,42583,42584,42585,42586,42587,42588,42589,42590,42591,42592,42593,42594,42595,42596,42597,42598,42599,42600,42601,42602,42603,42604,42605,42606,42625,42626,42627,42628,42629,42630,42631,42632,42633,42634,42635,42636,42637,42638,42639,42640,42641,42642,42643,42644,42645,42646,42647,42648,42649,42650,42651,42652,42787,42788,42789,42790,42791,42792,42793,42794,42795,42796,42797,42798,42799,42800,42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,42833,42834,42835,42836,42837,42838,42839,42840,42841,42842,42843,42844,42845,42846,42847,42848,42849,42850,42851,42852,42853,42854,42855,42856,42857,42858,42859,42860,42861,42862,42863,42864,42874,42875,42876,42877,42879,42880,42881,42882,42883,42884,42885,42886,42887,42888,42892,42893,42897,42898,42899,42901,42903,42904,42905,42906,42907,42908,42909,42910,42911,42912,42913,42914,42915,42916,42917,42918,42919,42920,42921,42922,42933,42934,42935,42936,42937,42938,42939,42940,42941,42942,42943,42944,42947,42948,43859,43860,43888,43968,64256,64263,64275,64280,65345,65371,66600,66640,66776,66812,68800,68851,71872,71904,93792,93824,125218,125252]);
property.set("Changes_When_Uppercased", [97,123,181,182,223,247,248,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,378,379,380,381,382,385,387,388,389,390,392,393,396,397,402,403,405,406,409,411,414,415,417,418,419,420,421,422,424,425,429,430,432,433,436,437,438,439,441,442,445,446,447,448,453,455,456,458,459,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,497,498,500,501,502,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,572,573,575,577,578,579,583,584,585,586,587,588,589,590,591,597,598,600,601,602,603,605,608,610,611,612,613,615,616,621,623,624,625,627,629,630,637,638,640,641,642,644,647,653,658,659,669,671,837,838,881,882,883,884,887,888,891,894,912,913,940,975,976,978,981,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1012,1013,1014,1016,1017,1019,1020,1072,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1377,1416,4304,4347,4349,4352,5112,5118,7296,7305,7545,7546,7549,7550,7566,7567,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7836,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7944,7952,7958,7968,7976,7984,7992,8000,8006,8016,8024,8032,8040,8048,8062,8064,8117,8118,8120,8124,8125,8126,8127,8130,8133,8134,8136,8140,8141,8144,8148,8150,8152,8160,8168,8178,8181,8182,8184,8188,8189,8526,8527,8560,8576,8580,8581,9424,9450,11312,11359,11361,11362,11365,11367,11368,11369,11370,11371,11372,11373,11379,11380,11382,11383,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11492,11500,11501,11502,11503,11507,11508,11520,11558,11559,11560,11565,11566,42561,42562,42563,42564,42565,42566,42567,42568,42569,42570,42571,42572,42573,42574,42575,42576,42577,42578,42579,42580,42581,42582,42583,42584,42585,42586,42587,42588,42589,42590,42591,42592,42593,42594,42595,42596,42597,42598,42599,42600,42601,42602,42603,42604,42605,42606,42625,42626,42627,42628,42629,42630,42631,42632,42633,42634,42635,42636,42637,42638,42639,42640,42641,42642,42643,42644,42645,42646,42647,42648,42649,42650,42651,42652,42787,42788,42789,42790,42791,42792,42793,42794,42795,42796,42797,42798,42799,42800,42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,42833,42834,42835,42836,42837,42838,42839,42840,42841,42842,42843,42844,42845,42846,42847,42848,42849,42850,42851,42852,42853,42854,42855,42856,42857,42858,42859,42860,42861,42862,42863,42864,42874,42875,42876,42877,42879,42880,42881,42882,42883,42884,42885,42886,42887,42888,42892,42893,42897,42898,42899,42901,42903,42904,42905,42906,42907,42908,42909,42910,42911,42912,42913,42914,42915,42916,42917,42918,42919,42920,42921,42922,42933,42934,42935,42936,42937,42938,42939,42940,42941,42942,42943,42944,42947,42948,43859,43860,43888,43968,64256,64263,64275,64280,65345,65371,66600,66640,66776,66812,68800,68851,71872,71904,93792,93824,125218,125252]);
property.set("Dash", [45,46,1418,1419,1470,1471,5120,5121,6150,6151,8208,8214,8275,8276,8315,8316,8331,8332,8722,8723,11799,11800,11802,11803,11834,11836,11840,11841,12316,12317,12336,12337,12448,12449,65073,65075,65112,65113,65123,65124,65293,65294]);
property.set("Default_Ignorable_Code_Point", [173,174,847,848,1564,1565,4447,4449,6068,6070,6155,6159,8203,8208,8234,8239,8288,8304,12644,12645,65024,65040,65279,65280,65440,65441,65520,65529,113824,113828,119155,119163,917504,921600]);
property.set("Deprecated", [329,330,1651,1652,3959,3960,3961,3962,6051,6053,8298,8304,9001,9003,917505,917506]);
property.set("Diacritic", [94,95,96,97,168,169,175,176,180,181,183,185,688,847,848,856,861,867,884,886,890,891,900,902,1155,1160,1369,1370,1425,1442,1443,1470,1471,1472,1473,1475,1476,1477,1611,1619,1623,1625,1759,1761,1765,1767,1770,1773,1840,1867,1958,1969,2027,2038,2072,2074,2275,2303,2364,2365,2381,2382,2385,2389,2417,2418,2492,2493,2509,2510,2620,2621,2637,2638,2748,2749,2765,2766,2813,2816,2876,2877,2893,2894,3021,3022,3149,3150,3260,3261,3277,3278,3387,3389,3405,3406,3530,3531,3655,3661,3662,3663,3770,3771,3784,3789,3864,3866,3893,3894,3895,3896,3897,3898,3902,3904,3970,3973,3974,3976,4038,4039,4151,4152,4153,4155,4195,4197,4201,4206,4231,4238,4239,4240,4250,4252,4957,4960,6089,6100,6109,6110,6457,6460,6773,6781,6783,6784,6832,6846,6964,6965,6980,6981,7019,7028,7082,7084,7222,7224,7288,7294,7376,7401,7405,7406,7412,7413,7415,7418,7468,7531,7620,7632,7669,7674,7677,7680,8125,8126,8127,8130,8141,8144,8157,8160,8173,8176,8189,8191,11503,11506,11823,11824,12330,12336,12441,12445,12540,12541,42607,42608,42620,42622,42623,42624,42652,42654,42736,42738,42752,42786,42888,42891,43000,43002,43204,43205,43232,43250,43307,43311,43347,43348,43443,43444,43456,43457,43493,43494,43643,43646,43711,43715,43766,43767,43867,43872,44012,44014,64286,64287,65056,65072,65342,65343,65344,65345,65392,65393,65438,65440,65507,65508,66272,66273,68325,68327,68898,68904,69446,69457,69817,69819,69939,69941,70003,70004,70080,70081,70090,70093,70197,70199,70377,70379,70460,70461,70477,70478,70502,70509,70512,70517,70722,70723,70726,70727,70850,70852,71103,71105,71231,71232,71350,71352,71467,71468,71737,71739,72160,72161,72244,72245,72263,72264,72345,72346,72767,72768,73026,73027,73028,73030,73111,73112,92912,92917,92976,92983,94095,94112,119143,119146,119149,119155,119163,119171,119173,119180,119210,119214,123184,123191,123628,123632,125136,125143,125252,125255,125256,125259]);
property.set("Emoji", [35,36,42,43,48,58,169,170,174,175,8252,8253,8265,8266,8482,8483,8505,8506,8596,8602,8617,8619,8986,8988,9000,9001,9167,9168,9193,9204,9208,9211,9410,9411,9642,9644,9654,9655,9664,9665,9723,9727,9728,9733,9742,9743,9745,9746,9748,9750,9752,9753,9757,9758,9760,9761,9762,9764,9766,9767,9770,9771,9774,9776,9784,9787,9792,9793,9794,9795,9800,9812,9823,9825,9827,9828,9829,9831,9832,9833,9851,9852,9854,9856,9874,9880,9881,9882,9883,9885,9888,9890,9898,9900,9904,9906,9917,9919,9924,9926,9928,9929,9934,9936,9937,9938,9939,9941,9961,9963,9968,9974,9975,9979,9981,9982,9986,9987,9989,9990,9992,9998,9999,10000,10002,10003,10004,10005,10006,10007,10013,10014,10017,10018,10024,10025,10035,10037,10052,10053,10055,10056,10060,10061,10062,10063,10067,10070,10071,10072,10083,10085,10133,10136,10145,10146,10160,10161,10175,10176,10548,10550,11013,11016,11035,11037,11088,11089,11093,11094,12336,12337,12349,12350,12951,12952,12953,12954,126980,126981,127183,127184,127344,127346,127358,127360,127374,127375,127377,127387,127462,127488,127489,127491,127514,127515,127535,127536,127538,127547,127568,127570,127744,127778,127780,127892,127894,127896,127897,127900,127902,127985,127987,127990,127991,128254,128255,128318,128329,128335,128336,128360,128367,128369,128371,128379,128391,128392,128394,128398,128400,128401,128405,128407,128420,128422,128424,128425,128433,128435,128444,128445,128450,128453,128465,128468,128476,128479,128481,128482,128483,128484,128488,128489,128495,128496,128499,128500,128506,128592,128640,128710,128715,128723,128725,128726,128736,128742,128745,128746,128747,128749,128752,128753,128755,128763,128992,129004,129293,129339,129340,129350,129351,129394,129395,129399,129402,129443,129445,129451,129454,129483,129485,129536,129648,129652,129656,129659,129664,129667,129680,129686]);
property.set("Emoji_Component", [35,36,42,43,48,58,8205,8206,8419,8420,65039,65040,127462,127488,127995,128000,129456,129460,917536,917632]);
property.set("Emoji_Modifier", [127995,128000]);
property.set("Emoji_Modifier_Base", [9757,9758,9977,9978,9994,9998,127877,127878,127938,127941,127943,127944,127946,127949,128066,128068,128070,128081,128102,128121,128124,128125,128129,128132,128133,128136,128143,128144,128145,128146,128170,128171,128372,128374,128378,128379,128400,128401,128405,128407,128581,128584,128587,128592,128675,128676,128692,128695,128704,128705,128716,128717,129295,129296,129304,129312,129318,129319,129328,129338,129340,129343,129461,129463,129464,129466,129467,129468,129485,129488,129489,129502]);
property.set("Emoji_Presentation", [8986,8988,9193,9197,9200,9201,9203,9204,9725,9727,9748,9750,9800,9812,9855,9856,9875,9876,9889,9890,9898,9900,9917,9919,9924,9926,9934,9935,9940,9941,9962,9963,9970,9972,9973,9974,9978,9979,9981,9982,9989,9990,9994,9996,10024,10025,10060,10061,10062,10063,10067,10070,10071,10072,10133,10136,10160,10161,10175,10176,11035,11037,11088,11089,11093,11094,126980,126981,127183,127184,127374,127375,127377,127387,127462,127488,127489,127490,127514,127515,127535,127536,127538,127543,127544,127547,127568,127570,127744,127777,127789,127798,127799,127869,127870,127892,127904,127947,127951,127956,127968,127985,127988,127989,127992,128063,128064,128065,128066,128253,128255,128318,128331,128335,128336,128360,128378,128379,128405,128407,128420,128421,128507,128592,128640,128710,128716,128717,128720,128723,128725,128726,128747,128749,128756,128763,128992,129004,129293,129339,129340,129350,129351,129394,129395,129399,129402,129443,129445,129451,129454,129483,129485,129536,129648,129652,129656,129659,129664,129667,129680,129686]);
property.set("Extended_Pictographic", [169,170,174,175,8252,8253,8265,8266,8482,8483,8505,8506,8596,8602,8617,8619,8986,8988,9000,9001,9096,9097,9167,9168,9193,9204,9208,9211,9410,9411,9642,9644,9654,9655,9664,9665,9723,9727,9728,9734,9735,9747,9748,9862,9872,9990,9992,10003,10004,10005,10006,10007,10013,10014,10017,10018,10024,10025,10035,10037,10052,10053,10055,10056,10060,10061,10062,10063,10067,10070,10071,10072,10083,10088,10133,10136,10145,10146,10160,10161,10175,10176,10548,10550,11013,11016,11035,11037,11088,11089,11093,11094,12336,12337,12349,12350,12951,12952,12953,12954,126976,127232,127245,127248,127279,127280,127340,127346,127358,127360,127374,127375,127377,127387,127405,127462,127489,127504,127514,127515,127535,127536,127538,127547,127548,127552,127561,127995,128000,128318,128326,128592,128640,128768,128884,128896,128981,129024,129036,129040,129096,129104,129114,129120,129160,129168,129198,129280,129292,129339,129340,129350,129351,131070]);
property.set("Extender", [183,184,720,722,1600,1601,2042,2043,3654,3655,3782,3783,6154,6155,6211,6212,6823,6824,7222,7223,7291,7292,12293,12294,12337,12342,12445,12447,12540,12543,40981,40982,42508,42509,43471,43472,43494,43495,43632,43633,43741,43742,43763,43765,65392,65393,70493,70494,71110,71113,72344,72345,92994,92996,94176,94178,94179,94180,123196,123198,125252,125255]);
property.set("Grapheme_Base", [32,127,160,173,174,768,880,888,890,896,900,907,908,909,910,930,931,1155,1162,1328,1329,1367,1369,1419,1421,1424,1470,1471,1472,1473,1475,1476,1478,1479,1488,1515,1519,1525,1542,1552,1563,1564,1566,1611,1632,1648,1649,1750,1758,1759,1765,1767,1769,1770,1774,1806,1808,1809,1810,1840,1869,1958,1969,1970,1984,2027,2036,2043,2046,2070,2074,2075,2084,2085,2088,2089,2096,2111,2112,2137,2142,2143,2144,2155,2208,2229,2230,2238,2307,2362,2363,2364,2365,2369,2377,2381,2382,2385,2392,2402,2404,2433,2434,2436,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2493,2494,2495,2497,2503,2505,2507,2509,2510,2511,2524,2526,2527,2530,2534,2558,2563,2564,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2622,2625,2649,2653,2654,2655,2662,2672,2674,2677,2678,2679,2691,2692,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2749,2753,2761,2762,2763,2765,2768,2769,2784,2786,2790,2802,2809,2810,2818,2820,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2877,2878,2880,2881,2887,2889,2891,2893,2908,2910,2911,2914,2918,2936,2947,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3007,3008,3009,3011,3014,3017,3018,3021,3024,3025,3046,3067,3073,3076,3077,3085,3086,3089,3090,3113,3114,3130,3133,3134,3137,3141,3160,3163,3168,3170,3174,3184,3191,3201,3202,3213,3214,3217,3218,3241,3242,3252,3253,3258,3261,3263,3264,3266,3267,3269,3271,3273,3274,3276,3294,3295,3296,3298,3302,3312,3313,3315,3330,3332,3333,3341,3342,3345,3346,3387,3389,3390,3391,3393,3398,3401,3402,3405,3406,3408,3412,3415,3416,3426,3430,3456,3458,3460,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3536,3538,3544,3551,3558,3568,3570,3573,3585,3633,3634,3636,3647,3655,3663,3676,3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3761,3762,3764,3773,3774,3776,3781,3782,3783,3792,3802,3804,3808,3840,3864,3866,3893,3894,3895,3896,3897,3898,3912,3913,3949,3967,3968,3973,3974,3976,3981,4030,4038,4039,4045,4046,4059,4096,4141,4145,4146,4152,4153,4155,4157,4159,4184,4186,4190,4193,4209,4213,4226,4227,4229,4231,4237,4238,4253,4254,4294,4295,4296,4301,4302,4304,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4960,4989,4992,5018,5024,5110,5112,5118,5120,5789,5792,5881,5888,5901,5902,5906,5920,5938,5941,5943,5952,5970,5984,5997,5998,6001,6016,6068,6070,6071,6078,6086,6087,6089,6100,6109,6112,6122,6128,6138,6144,6155,6160,6170,6176,6265,6272,6277,6279,6313,6314,6315,6320,6390,6400,6431,6435,6439,6441,6444,6448,6450,6451,6457,6464,6465,6468,6510,6512,6517,6528,6572,6576,6602,6608,6619,6622,6679,6681,6683,6686,6742,6743,6744,6753,6754,6755,6757,6765,6771,6784,6794,6800,6810,6816,6830,6916,6964,6971,6972,6973,6978,6979,6988,6992,7019,7028,7037,7042,7074,7078,7080,7082,7083,7086,7142,7143,7144,7146,7149,7150,7151,7154,7156,7164,7212,7220,7222,7227,7242,7245,7305,7312,7355,7357,7368,7379,7380,7393,7394,7401,7405,7406,7412,7413,7416,7418,7419,7424,7616,7680,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8133,8134,8148,8150,8156,8157,8176,8178,8181,8182,8191,8192,8203,8208,8232,8239,8288,8304,8306,8308,8335,8336,8349,8352,8384,8448,8588,8592,9255,9280,9291,9312,11124,11126,11158,11160,11311,11312,11359,11360,11503,11506,11508,11513,11558,11559,11560,11565,11566,11568,11624,11631,11633,11648,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,11776,11856,11904,11930,11931,12020,12032,12246,12272,12284,12288,12330,12336,12352,12353,12439,12443,12544,12549,12592,12593,12687,12688,12731,12736,12772,12784,12831,12832,13055,13056,19894,19904,40944,40960,42125,42128,42183,42192,42540,42560,42607,42611,42612,42622,42654,42656,42736,42738,42744,42752,42944,42946,42951,42999,43010,43011,43014,43015,43019,43020,43045,43047,43052,43056,43066,43072,43128,43136,43204,43214,43226,43250,43263,43264,43302,43310,43335,43346,43348,43359,43389,43395,43443,43444,43446,43450,43452,43454,43470,43471,43482,43486,43493,43494,43519,43520,43561,43567,43569,43571,43573,43584,43587,43588,43596,43597,43598,43600,43610,43612,43644,43645,43696,43697,43698,43701,43703,43705,43710,43712,43713,43714,43715,43739,43756,43758,43766,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823,43824,43880,43888,44005,44006,44008,44009,44013,44016,44026,44032,55204,55216,55239,55243,55292,63744,64110,64112,64218,64256,64263,64275,64280,64285,64286,64287,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64450,64467,64832,64848,64912,64914,64968,65008,65022,65040,65050,65072,65107,65108,65127,65128,65132,65136,65141,65142,65277,65281,65438,65440,65471,65474,65480,65482,65488,65490,65496,65498,65501,65504,65511,65512,65519,65532,65534,65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787,65792,65795,65799,65844,65847,65935,65936,65948,65952,65953,66000,66045,66176,66205,66208,66257,66273,66300,66304,66340,66349,66379,66384,66422,66432,66462,66463,66500,66504,66518,66560,66718,66720,66730,66736,66772,66776,66812,66816,66856,66864,66916,66927,66928,67072,67383,67392,67414,67424,67432,67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67670,67671,67743,67751,67760,67808,67827,67828,67830,67835,67868,67871,67898,67903,67904,67968,68024,68028,68048,68050,68097,68112,68116,68117,68120,68121,68150,68160,68169,68176,68185,68192,68256,68288,68325,68331,68343,68352,68406,68409,68438,68440,68467,68472,68498,68505,68509,68521,68528,68608,68681,68736,68787,68800,68851,68858,68900,68912,68922,69216,69247,69376,69416,69424,69446,69457,69466,69600,69623,69632,69633,69634,69688,69703,69710,69714,69744,69762,69811,69815,69817,69819,69821,69822,69826,69840,69865,69872,69882,69891,69927,69932,69933,69942,69959,69968,70003,70004,70007,70018,70070,70079,70089,70093,70094,70096,70112,70113,70133,70144,70162,70163,70191,70194,70196,70197,70198,70200,70206,70272,70279,70280,70281,70282,70286,70287,70302,70303,70314,70320,70367,70368,70371,70384,70394,70402,70404,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70461,70462,70463,70464,70465,70469,70471,70473,70475,70478,70480,70481,70493,70500,70656,70712,70720,70722,70725,70726,70727,70746,70747,70748,70749,70750,70751,70752,70784,70832,70833,70835,70841,70842,70843,70845,70846,70847,70849,70850,70852,70856,70864,70874,71040,71087,71088,71090,71096,71100,71102,71103,71105,71132,71168,71219,71227,71229,71230,71231,71233,71237,71248,71258,71264,71277,71296,71339,71340,71341,71342,71344,71350,71351,71352,71353,71360,71370,71424,71451,71456,71458,71462,71463,71472,71488,71680,71727,71736,71737,71739,71740,71840,71923,71935,71936,72096,72104,72106,72148,72156,72160,72161,72165,72192,72193,72203,72243,72249,72251,72255,72263,72272,72273,72279,72281,72284,72330,72343,72344,72346,72355,72384,72441,72704,72713,72714,72752,72766,72767,72768,72774,72784,72813,72816,72848,72873,72874,72881,72882,72884,72885,72960,72967,72968,72970,72971,73009,73030,73031,73040,73050,73056,73062,73063,73065,73066,73103,73107,73109,73110,73111,73112,73113,73120,73130,73440,73459,73461,73465,73664,73714,73727,74650,74752,74863,74864,74869,74880,75076,77824,78895,82944,83527,92160,92729,92736,92767,92768,92778,92782,92784,92880,92910,92917,92918,92928,92976,92983,92998,93008,93018,93019,93026,93027,93048,93053,93072,93760,93851,93952,94027,94032,94088,94099,94112,94176,94180,94208,100344,100352,101107,110592,110879,110928,110931,110948,110952,110960,111356,113664,113771,113776,113789,113792,113801,113808,113818,113820,113821,113823,113824,118784,119030,119040,119079,119081,119141,119142,119143,119146,119150,119171,119173,119180,119210,119214,119273,119296,119362,119365,119366,119520,119540,119552,119639,119648,119673,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120780,120782,121344,121399,121403,121453,121461,121462,121476,121477,121484,123136,123181,123191,123198,123200,123210,123214,123216,123584,123628,123632,123642,123647,123648,124928,125125,125127,125136,125184,125252,125259,125260,125264,125274,125278,125280,126065,126133,126209,126270,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,126704,126706,126976,127020,127024,127124,127136,127151,127153,127168,127169,127184,127185,127222,127232,127245,127248,127341,127344,127405,127462,127491,127504,127548,127552,127561,127568,127570,127584,127590,127744,128726,128736,128749,128752,128763,128768,128884,128896,128985,128992,129004,129024,129036,129040,129096,129104,129114,129120,129160,129168,129198,129280,129292,129293,129394,129395,129399,129402,129443,129445,129451,129454,129483,129485,129620,129632,129646,129648,129652,129656,129659,129664,129667,129680,129686,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102]);
property.set("Grapheme_Extend", [768,880,1155,1162,1425,1470,1471,1472,1473,1475,1476,1478,1479,1480,1552,1563,1611,1632,1648,1649,1750,1757,1759,1765,1767,1769,1770,1774,1809,1810,1840,1867,1958,1969,2027,2036,2045,2046,2070,2074,2075,2084,2085,2088,2089,2094,2137,2140,2259,2274,2275,2307,2362,2363,2364,2365,2369,2377,2381,2382,2385,2392,2402,2404,2433,2434,2492,2493,2494,2495,2497,2501,2509,2510,2519,2520,2530,2532,2558,2559,2561,2563,2620,2621,2625,2627,2631,2633,2635,2638,2641,2642,2672,2674,2677,2678,2689,2691,2748,2749,2753,2758,2759,2761,2765,2766,2786,2788,2810,2816,2817,2818,2876,2877,2878,2880,2881,2885,2893,2894,2902,2904,2914,2916,2946,2947,3006,3007,3008,3009,3021,3022,3031,3032,3072,3073,3076,3077,3134,3137,3142,3145,3146,3150,3157,3159,3170,3172,3201,3202,3260,3261,3263,3264,3266,3267,3270,3271,3276,3278,3285,3287,3298,3300,3328,3330,3387,3389,3390,3391,3393,3397,3405,3406,3415,3416,3426,3428,3530,3531,3535,3536,3538,3541,3542,3543,3551,3552,3633,3634,3636,3643,3655,3663,3761,3762,3764,3773,3784,3790,3864,3866,3893,3894,3895,3896,3897,3898,3953,3967,3968,3973,3974,3976,3981,3992,3993,4029,4038,4039,4141,4145,4146,4152,4153,4155,4157,4159,4184,4186,4190,4193,4209,4213,4226,4227,4229,4231,4237,4238,4253,4254,4957,4960,5906,5909,5938,5941,5970,5972,6002,6004,6068,6070,6071,6078,6086,6087,6089,6100,6109,6110,6155,6158,6277,6279,6313,6314,6432,6435,6439,6441,6450,6451,6457,6460,6679,6681,6683,6684,6742,6743,6744,6751,6752,6753,6754,6755,6757,6765,6771,6781,6783,6784,6832,6847,6912,6916,6964,6971,6972,6973,6978,6979,7019,7028,7040,7042,7074,7078,7080,7082,7083,7086,7142,7143,7144,7146,7149,7150,7151,7154,7212,7220,7222,7224,7376,7379,7380,7393,7394,7401,7405,7406,7412,7413,7416,7418,7616,7674,7675,7680,8204,8205,8400,8433,11503,11506,11647,11648,11744,11776,12330,12336,12441,12443,42607,42611,42612,42622,42654,42656,42736,42738,43010,43011,43014,43015,43019,43020,43045,43047,43204,43206,43232,43250,43263,43264,43302,43310,43335,43346,43392,43395,43443,43444,43446,43450,43452,43454,43493,43494,43561,43567,43569,43571,43573,43575,43587,43588,43596,43597,43644,43645,43696,43697,43698,43701,43703,43705,43710,43712,43713,43714,43756,43758,43766,43767,44005,44006,44008,44009,44013,44014,64286,64287,65024,65040,65056,65072,65438,65440,66045,66046,66272,66273,66422,66427,68097,68100,68101,68103,68108,68112,68152,68155,68159,68160,68325,68327,68900,68904,69446,69457,69633,69634,69688,69703,69759,69762,69811,69815,69817,69819,69888,69891,69927,69932,69933,69941,70003,70004,70016,70018,70070,70079,70089,70093,70191,70194,70196,70197,70198,70200,70206,70207,70367,70368,70371,70379,70400,70402,70459,70461,70462,70463,70464,70465,70487,70488,70502,70509,70512,70517,70712,70720,70722,70725,70726,70727,70750,70751,70832,70833,70835,70841,70842,70843,70845,70846,70847,70849,70850,70852,71087,71088,71090,71094,71100,71102,71103,71105,71132,71134,71219,71227,71229,71230,71231,71233,71339,71340,71341,71342,71344,71350,71351,71352,71453,71456,71458,71462,71463,71468,71727,71736,71737,71739,72148,72152,72154,72156,72160,72161,72193,72203,72243,72249,72251,72255,72263,72264,72273,72279,72281,72284,72330,72343,72344,72346,72752,72759,72760,72766,72767,72768,72850,72872,72874,72881,72882,72884,72885,72887,73009,73015,73018,73019,73020,73022,73023,73030,73031,73032,73104,73106,73109,73110,73111,73112,73459,73461,92912,92917,92976,92983,94031,94032,94095,94099,113821,113823,119141,119142,119143,119146,119150,119155,119163,119171,119173,119180,119210,119214,119362,119365,121344,121399,121403,121453,121461,121462,121476,121477,121499,121504,121505,121520,122880,122887,122888,122905,122907,122914,122915,122917,122918,122923,123184,123191,123628,123632,125136,125143,125252,125259,917536,917632,917760,918000]);
property.set("Hex_Digit", [48,58,65,71,97,103,65296,65306,65313,65319,65345,65351]);
property.set("IDS_Binary_Operator", [12272,12274,12276,12284]);
property.set("IDS_Trinary_Operator", [12274,12276]);
property.set("ID_Continue", [48,58,65,91,95,96,97,123,170,171,181,182,183,184,186,187,192,215,216,247,248,706,710,722,736,741,748,749,750,751,768,885,886,888,890,894,895,896,902,907,908,909,910,930,931,1014,1015,1154,1155,1160,1162,1328,1329,1367,1369,1370,1376,1417,1425,1470,1471,1472,1473,1475,1476,1478,1479,1480,1488,1515,1519,1523,1552,1563,1568,1642,1646,1748,1749,1757,1759,1769,1770,1789,1791,1792,1808,1867,1869,1970,1984,2038,2042,2043,2045,2046,2048,2094,2112,2140,2144,2155,2208,2229,2230,2238,2259,2274,2275,2404,2406,2416,2417,2436,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2492,2501,2503,2505,2507,2511,2519,2520,2524,2526,2527,2532,2534,2546,2556,2557,2558,2559,2561,2564,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2620,2621,2622,2627,2631,2633,2635,2638,2641,2642,2649,2653,2654,2655,2662,2678,2689,2692,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2748,2758,2759,2762,2763,2766,2768,2769,2784,2788,2790,2800,2809,2816,2817,2820,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2876,2885,2887,2889,2891,2894,2902,2904,2908,2910,2911,2916,2918,2928,2929,2930,2946,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3006,3011,3014,3017,3018,3022,3024,3025,3031,3032,3046,3056,3072,3085,3086,3089,3090,3113,3114,3130,3133,3141,3142,3145,3146,3150,3157,3159,3160,3163,3168,3172,3174,3184,3200,3204,3205,3213,3214,3217,3218,3241,3242,3252,3253,3258,3260,3269,3270,3273,3274,3278,3285,3287,3294,3295,3296,3300,3302,3312,3313,3315,3328,3332,3333,3341,3342,3345,3346,3397,3398,3401,3402,3407,3412,3416,3423,3428,3430,3440,3450,3456,3458,3460,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3530,3531,3535,3541,3542,3543,3544,3552,3558,3568,3570,3572,3585,3643,3648,3663,3664,3674,3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3774,3776,3781,3782,3783,3784,3790,3792,3802,3804,3808,3840,3841,3864,3866,3872,3882,3893,3894,3895,3896,3897,3898,3902,3912,3913,3949,3953,3973,3974,3992,3993,4029,4038,4039,4096,4170,4176,4254,4256,4294,4295,4296,4301,4302,4304,4347,4348,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4957,4960,4969,4978,4992,5008,5024,5110,5112,5118,5121,5741,5743,5760,5761,5787,5792,5867,5870,5881,5888,5901,5902,5909,5920,5941,5952,5972,5984,5997,5998,6001,6002,6004,6016,6100,6103,6104,6108,6110,6112,6122,6155,6158,6160,6170,6176,6265,6272,6315,6320,6390,6400,6431,6432,6444,6448,6460,6470,6510,6512,6517,6528,6572,6576,6602,6608,6619,6656,6684,6688,6751,6752,6781,6783,6794,6800,6810,6823,6824,6832,6846,6912,6988,6992,7002,7019,7028,7040,7156,7168,7224,7232,7242,7245,7294,7296,7305,7312,7355,7357,7360,7376,7379,7380,7419,7424,7674,7675,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8125,8126,8127,8130,8133,8134,8141,8144,8148,8150,8156,8160,8173,8178,8181,8182,8189,8255,8257,8276,8277,8305,8306,8319,8320,8336,8349,8400,8413,8417,8418,8421,8433,8450,8451,8455,8456,8458,8468,8469,8470,8472,8478,8484,8485,8486,8487,8488,8489,8490,8506,8508,8512,8517,8522,8526,8527,8544,8585,11264,11311,11312,11359,11360,11493,11499,11508,11520,11558,11559,11560,11565,11566,11568,11624,11631,11632,11647,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,11744,11776,12293,12296,12321,12336,12337,12342,12344,12349,12353,12439,12441,12448,12449,12539,12540,12544,12549,12592,12593,12687,12704,12731,12784,12800,13312,19894,19968,40944,40960,42125,42192,42238,42240,42509,42512,42540,42560,42608,42612,42622,42623,42738,42775,42784,42786,42889,42891,42944,42946,42951,42999,43048,43072,43124,43136,43206,43216,43226,43232,43256,43259,43260,43261,43310,43312,43348,43360,43389,43392,43457,43471,43482,43488,43519,43520,43575,43584,43598,43600,43610,43616,43639,43642,43715,43739,43742,43744,43760,43762,43767,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823,43824,43867,43868,43880,43888,44011,44012,44014,44016,44026,44032,55204,55216,55239,55243,55292,63744,64110,64112,64218,64256,64263,64275,64280,64285,64297,64298,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64434,64467,64830,64848,64912,64914,64968,65008,65020,65024,65040,65056,65072,65075,65077,65101,65104,65136,65141,65142,65277,65296,65306,65313,65339,65343,65344,65345,65371,65382,65471,65474,65480,65482,65488,65490,65496,65498,65501,65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787,65856,65909,66045,66046,66176,66205,66208,66257,66272,66273,66304,66336,66349,66379,66384,66427,66432,66462,66464,66500,66504,66512,66513,66518,66560,66718,66720,66730,66736,66772,66776,66812,66816,66856,66864,66916,67072,67383,67392,67414,67424,67432,67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67670,67680,67703,67712,67743,67808,67827,67828,67830,67840,67862,67872,67898,67968,68024,68030,68032,68096,68100,68101,68103,68108,68116,68117,68120,68121,68150,68152,68155,68159,68160,68192,68221,68224,68253,68288,68296,68297,68327,68352,68406,68416,68438,68448,68467,68480,68498,68608,68681,68736,68787,68800,68851,68864,68904,68912,68922,69376,69405,69415,69416,69424,69457,69600,69623,69632,69703,69734,69744,69759,69819,69840,69865,69872,69882,69888,69941,69942,69952,69956,69959,69968,70004,70006,70007,70016,70085,70089,70093,70096,70107,70108,70109,70144,70162,70163,70200,70206,70207,70272,70279,70280,70281,70282,70286,70287,70302,70303,70313,70320,70379,70384,70394,70400,70404,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70459,70469,70471,70473,70475,70478,70480,70481,70487,70488,70493,70500,70502,70509,70512,70517,70656,70731,70736,70746,70750,70752,70784,70854,70855,70856,70864,70874,71040,71094,71096,71105,71128,71134,71168,71233,71236,71237,71248,71258,71296,71353,71360,71370,71424,71451,71453,71468,71472,71482,71680,71739,71840,71914,71935,71936,72096,72104,72106,72152,72154,72162,72163,72165,72192,72255,72263,72264,72272,72346,72349,72350,72384,72441,72704,72713,72714,72759,72760,72769,72784,72794,72818,72848,72850,72872,72873,72887,72960,72967,72968,72970,72971,73015,73018,73019,73020,73022,73023,73032,73040,73050,73056,73062,73063,73065,73066,73103,73104,73106,73107,73113,73120,73130,73440,73463,73728,74650,74752,74863,74880,75076,77824,78895,82944,83527,92160,92729,92736,92767,92768,92778,92880,92910,92912,92917,92928,92983,92992,92996,93008,93018,93027,93048,93053,93072,93760,93824,93952,94027,94031,94088,94095,94112,94176,94178,94179,94180,94208,100344,100352,101107,110592,110879,110928,110931,110948,110952,110960,111356,113664,113771,113776,113789,113792,113801,113808,113818,113821,113823,119141,119146,119149,119155,119163,119171,119173,119180,119210,119214,119362,119365,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120513,120514,120539,120540,120571,120572,120597,120598,120629,120630,120655,120656,120687,120688,120713,120714,120745,120746,120771,120772,120780,120782,120832,121344,121399,121403,121453,121461,121462,121476,121477,121499,121504,121505,121520,122880,122887,122888,122905,122907,122914,122915,122917,122918,122923,123136,123181,123184,123198,123200,123210,123214,123215,123584,123642,124928,125125,125136,125143,125184,125260,125264,125274,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102,917760,918000]);
property.set("ID_Start", [65,91,97,123,170,171,181,182,186,187,192,215,216,247,248,706,710,722,736,741,748,749,750,751,880,885,886,888,890,894,895,896,902,903,904,907,908,909,910,930,931,1014,1015,1154,1162,1328,1329,1367,1369,1370,1376,1417,1488,1515,1519,1523,1568,1611,1646,1648,1649,1748,1749,1750,1765,1767,1774,1776,1786,1789,1791,1792,1808,1809,1810,1840,1869,1958,1969,1970,1994,2027,2036,2038,2042,2043,2048,2070,2074,2075,2084,2085,2088,2089,2112,2137,2144,2155,2208,2229,2230,2238,2308,2362,2365,2366,2384,2385,2392,2402,2417,2433,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2493,2494,2510,2511,2524,2526,2527,2530,2544,2546,2556,2557,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2649,2653,2654,2655,2674,2677,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2749,2750,2768,2769,2784,2786,2809,2810,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2877,2878,2908,2910,2911,2914,2929,2930,2947,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3024,3025,3077,3085,3086,3089,3090,3113,3114,3130,3133,3134,3160,3163,3168,3170,3200,3201,3205,3213,3214,3217,3218,3241,3242,3252,3253,3258,3261,3262,3294,3295,3296,3298,3313,3315,3333,3341,3342,3345,3346,3387,3389,3390,3406,3407,3412,3415,3423,3426,3450,3456,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3585,3633,3634,3636,3648,3655,3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3761,3762,3764,3773,3774,3776,3781,3782,3783,3804,3808,3840,3841,3904,3912,3913,3949,3976,3981,4096,4139,4159,4160,4176,4182,4186,4190,4193,4194,4197,4199,4206,4209,4213,4226,4238,4239,4256,4294,4295,4296,4301,4302,4304,4347,4348,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4992,5008,5024,5110,5112,5118,5121,5741,5743,5760,5761,5787,5792,5867,5870,5881,5888,5901,5902,5906,5920,5938,5952,5970,5984,5997,5998,6001,6016,6068,6103,6104,6108,6109,6176,6265,6272,6313,6314,6315,6320,6390,6400,6431,6480,6510,6512,6517,6528,6572,6576,6602,6656,6679,6688,6741,6823,6824,6917,6964,6981,6988,7043,7073,7086,7088,7098,7142,7168,7204,7245,7248,7258,7294,7296,7305,7312,7355,7357,7360,7401,7405,7406,7412,7413,7415,7418,7419,7424,7616,7680,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8125,8126,8127,8130,8133,8134,8141,8144,8148,8150,8156,8160,8173,8178,8181,8182,8189,8305,8306,8319,8320,8336,8349,8450,8451,8455,8456,8458,8468,8469,8470,8472,8478,8484,8485,8486,8487,8488,8489,8490,8506,8508,8512,8517,8522,8526,8527,8544,8585,11264,11311,11312,11359,11360,11493,11499,11503,11506,11508,11520,11558,11559,11560,11565,11566,11568,11624,11631,11632,11648,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,12293,12296,12321,12330,12337,12342,12344,12349,12353,12439,12443,12448,12449,12539,12540,12544,12549,12592,12593,12687,12704,12731,12784,12800,13312,19894,19968,40944,40960,42125,42192,42238,42240,42509,42512,42528,42538,42540,42560,42607,42623,42654,42656,42736,42775,42784,42786,42889,42891,42944,42946,42951,42999,43010,43011,43014,43015,43019,43020,43043,43072,43124,43138,43188,43250,43256,43259,43260,43261,43263,43274,43302,43312,43335,43360,43389,43396,43443,43471,43472,43488,43493,43494,43504,43514,43519,43520,43561,43584,43587,43588,43596,43616,43639,43642,43643,43646,43696,43697,43698,43701,43703,43705,43710,43712,43713,43714,43715,43739,43742,43744,43755,43762,43765,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823,43824,43867,43868,43880,43888,44003,44032,55204,55216,55239,55243,55292,63744,64110,64112,64218,64256,64263,64275,64280,64285,64286,64287,64297,64298,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64434,64467,64830,64848,64912,64914,64968,65008,65020,65136,65141,65142,65277,65313,65339,65345,65371,65382,65471,65474,65480,65482,65488,65490,65496,65498,65501,65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787,65856,65909,66176,66205,66208,66257,66304,66336,66349,66379,66384,66422,66432,66462,66464,66500,66504,66512,66513,66518,66560,66718,66736,66772,66776,66812,66816,66856,66864,66916,67072,67383,67392,67414,67424,67432,67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67670,67680,67703,67712,67743,67808,67827,67828,67830,67840,67862,67872,67898,67968,68024,68030,68032,68096,68097,68112,68116,68117,68120,68121,68150,68192,68221,68224,68253,68288,68296,68297,68325,68352,68406,68416,68438,68448,68467,68480,68498,68608,68681,68736,68787,68800,68851,68864,68900,69376,69405,69415,69416,69424,69446,69600,69623,69635,69688,69763,69808,69840,69865,69891,69927,69956,69957,69968,70003,70006,70007,70019,70067,70081,70085,70106,70107,70108,70109,70144,70162,70163,70188,70272,70279,70280,70281,70282,70286,70287,70302,70303,70313,70320,70367,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70461,70462,70480,70481,70493,70498,70656,70709,70727,70731,70751,70752,70784,70832,70852,70854,70855,70856,71040,71087,71128,71132,71168,71216,71236,71237,71296,71339,71352,71353,71424,71451,71680,71724,71840,71904,71935,71936,72096,72104,72106,72145,72161,72162,72163,72164,72192,72193,72203,72243,72250,72251,72272,72273,72284,72330,72349,72350,72384,72441,72704,72713,72714,72751,72768,72769,72818,72848,72960,72967,72968,72970,72971,73009,73030,73031,73056,73062,73063,73065,73066,73098,73112,73113,73440,73459,73728,74650,74752,74863,74880,75076,77824,78895,82944,83527,92160,92729,92736,92767,92880,92910,92928,92976,92992,92996,93027,93048,93053,93072,93760,93824,93952,94027,94032,94033,94099,94112,94176,94178,94179,94180,94208,100344,100352,101107,110592,110879,110928,110931,110948,110952,110960,111356,113664,113771,113776,113789,113792,113801,113808,113818,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120513,120514,120539,120540,120571,120572,120597,120598,120629,120630,120655,120656,120687,120688,120713,120714,120745,120746,120771,120772,120780,123136,123181,123191,123198,123214,123215,123584,123628,124928,125125,125184,125252,125259,125260,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102]);
property.set("Ideographic", [12294,12296,12321,12330,12344,12347,13312,19894,19968,40944,63744,64110,64112,64218,94208,100344,100352,101107,110960,111356,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102]);
property.set("Join_Control", [8204,8206]);
property.set("Logical_Order_Exception", [3648,3653,3776,3781,6581,6584,6586,6587,43701,43703,43705,43706,43707,43709]);
property.set("Lowercase", [97,123,170,171,181,182,186,187,223,247,248,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,378,379,380,381,382,385,387,388,389,390,392,393,396,398,402,403,405,406,409,412,414,415,417,418,419,420,421,422,424,425,426,428,429,430,432,433,436,437,438,439,441,443,445,448,454,455,457,458,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,497,499,500,501,502,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,570,572,573,575,577,578,579,583,584,585,586,587,588,589,590,591,660,661,697,704,706,736,741,837,838,881,882,883,884,887,888,890,894,912,913,940,975,976,978,981,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1012,1013,1014,1016,1017,1019,1021,1072,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1376,1417,4304,4347,4349,4352,5112,5118,7296,7305,7424,7616,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7944,7952,7958,7968,7976,7984,7992,8000,8006,8016,8024,8032,8040,8048,8062,8064,8072,8080,8088,8096,8104,8112,8117,8118,8120,8126,8127,8130,8133,8134,8136,8144,8148,8150,8152,8160,8168,8178,8181,8182,8184,8305,8306,8319,8320,8336,8349,8458,8459,8462,8464,8467,8468,8495,8496,8500,8501,8505,8506,8508,8510,8518,8522,8526,8527,8560,8576,8580,8581,9424,9450,11312,11359,11361,11362,11365,11367,11368,11369,11370,11371,11372,11373,11377,11378,11379,11381,11382,11390,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11493,11500,11501,11502,11503,11507,11508,11520,11558,11559,11560,11565,11566,42561,42562,42563,42564,42565,42566,42567,42568,42569,42570,42571,42572,42573,42574,42575,42576,42577,42578,42579,42580,42581,42582,42583,42584,42585,42586,42587,42588,42589,42590,42591,42592,42593,42594,42595,42596,42597,42598,42599,42600,42601,42602,42603,42604,42605,42606,42625,42626,42627,42628,42629,42630,42631,42632,42633,42634,42635,42636,42637,42638,42639,42640,42641,42642,42643,42644,42645,42646,42647,42648,42649,42650,42651,42654,42787,42788,42789,42790,42791,42792,42793,42794,42795,42796,42797,42798,42799,42802,42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,42833,42834,42835,42836,42837,42838,42839,42840,42841,42842,42843,42844,42845,42846,42847,42848,42849,42850,42851,42852,42853,42854,42855,42856,42857,42858,42859,42860,42861,42862,42863,42873,42874,42875,42876,42877,42879,42880,42881,42882,42883,42884,42885,42886,42887,42888,42892,42893,42894,42895,42897,42898,42899,42902,42903,42904,42905,42906,42907,42908,42909,42910,42911,42912,42913,42914,42915,42916,42917,42918,42919,42920,42921,42922,42927,42928,42933,42934,42935,42936,42937,42938,42939,42940,42941,42942,42943,42944,42947,42948,43000,43003,43824,43867,43868,43880,43888,43968,64256,64263,64275,64280,65345,65371,66600,66640,66776,66812,68800,68851,71872,71904,93792,93824,119834,119860,119886,119893,119894,119912,119938,119964,119990,119994,119995,119996,119997,120004,120005,120016,120042,120068,120094,120120,120146,120172,120198,120224,120250,120276,120302,120328,120354,120380,120406,120432,120458,120486,120514,120539,120540,120546,120572,120597,120598,120604,120630,120655,120656,120662,120688,120713,120714,120720,120746,120771,120772,120778,120779,120780,125218,125252]);
property.set("Math", [43,44,60,63,94,95,124,125,126,127,172,173,177,178,215,216,247,248,976,979,981,982,1008,1010,1012,1015,1542,1545,8214,8215,8242,8245,8256,8257,8260,8261,8274,8275,8289,8293,8314,8319,8330,8335,8400,8413,8417,8418,8421,8423,8427,8432,8450,8451,8455,8456,8458,8468,8469,8470,8472,8478,8484,8485,8488,8490,8492,8494,8495,8498,8499,8505,8508,8522,8523,8524,8592,8616,8617,8623,8624,8626,8630,8632,8636,8668,8669,8670,8676,8678,8692,8960,8968,8972,8992,8994,9084,9085,9115,9142,9143,9144,9168,9169,9180,9187,9632,9634,9646,9656,9660,9666,9670,9672,9674,9676,9679,9684,9698,9699,9700,9701,9703,9709,9720,9728,9733,9735,9792,9793,9794,9795,9824,9828,9837,9840,10176,10240,10496,11008,11056,11077,11079,11085,64297,64298,65121,65127,65128,65129,65291,65292,65308,65311,65340,65341,65342,65343,65372,65373,65374,65375,65506,65507,65513,65517,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120780,120782,120832,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,126704,126706]);
property.set("Noncharacter_Code_Point", [64976,65008,65534,65536,131070,131072,196606,196608,262142,262144,327678,327680,393214,393216,458750,458752,524286,524288,589822,589824,655358,655360,720894,720896,786430,786432,851966,851968,917502,917504,983038,983040,1048574,1048576,1114110,1114112]);
property.set("Pattern_Syntax", [33,48,58,65,91,95,96,97,123,127,161,168,169,170,171,173,174,175,176,178,182,183,187,188,191,192,215,216,247,248,8208,8232,8240,8255,8257,8276,8277,8287,8592,9312,9472,10102,10132,11264,11776,11904,12289,12292,12296,12321,12336,12337,64830,64832,65093,65095]);
property.set("Pattern_White_Space", [9,14,32,33,133,134,8206,8208,8232,8234]);
property.set("Quotation_Mark", [34,35,39,40,171,172,187,188,8216,8224,8249,8251,11842,11843,12300,12304,12317,12320,65089,65093,65282,65283,65287,65288,65378,65380]);
property.set("Radical", [11904,11930,11931,12020,12032,12246]);
property.set("Regional_Indicator", [127462,127488]);
property.set("Sentence_Terminal", [33,34,46,47,63,64,1417,1418,1566,1568,1748,1749,1792,1795,2041,2042,2103,2104,2105,2106,2109,2111,2404,2406,4170,4172,4962,4963,4967,4969,5742,5743,5941,5943,6147,6148,6153,6154,6468,6470,6824,6828,7002,7004,7006,7008,7227,7229,7294,7296,8252,8254,8263,8266,11822,11823,11836,11837,12290,12291,42239,42240,42510,42512,42739,42740,42743,42744,43126,43128,43214,43216,43311,43312,43464,43466,43613,43616,43760,43762,44011,44012,65106,65107,65110,65112,65281,65282,65294,65295,65311,65312,65377,65378,68182,68184,69461,69466,69703,69705,69822,69826,69953,69956,70085,70087,70093,70094,70110,70112,70200,70202,70203,70205,70313,70314,70731,70733,71106,71108,71113,71128,71233,71235,71484,71487,72258,72260,72347,72349,72769,72771,73463,73465,92782,92784,92917,92918,92983,92985,92996,92997,93848,93849,113823,113824,121480,121481]);
property.set("Soft_Dotted", [105,107,303,304,585,586,616,617,669,670,690,691,1011,1012,1110,1111,1112,1113,7522,7523,7574,7575,7588,7589,7592,7593,7725,7726,7883,7884,8305,8306,8520,8522,11388,11389,119842,119844,119894,119896,119946,119948,119998,120000,120050,120052,120102,120104,120154,120156,120206,120208,120258,120260,120310,120312,120362,120364,120414,120416,120466,120468]);
property.set("Terminal_Punctuation", [33,34,44,45,46,47,58,60,63,64,894,895,903,904,1417,1418,1475,1476,1548,1549,1563,1564,1566,1568,1748,1749,1792,1803,1804,1805,2040,2042,2096,2111,2142,2143,2404,2406,3674,3676,3848,3849,3853,3859,4170,4172,4961,4969,5742,5743,5867,5870,5941,5943,6100,6103,6106,6107,6146,6150,6152,6154,6468,6470,6824,6828,7002,7004,7005,7008,7227,7232,7294,7296,8252,8254,8263,8266,11822,11823,11836,11837,11841,11842,11852,11853,11854,11856,12289,12291,42238,42240,42509,42512,42739,42744,43126,43128,43214,43216,43311,43312,43463,43466,43613,43616,43743,43744,43760,43762,44011,44012,65104,65107,65108,65112,65281,65282,65292,65293,65294,65295,65306,65308,65311,65312,65377,65378,65380,65381,66463,66464,66512,66513,67671,67672,67871,67872,68182,68184,68336,68342,68410,68416,68505,68509,69461,69466,69703,69710,69822,69826,69953,69956,70085,70087,70093,70094,70110,70112,70200,70205,70313,70314,70731,70734,70747,70748,71106,71110,71113,71128,71233,71235,71484,71487,72258,72260,72347,72349,72353,72355,72769,72772,72817,72818,73463,73465,74864,74869,92782,92784,92917,92918,92983,92986,92996,92997,93847,93849,113823,113824,121479,121483]);
property.set("Unified_Ideograph", [13312,19894,19968,40944,64014,64016,64017,64018,64019,64021,64031,64032,64033,64034,64035,64037,64039,64042,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457]);
property.set("Uppercase", [65,91,192,215,216,223,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,378,379,380,381,382,385,387,388,389,390,392,393,396,398,402,403,405,406,409,412,414,415,417,418,419,420,421,422,424,425,426,428,429,430,432,433,436,437,438,439,441,444,445,452,453,455,456,458,459,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,497,498,500,501,502,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,570,572,573,575,577,578,579,583,584,585,586,587,588,589,590,591,880,881,882,883,886,887,895,896,902,903,904,907,908,909,910,912,913,930,931,940,975,976,978,981,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1012,1013,1015,1016,1017,1019,1021,1072,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1329,1367,4256,4294,4295,4296,4301,4302,5024,5110,7312,7355,7357,7360,7680,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7944,7952,7960,7966,7976,7984,7992,8000,8008,8014,8025,8026,8027,8028,8029,8030,8031,8032,8040,8048,8120,8124,8136,8140,8152,8156,8168,8173,8184,8188,8450,8451,8455,8456,8459,8462,8464,8467,8469,8470,8473,8478,8484,8485,8486,8487,8488,8489,8490,8494,8496,8500,8510,8512,8517,8518,8544,8560,8579,8580,9398,9424,11264,11311,11360,11361,11362,11365,11367,11368,11369,11370,11371,11372,11373,11377,11378,11379,11381,11382,11390,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11499,11500,11501,11502,11506,11507,42560,42561,42562,42563,42564,42565,42566,42567,42568,42569,42570,42571,42572,42573,42574,42575,42576,42577,42578,42579,42580,42581,42582,42583,42584,42585,42586,42587,42588,42589,42590,42591,42592,42593,42594,42595,42596,42597,42598,42599,42600,42601,42602,42603,42604,42605,42624,42625,42626,42627,42628,42629,42630,42631,42632,42633,42634,42635,42636,42637,42638,42639,42640,42641,42642,42643,42644,42645,42646,42647,42648,42649,42650,42651,42786,42787,42788,42789,42790,42791,42792,42793,42794,42795,42796,42797,42798,42799,42802,42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,42833,42834,42835,42836,42837,42838,42839,42840,42841,42842,42843,42844,42845,42846,42847,42848,42849,42850,42851,42852,42853,42854,42855,42856,42857,42858,42859,42860,42861,42862,42863,42873,42874,42875,42876,42877,42879,42880,42881,42882,42883,42884,42885,42886,42887,42891,42892,42893,42894,42896,42897,42898,42899,42902,42903,42904,42905,42906,42907,42908,42909,42910,42911,42912,42913,42914,42915,42916,42917,42918,42919,42920,42921,42922,42927,42928,42933,42934,42935,42936,42937,42938,42939,42940,42941,42942,42943,42946,42947,42948,42951,65313,65339,66560,66600,66736,66772,68736,68787,71840,71872,93760,93792,119808,119834,119860,119886,119912,119938,119964,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119990,120016,120042,120068,120070,120071,120075,120077,120085,120086,120093,120120,120122,120123,120127,120128,120133,120134,120135,120138,120145,120172,120198,120224,120250,120276,120302,120328,120354,120380,120406,120432,120458,120488,120513,120546,120571,120604,120629,120662,120687,120720,120745,120778,120779,125184,125218,127280,127306,127312,127338,127344,127370]);
property.set("Variation_Selector", [6155,6158,65024,65040,917760,918000]);
property.set("White_Space", [9,14,32,33,133,134,160,161,5760,5761,8192,8203,8232,8234,8239,8240,8287,8288,12288,12289]);
property.set("XID_Continue", [48,58,65,91,95,96,97,123,170,171,181,182,183,184,186,187,192,215,216,247,248,706,710,722,736,741,748,749,750,751,768,885,886,888,891,894,895,896,902,907,908,909,910,930,931,1014,1015,1154,1155,1160,1162,1328,1329,1367,1369,1370,1376,1417,1425,1470,1471,1472,1473,1475,1476,1478,1479,1480,1488,1515,1519,1523,1552,1563,1568,1642,1646,1748,1749,1757,1759,1769,1770,1789,1791,1792,1808,1867,1869,1970,1984,2038,2042,2043,2045,2046,2048,2094,2112,2140,2144,2155,2208,2229,2230,2238,2259,2274,2275,2404,2406,2416,2417,2436,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2492,2501,2503,2505,2507,2511,2519,2520,2524,2526,2527,2532,2534,2546,2556,2557,2558,2559,2561,2564,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2620,2621,2622,2627,2631,2633,2635,2638,2641,2642,2649,2653,2654,2655,2662,2678,2689,2692,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2748,2758,2759,2762,2763,2766,2768,2769,2784,2788,2790,2800,2809,2816,2817,2820,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2876,2885,2887,2889,2891,2894,2902,2904,2908,2910,2911,2916,2918,2928,2929,2930,2946,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3006,3011,3014,3017,3018,3022,3024,3025,3031,3032,3046,3056,3072,3085,3086,3089,3090,3113,3114,3130,3133,3141,3142,3145,3146,3150,3157,3159,3160,3163,3168,3172,3174,3184,3200,3204,3205,3213,3214,3217,3218,3241,3242,3252,3253,3258,3260,3269,3270,3273,3274,3278,3285,3287,3294,3295,3296,3300,3302,3312,3313,3315,3328,3332,3333,3341,3342,3345,3346,3397,3398,3401,3402,3407,3412,3416,3423,3428,3430,3440,3450,3456,3458,3460,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3530,3531,3535,3541,3542,3543,3544,3552,3558,3568,3570,3572,3585,3643,3648,3663,3664,3674,3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3774,3776,3781,3782,3783,3784,3790,3792,3802,3804,3808,3840,3841,3864,3866,3872,3882,3893,3894,3895,3896,3897,3898,3902,3912,3913,3949,3953,3973,3974,3992,3993,4029,4038,4039,4096,4170,4176,4254,4256,4294,4295,4296,4301,4302,4304,4347,4348,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4957,4960,4969,4978,4992,5008,5024,5110,5112,5118,5121,5741,5743,5760,5761,5787,5792,5867,5870,5881,5888,5901,5902,5909,5920,5941,5952,5972,5984,5997,5998,6001,6002,6004,6016,6100,6103,6104,6108,6110,6112,6122,6155,6158,6160,6170,6176,6265,6272,6315,6320,6390,6400,6431,6432,6444,6448,6460,6470,6510,6512,6517,6528,6572,6576,6602,6608,6619,6656,6684,6688,6751,6752,6781,6783,6794,6800,6810,6823,6824,6832,6846,6912,6988,6992,7002,7019,7028,7040,7156,7168,7224,7232,7242,7245,7294,7296,7305,7312,7355,7357,7360,7376,7379,7380,7419,7424,7674,7675,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8125,8126,8127,8130,8133,8134,8141,8144,8148,8150,8156,8160,8173,8178,8181,8182,8189,8255,8257,8276,8277,8305,8306,8319,8320,8336,8349,8400,8413,8417,8418,8421,8433,8450,8451,8455,8456,8458,8468,8469,8470,8472,8478,8484,8485,8486,8487,8488,8489,8490,8506,8508,8512,8517,8522,8526,8527,8544,8585,11264,11311,11312,11359,11360,11493,11499,11508,11520,11558,11559,11560,11565,11566,11568,11624,11631,11632,11647,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,11744,11776,12293,12296,12321,12336,12337,12342,12344,12349,12353,12439,12441,12443,12445,12448,12449,12539,12540,12544,12549,12592,12593,12687,12704,12731,12784,12800,13312,19894,19968,40944,40960,42125,42192,42238,42240,42509,42512,42540,42560,42608,42612,42622,42623,42738,42775,42784,42786,42889,42891,42944,42946,42951,42999,43048,43072,43124,43136,43206,43216,43226,43232,43256,43259,43260,43261,43310,43312,43348,43360,43389,43392,43457,43471,43482,43488,43519,43520,43575,43584,43598,43600,43610,43616,43639,43642,43715,43739,43742,43744,43760,43762,43767,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823,43824,43867,43868,43880,43888,44011,44012,44014,44016,44026,44032,55204,55216,55239,55243,55292,63744,64110,64112,64218,64256,64263,64275,64280,64285,64297,64298,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64434,64467,64606,64612,64830,64848,64912,64914,64968,65008,65018,65024,65040,65056,65072,65075,65077,65101,65104,65137,65138,65139,65140,65143,65144,65145,65146,65147,65148,65149,65150,65151,65277,65296,65306,65313,65339,65343,65344,65345,65371,65382,65471,65474,65480,65482,65488,65490,65496,65498,65501,65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787,65856,65909,66045,66046,66176,66205,66208,66257,66272,66273,66304,66336,66349,66379,66384,66427,66432,66462,66464,66500,66504,66512,66513,66518,66560,66718,66720,66730,66736,66772,66776,66812,66816,66856,66864,66916,67072,67383,67392,67414,67424,67432,67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67670,67680,67703,67712,67743,67808,67827,67828,67830,67840,67862,67872,67898,67968,68024,68030,68032,68096,68100,68101,68103,68108,68116,68117,68120,68121,68150,68152,68155,68159,68160,68192,68221,68224,68253,68288,68296,68297,68327,68352,68406,68416,68438,68448,68467,68480,68498,68608,68681,68736,68787,68800,68851,68864,68904,68912,68922,69376,69405,69415,69416,69424,69457,69600,69623,69632,69703,69734,69744,69759,69819,69840,69865,69872,69882,69888,69941,69942,69952,69956,69959,69968,70004,70006,70007,70016,70085,70089,70093,70096,70107,70108,70109,70144,70162,70163,70200,70206,70207,70272,70279,70280,70281,70282,70286,70287,70302,70303,70313,70320,70379,70384,70394,70400,70404,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70459,70469,70471,70473,70475,70478,70480,70481,70487,70488,70493,70500,70502,70509,70512,70517,70656,70731,70736,70746,70750,70752,70784,70854,70855,70856,70864,70874,71040,71094,71096,71105,71128,71134,71168,71233,71236,71237,71248,71258,71296,71353,71360,71370,71424,71451,71453,71468,71472,71482,71680,71739,71840,71914,71935,71936,72096,72104,72106,72152,72154,72162,72163,72165,72192,72255,72263,72264,72272,72346,72349,72350,72384,72441,72704,72713,72714,72759,72760,72769,72784,72794,72818,72848,72850,72872,72873,72887,72960,72967,72968,72970,72971,73015,73018,73019,73020,73022,73023,73032,73040,73050,73056,73062,73063,73065,73066,73103,73104,73106,73107,73113,73120,73130,73440,73463,73728,74650,74752,74863,74880,75076,77824,78895,82944,83527,92160,92729,92736,92767,92768,92778,92880,92910,92912,92917,92928,92983,92992,92996,93008,93018,93027,93048,93053,93072,93760,93824,93952,94027,94031,94088,94095,94112,94176,94178,94179,94180,94208,100344,100352,101107,110592,110879,110928,110931,110948,110952,110960,111356,113664,113771,113776,113789,113792,113801,113808,113818,113821,113823,119141,119146,119149,119155,119163,119171,119173,119180,119210,119214,119362,119365,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120513,120514,120539,120540,120571,120572,120597,120598,120629,120630,120655,120656,120687,120688,120713,120714,120745,120746,120771,120772,120780,120782,120832,121344,121399,121403,121453,121461,121462,121476,121477,121499,121504,121505,121520,122880,122887,122888,122905,122907,122914,122915,122917,122918,122923,123136,123181,123184,123198,123200,123210,123214,123215,123584,123642,124928,125125,125136,125143,125184,125260,125264,125274,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102,917760,918000]);
property.set("XID_Start", [65,91,97,123,170,171,181,182,186,187,192,215,216,247,248,706,710,722,736,741,748,749,750,751,880,885,886,888,891,894,895,896,902,903,904,907,908,909,910,930,931,1014,1015,1154,1162,1328,1329,1367,1369,1370,1376,1417,1488,1515,1519,1523,1568,1611,1646,1648,1649,1748,1749,1750,1765,1767,1774,1776,1786,1789,1791,1792,1808,1809,1810,1840,1869,1958,1969,1970,1994,2027,2036,2038,2042,2043,2048,2070,2074,2075,2084,2085,2088,2089,2112,2137,2144,2155,2208,2229,2230,2238,2308,2362,2365,2366,2384,2385,2392,2402,2417,2433,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2493,2494,2510,2511,2524,2526,2527,2530,2544,2546,2556,2557,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2649,2653,2654,2655,2674,2677,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2749,2750,2768,2769,2784,2786,2809,2810,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2877,2878,2908,2910,2911,2914,2929,2930,2947,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3024,3025,3077,3085,3086,3089,3090,3113,3114,3130,3133,3134,3160,3163,3168,3170,3200,3201,3205,3213,3214,3217,3218,3241,3242,3252,3253,3258,3261,3262,3294,3295,3296,3298,3313,3315,3333,3341,3342,3345,3346,3387,3389,3390,3406,3407,3412,3415,3423,3426,3450,3456,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3585,3633,3634,3635,3648,3655,3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3761,3762,3763,3773,3774,3776,3781,3782,3783,3804,3808,3840,3841,3904,3912,3913,3949,3976,3981,4096,4139,4159,4160,4176,4182,4186,4190,4193,4194,4197,4199,4206,4209,4213,4226,4238,4239,4256,4294,4295,4296,4301,4302,4304,4347,4348,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4992,5008,5024,5110,5112,5118,5121,5741,5743,5760,5761,5787,5792,5867,5870,5881,5888,5901,5902,5906,5920,5938,5952,5970,5984,5997,5998,6001,6016,6068,6103,6104,6108,6109,6176,6265,6272,6313,6314,6315,6320,6390,6400,6431,6480,6510,6512,6517,6528,6572,6576,6602,6656,6679,6688,6741,6823,6824,6917,6964,6981,6988,7043,7073,7086,7088,7098,7142,7168,7204,7245,7248,7258,7294,7296,7305,7312,7355,7357,7360,7401,7405,7406,7412,7413,7415,7418,7419,7424,7616,7680,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8125,8126,8127,8130,8133,8134,8141,8144,8148,8150,8156,8160,8173,8178,8181,8182,8189,8305,8306,8319,8320,8336,8349,8450,8451,8455,8456,8458,8468,8469,8470,8472,8478,8484,8485,8486,8487,8488,8489,8490,8506,8508,8512,8517,8522,8526,8527,8544,8585,11264,11311,11312,11359,11360,11493,11499,11503,11506,11508,11520,11558,11559,11560,11565,11566,11568,11624,11631,11632,11648,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,12293,12296,12321,12330,12337,12342,12344,12349,12353,12439,12445,12448,12449,12539,12540,12544,12549,12592,12593,12687,12704,12731,12784,12800,13312,19894,19968,40944,40960,42125,42192,42238,42240,42509,42512,42528,42538,42540,42560,42607,42623,42654,42656,42736,42775,42784,42786,42889,42891,42944,42946,42951,42999,43010,43011,43014,43015,43019,43020,43043,43072,43124,43138,43188,43250,43256,43259,43260,43261,43263,43274,43302,43312,43335,43360,43389,43396,43443,43471,43472,43488,43493,43494,43504,43514,43519,43520,43561,43584,43587,43588,43596,43616,43639,43642,43643,43646,43696,43697,43698,43701,43703,43705,43710,43712,43713,43714,43715,43739,43742,43744,43755,43762,43765,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823,43824,43867,43868,43880,43888,44003,44032,55204,55216,55239,55243,55292,63744,64110,64112,64218,64256,64263,64275,64280,64285,64286,64287,64297,64298,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64434,64467,64606,64612,64830,64848,64912,64914,64968,65008,65018,65137,65138,65139,65140,65143,65144,65145,65146,65147,65148,65149,65150,65151,65277,65313,65339,65345,65371,65382,65438,65440,65471,65474,65480,65482,65488,65490,65496,65498,65501,65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787,65856,65909,66176,66205,66208,66257,66304,66336,66349,66379,66384,66422,66432,66462,66464,66500,66504,66512,66513,66518,66560,66718,66736,66772,66776,66812,66816,66856,66864,66916,67072,67383,67392,67414,67424,67432,67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67670,67680,67703,67712,67743,67808,67827,67828,67830,67840,67862,67872,67898,67968,68024,68030,68032,68096,68097,68112,68116,68117,68120,68121,68150,68192,68221,68224,68253,68288,68296,68297,68325,68352,68406,68416,68438,68448,68467,68480,68498,68608,68681,68736,68787,68800,68851,68864,68900,69376,69405,69415,69416,69424,69446,69600,69623,69635,69688,69763,69808,69840,69865,69891,69927,69956,69957,69968,70003,70006,70007,70019,70067,70081,70085,70106,70107,70108,70109,70144,70162,70163,70188,70272,70279,70280,70281,70282,70286,70287,70302,70303,70313,70320,70367,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70461,70462,70480,70481,70493,70498,70656,70709,70727,70731,70751,70752,70784,70832,70852,70854,70855,70856,71040,71087,71128,71132,71168,71216,71236,71237,71296,71339,71352,71353,71424,71451,71680,71724,71840,71904,71935,71936,72096,72104,72106,72145,72161,72162,72163,72164,72192,72193,72203,72243,72250,72251,72272,72273,72284,72330,72349,72350,72384,72441,72704,72713,72714,72751,72768,72769,72818,72848,72960,72967,72968,72970,72971,73009,73030,73031,73056,73062,73063,73065,73066,73098,73112,73113,73440,73459,73728,74650,74752,74863,74880,75076,77824,78895,82944,83527,92160,92729,92736,92767,92880,92910,92928,92976,92992,92996,93027,93048,93053,93072,93760,93824,93952,94027,94032,94033,94099,94112,94176,94178,94179,94180,94208,100344,100352,101107,110592,110879,110928,110931,110948,110952,110960,111356,113664,113771,113776,113789,113792,113801,113808,113818,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120513,120514,120539,120540,120571,120572,120597,120598,120629,120630,120655,120656,120687,120688,120713,120714,120745,120746,120771,120772,120780,123136,123181,123191,123198,123214,123215,123584,123628,124928,125125,125184,125252,125259,125260,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102]);

const script = new Map();
const scriptExtensions = new Map();
script.set("Adlam", [125184,125260,125264,125274,125278,125280]);
scriptExtensions.set("Adlam", [1600,1601]);
script.set("Ahom", [71424,71451,71453,71468,71472,71488]);
scriptExtensions.set("Ahom", []);
script.set("Anatolian_Hieroglyphs", [82944,83527]);
scriptExtensions.set("Anatolian_Hieroglyphs", []);
script.set("Arabic", [1536,1541,1542,1548,1549,1563,1564,1565,1566,1567,1568,1600,1601,1611,1622,1648,1649,1757,1758,1792,1872,1920,2208,2229,2230,2238,2259,2274,2275,2304,64336,64450,64467,64830,64848,64912,64914,64968,65008,65022,65136,65141,65142,65277,69216,69247,126464,126468,126469,126496,126497,126499,126500,126501,126503,126504,126505,126515,126516,126520,126521,126522,126523,126524,126530,126531,126535,126536,126537,126538,126539,126540,126541,126544,126545,126547,126548,126549,126551,126552,126553,126554,126555,126556,126557,126558,126559,126560,126561,126563,126564,126565,126567,126571,126572,126579,126580,126584,126585,126589,126590,126591,126592,126602,126603,126620,126625,126628,126629,126634,126635,126652,126704,126706]);
scriptExtensions.set("Arabic", [1548,1549,1563,1564,1567,1568,1600,1601,1611,1622,1648,1649,66272,66300]);
script.set("Armenian", [1329,1367,1369,1417,1418,1419,1421,1424,64275,64280]);
scriptExtensions.set("Armenian", [1417,1418]);
script.set("Avestan", [68352,68406,68409,68416]);
scriptExtensions.set("Avestan", []);
script.set("Balinese", [6912,6988,6992,7037]);
scriptExtensions.set("Balinese", []);
script.set("Bamum", [42656,42744,92160,92729]);
scriptExtensions.set("Bamum", []);
script.set("Bassa_Vah", [92880,92910,92912,92918]);
scriptExtensions.set("Bassa_Vah", []);
script.set("Batak", [7104,7156,7164,7168]);
scriptExtensions.set("Batak", []);
script.set("Bengali", [2432,2436,2437,2445,2447,2449,2451,2473,2474,2481,2482,2483,2486,2490,2492,2501,2503,2505,2507,2511,2519,2520,2524,2526,2527,2532,2534,2559]);
scriptExtensions.set("Bengali", [2385,2387,2404,2406,7376,7377,7378,7379,7381,7383,7384,7385,7393,7394,7402,7403,7405,7406,7410,7411,7413,7416,43249,43250]);
script.set("Bhaiksuki", [72704,72713,72714,72759,72760,72774,72784,72813]);
scriptExtensions.set("Bhaiksuki", []);
script.set("Bopomofo", [746,748,12549,12592,12704,12731]);
scriptExtensions.set("Bopomofo", [12289,12292,12296,12306,12307,12320,12330,12334,12336,12337,12343,12344,12539,12540,65093,65095,65377,65382]);
script.set("Brahmi", [69632,69710,69714,69744,69759,69760]);
scriptExtensions.set("Brahmi", []);
script.set("Braille", [10240,10496]);
scriptExtensions.set("Braille", []);
script.set("Buginese", [6656,6684,6686,6688]);
scriptExtensions.set("Buginese", [43471,43472]);
script.set("Buhid", [5952,5972]);
scriptExtensions.set("Buhid", [5941,5943]);
script.set("Canadian_Aboriginal", [5120,5760,6320,6390]);
scriptExtensions.set("Canadian_Aboriginal", []);
script.set("Carian", [66208,66257]);
scriptExtensions.set("Carian", []);
script.set("Caucasian_Albanian", [66864,66916,66927,66928]);
scriptExtensions.set("Caucasian_Albanian", []);
script.set("Chakma", [69888,69941,69942,69959]);
scriptExtensions.set("Chakma", [2534,2544,4160,4170]);
script.set("Cham", [43520,43575,43584,43598,43600,43610,43612,43616]);
scriptExtensions.set("Cham", []);
script.set("Cherokee", [5024,5110,5112,5118,43888,43968]);
scriptExtensions.set("Cherokee", []);
script.set("Common", [0,65,91,97,123,170,171,186,187,192,215,216,247,248,697,736,741,746,748,768,884,885,894,895,901,902,903,904,1417,1418,1541,1542,1548,1549,1563,1564,1567,1568,1600,1601,1757,1758,2274,2275,2404,2406,3647,3648,4053,4057,4347,4348,5867,5870,5941,5943,6146,6148,6149,6150,7379,7380,7393,7394,7401,7405,7406,7412,7413,7416,7418,7419,8192,8204,8206,8293,8294,8305,8308,8319,8320,8335,8352,8384,8448,8486,8487,8490,8492,8498,8499,8526,8527,8544,8585,8588,8592,9255,9280,9291,9312,10240,10496,11124,11126,11158,11160,11264,11776,11856,12272,12284,12288,12293,12294,12295,12296,12321,12336,12344,12348,12352,12443,12445,12448,12449,12539,12541,12688,12704,12736,12772,12832,12896,12927,13008,13144,13312,19904,19968,42752,42786,42888,42891,43056,43066,43310,43311,43471,43472,43867,43868,64830,64832,65040,65050,65072,65107,65108,65127,65128,65132,65279,65280,65281,65313,65339,65345,65371,65382,65392,65393,65438,65440,65504,65511,65512,65519,65529,65534,65792,65795,65799,65844,65847,65856,65936,65948,66000,66045,66273,66300,94178,94180,113824,113828,118784,119030,119040,119079,119081,119143,119146,119163,119171,119173,119180,119210,119214,119273,119520,119540,119552,119639,119648,119673,119808,119893,119894,119965,119966,119968,119970,119971,119973,119975,119977,119981,119982,119994,119995,119996,119997,120004,120005,120070,120071,120075,120077,120085,120086,120093,120094,120122,120123,120127,120128,120133,120134,120135,120138,120145,120146,120486,120488,120780,120782,120832,126065,126133,126209,126270,126976,127020,127024,127124,127136,127151,127153,127168,127169,127184,127185,127222,127232,127245,127248,127341,127344,127405,127462,127488,127489,127491,127504,127548,127552,127561,127568,127570,127584,127590,127744,128726,128736,128749,128752,128763,128768,128884,128896,128985,128992,129004,129024,129036,129040,129096,129104,129114,129120,129160,129168,129198,129280,129292,129293,129394,129395,129399,129402,129443,129445,129451,129454,129483,129485,129620,129632,129646,129648,129652,129656,129659,129664,129667,129680,129686,917505,917506,917536,917632]);
scriptExtensions.set("Common", []);
script.set("Coptic", [994,1008,11392,11508,11513,11520]);
scriptExtensions.set("Coptic", [66272,66300]);
script.set("Cuneiform", [73728,74650,74752,74863,74864,74869,74880,75076]);
scriptExtensions.set("Cuneiform", []);
script.set("Cypriot", [67584,67590,67592,67593,67594,67638,67639,67641,67644,67645,67647,67648]);
scriptExtensions.set("Cypriot", [65792,65795,65799,65844,65847,65856]);
script.set("Cyrillic", [1024,1157,1159,1328,7296,7305,7467,7468,7544,7545,11744,11776,42560,42656,65070,65072]);
scriptExtensions.set("Cyrillic", [1157,1159,11843,11844]);
script.set("Deseret", [66560,66640]);
scriptExtensions.set("Deseret", []);
script.set("Devanagari", [2304,2385,2389,2404,2406,2432,43232,43264]);
scriptExtensions.set("Devanagari", [2385,2387,2404,2406,7376,7415,7416,7418,8432,8433,43056,43066]);
script.set("Dogra", [71680,71740]);
scriptExtensions.set("Dogra", [2404,2416,43056,43066]);
script.set("Duployan", [113664,113771,113776,113789,113792,113801,113808,113818,113820,113824]);
scriptExtensions.set("Duployan", [113824,113828]);
script.set("Egyptian_Hieroglyphs", [77824,78895,78896,78905]);
scriptExtensions.set("Egyptian_Hieroglyphs", []);
script.set("Elbasan", [66816,66856]);
scriptExtensions.set("Elbasan", []);
script.set("Ethiopic", [4608,4681,4682,4686,4688,4695,4696,4697,4698,4702,4704,4745,4746,4750,4752,4785,4786,4790,4792,4799,4800,4801,4802,4806,4808,4823,4824,4881,4882,4886,4888,4955,4957,4989,4992,5018,11648,11671,11680,11687,11688,11695,11696,11703,11704,11711,11712,11719,11720,11727,11728,11735,11736,11743,43777,43783,43785,43791,43793,43799,43808,43815,43816,43823]);
scriptExtensions.set("Ethiopic", []);
script.set("Georgian", [4256,4294,4295,4296,4301,4302,4304,4347,4348,4352,7312,7355,7357,7360,11520,11558,11559,11560,11565,11566]);
scriptExtensions.set("Georgian", [1417,1418,4347,4348]);
script.set("Glagolitic", [11264,11311,11312,11359,122880,122887,122888,122905,122907,122914,122915,122917,122918,122923]);
scriptExtensions.set("Glagolitic", [1156,1157,1159,1160,11843,11844,42607,42608]);
script.set("Gothic", [66352,66379]);
scriptExtensions.set("Gothic", []);
script.set("Grantha", [70400,70404,70405,70413,70415,70417,70419,70441,70442,70449,70450,70452,70453,70458,70460,70469,70471,70473,70475,70478,70480,70481,70487,70488,70493,70500,70502,70509,70512,70517]);
scriptExtensions.set("Grantha", [2385,2387,2404,2406,3046,3060,7376,7377,7378,7380,7410,7413,7416,7418,8432,8433,70459,70460,73680,73682,73683,73684]);
script.set("Greek", [880,884,885,888,890,894,895,896,900,901,902,903,904,907,908,909,910,930,931,994,1008,1024,7462,7467,7517,7522,7526,7531,7615,7616,7936,7958,7960,7966,7968,8006,8008,8014,8016,8024,8025,8026,8027,8028,8029,8030,8031,8062,8064,8117,8118,8133,8134,8148,8150,8156,8157,8176,8178,8181,8182,8191,8486,8487,43877,43878,65856,65935,65952,65953,119296,119366]);
scriptExtensions.set("Greek", [834,835,837,838,7616,7618]);
script.set("Gujarati", [2689,2692,2693,2702,2703,2706,2707,2729,2730,2737,2738,2740,2741,2746,2748,2758,2759,2762,2763,2766,2768,2769,2784,2788,2790,2802,2809,2816]);
scriptExtensions.set("Gujarati", [2385,2387,2404,2406,43056,43066]);
script.set("Gunjala_Gondi", [73056,73062,73063,73065,73066,73103,73104,73106,73107,73113,73120,73130]);
scriptExtensions.set("Gunjala_Gondi", [2404,2406]);
script.set("Gurmukhi", [2561,2564,2565,2571,2575,2577,2579,2601,2602,2609,2610,2612,2613,2615,2616,2618,2620,2621,2622,2627,2631,2633,2635,2638,2641,2642,2649,2653,2654,2655,2662,2679]);
scriptExtensions.set("Gurmukhi", [2385,2387,2404,2406,43056,43066]);
script.set("Han", [11904,11930,11931,12020,12032,12246,12293,12294,12295,12296,12321,12330,12344,12348,13312,19894,19968,40944,63744,64110,64112,64218,131072,173783,173824,177973,177984,178206,178208,183970,183984,191457,194560,195102]);
scriptExtensions.set("Han", [12289,12292,12294,12295,12296,12306,12307,12320,12330,12334,12336,12337,12343,12344,12348,12352,12539,12540,12688,12704,12736,12772,12832,12872,12928,12977,12992,13004,13144,13169,13179,13184,13280,13311,65093,65095,65377,65382,119648,119666,127568,127570]);
script.set("Hangul", [4352,4608,12334,12336,12593,12687,12800,12831,12896,12927,43360,43389,44032,55204,55216,55239,55243,55292,65440,65471,65474,65480,65482,65488,65490,65496,65498,65501]);
scriptExtensions.set("Hangul", [12289,12292,12296,12306,12307,12320,12336,12337,12343,12344,12539,12540,65093,65095,65377,65382]);
script.set("Hanifi_Rohingya", [68864,68904,68912,68922]);
scriptExtensions.set("Hanifi_Rohingya", [1548,1549,1563,1564,1567,1568,1600,1601,1748,1749]);
script.set("Hanunoo", [5920,5941]);
scriptExtensions.set("Hanunoo", [5941,5943]);
script.set("Hatran", [67808,67827,67828,67830,67835,67840]);
scriptExtensions.set("Hatran", []);
script.set("Hebrew", [1425,1480,1488,1515,1519,1525,64285,64311,64312,64317,64318,64319,64320,64322,64323,64325,64326,64336]);
scriptExtensions.set("Hebrew", []);
script.set("Hiragana", [12353,12439,12445,12448,110593,110879,110928,110931,127488,127489]);
scriptExtensions.set("Hiragana", [12289,12292,12296,12306,12307,12320,12336,12342,12343,12344,12348,12350,12441,12445,12448,12449,12539,12541,65093,65095,65377,65382,65392,65393,65438,65440]);
script.set("Imperial_Aramaic", [67648,67670,67671,67680]);
scriptExtensions.set("Imperial_Aramaic", []);
script.set("Inherited", [768,880,1157,1159,1611,1622,1648,1649,2385,2389,6832,6847,7376,7379,7380,7393,7394,7401,7405,7406,7412,7413,7416,7418,7616,7674,7675,7680,8204,8206,8400,8433,12330,12334,12441,12443,65024,65040,65056,65070,66045,66046,66272,66273,70459,70460,119143,119146,119163,119171,119173,119180,119210,119214,917760,918000]);
scriptExtensions.set("Inherited", []);
script.set("Inscriptional_Pahlavi", [68448,68467,68472,68480]);
scriptExtensions.set("Inscriptional_Pahlavi", []);
script.set("Inscriptional_Parthian", [68416,68438,68440,68448]);
scriptExtensions.set("Inscriptional_Parthian", []);
script.set("Javanese", [43392,43470,43472,43482,43486,43488]);
scriptExtensions.set("Javanese", [43471,43472]);
script.set("Kaithi", [69760,69826,69837,69838]);
scriptExtensions.set("Kaithi", [2406,2416,43056,43066]);
script.set("Kannada", [3200,3213,3214,3217,3218,3241,3242,3252,3253,3258,3260,3269,3270,3273,3274,3278,3285,3287,3294,3295,3296,3300,3302,3312,3313,3315]);
scriptExtensions.set("Kannada", [2385,2387,2404,2406,7376,7377,7378,7379,7386,7387,7410,7411,7412,7413,43056,43062]);
script.set("Katakana", [12449,12539,12541,12544,12784,12800,13008,13055,13056,13144,65382,65392,65393,65438,110592,110593,110948,110952]);
scriptExtensions.set("Katakana", [12289,12292,12296,12306,12307,12320,12336,12342,12343,12344,12348,12350,12441,12445,12448,12449,12539,12541,65093,65095,65377,65382,65392,65393,65438,65440]);
script.set("Kayah_Li", [43264,43310,43311,43312]);
scriptExtensions.set("Kayah_Li", [43310,43311]);
script.set("Kharoshthi", [68096,68100,68101,68103,68108,68116,68117,68120,68121,68150,68152,68155,68159,68169,68176,68185]);
scriptExtensions.set("Kharoshthi", []);
script.set("Khmer", [6016,6110,6112,6122,6128,6138,6624,6656]);
scriptExtensions.set("Khmer", []);
script.set("Khojki", [70144,70162,70163,70207]);
scriptExtensions.set("Khojki", [2790,2800,43056,43066]);
script.set("Khudawadi", [70320,70379,70384,70394]);
scriptExtensions.set("Khudawadi", [2404,2406,43056,43066]);
script.set("Lao", [3713,3715,3716,3717,3718,3723,3724,3748,3749,3750,3751,3774,3776,3781,3782,3783,3784,3790,3792,3802,3804,3808]);
scriptExtensions.set("Lao", []);
script.set("Latin", [65,91,97,123,170,171,186,187,192,215,216,247,248,697,736,741,7424,7462,7468,7517,7522,7526,7531,7544,7545,7615,7680,7936,8305,8306,8319,8320,8336,8349,8490,8492,8498,8499,8526,8527,8544,8585,11360,11392,42786,42888,42891,42944,42946,42951,42999,43008,43824,43867,43868,43877,43878,43880,64256,64263,65313,65339,65345,65371]);
scriptExtensions.set("Latin", [867,880,1157,1159,2385,2387,4347,4348,8239,8240,8432,8433,43310,43311]);
script.set("Lepcha", [7168,7224,7227,7242,7245,7248]);
scriptExtensions.set("Lepcha", []);
script.set("Limbu", [6400,6431,6432,6444,6448,6460,6464,6465,6468,6480]);
scriptExtensions.set("Limbu", [2405,2406]);
script.set("Linear_A", [67072,67383,67392,67414,67424,67432]);
scriptExtensions.set("Linear_A", [65799,65844]);
script.set("Linear_B", [65536,65548,65549,65575,65576,65595,65596,65598,65599,65614,65616,65630,65664,65787]);
scriptExtensions.set("Linear_B", [65792,65795,65799,65844,65847,65856]);
script.set("Lisu", [42192,42240]);
scriptExtensions.set("Lisu", []);
script.set("Lycian", [66176,66205]);
scriptExtensions.set("Lycian", []);
script.set("Lydian", [67872,67898,67903,67904]);
scriptExtensions.set("Lydian", []);
script.set("Mahajani", [69968,70007]);
scriptExtensions.set("Mahajani", [2404,2416,43056,43066]);
script.set("Makasar", [73440,73465]);
scriptExtensions.set("Makasar", []);
script.set("Malayalam", [3328,3332,3333,3341,3342,3345,3346,3397,3398,3401,3402,3408,3412,3428,3430,3456]);
scriptExtensions.set("Malayalam", [2385,2387,2404,2406,7386,7387,43056,43059]);
script.set("Mandaic", [2112,2140,2142,2143]);
scriptExtensions.set("Mandaic", [1600,1601]);
script.set("Manichaean", [68288,68327,68331,68343]);
scriptExtensions.set("Manichaean", [1600,1601]);
script.set("Marchen", [72816,72848,72850,72872,72873,72887]);
scriptExtensions.set("Marchen", []);
script.set("Medefaidrin", [93760,93851]);
scriptExtensions.set("Medefaidrin", []);
script.set("Masaram_Gondi", [72960,72967,72968,72970,72971,73015,73018,73019,73020,73022,73023,73032,73040,73050]);
scriptExtensions.set("Masaram_Gondi", [2404,2406]);
script.set("Meetei_Mayek", [43744,43767,43968,44014,44016,44026]);
scriptExtensions.set("Meetei_Mayek", []);
script.set("Mende_Kikakui", [124928,125125,125127,125143]);
scriptExtensions.set("Mende_Kikakui", []);
script.set("Meroitic_Cursive", [68000,68024,68028,68048,68050,68096]);
scriptExtensions.set("Meroitic_Cursive", []);
script.set("Meroitic_Hieroglyphs", [67968,68000]);
scriptExtensions.set("Meroitic_Hieroglyphs", []);
script.set("Miao", [93952,94027,94031,94088,94095,94112]);
scriptExtensions.set("Miao", []);
script.set("Modi", [71168,71237,71248,71258]);
scriptExtensions.set("Modi", [43056,43066]);
script.set("Mongolian", [6144,6146,6148,6149,6150,6159,6160,6170,6176,6265,6272,6315,71264,71277]);
scriptExtensions.set("Mongolian", [6146,6148,6149,6150,8239,8240]);
script.set("Mro", [92736,92767,92768,92778,92782,92784]);
scriptExtensions.set("Mro", []);
script.set("Multani", [70272,70279,70280,70281,70282,70286,70287,70302,70303,70314]);
scriptExtensions.set("Multani", [2662,2672]);
script.set("Myanmar", [4096,4256,43488,43519,43616,43648]);
scriptExtensions.set("Myanmar", [43310,43311]);
script.set("Nabataean", [67712,67743,67751,67760]);
scriptExtensions.set("Nabataean", []);
script.set("New_Tai_Lue", [6528,6572,6576,6602,6608,6619,6622,6624]);
scriptExtensions.set("New_Tai_Lue", []);
script.set("Newa", [70656,70746,70747,70748,70749,70752]);
scriptExtensions.set("Newa", []);
script.set("Nko", [1984,2043,2045,2048]);
scriptExtensions.set("Nko", []);
script.set("Nushu", [94177,94178,110960,111356]);
scriptExtensions.set("Nushu", []);
script.set("Ogham", [5760,5789]);
scriptExtensions.set("Ogham", []);
script.set("Ol_Chiki", [7248,7296]);
scriptExtensions.set("Ol_Chiki", []);
script.set("Old_Hungarian", [68736,68787,68800,68851,68858,68864]);
scriptExtensions.set("Old_Hungarian", []);
script.set("Old_Italic", [66304,66340,66349,66352]);
scriptExtensions.set("Old_Italic", []);
script.set("Old_North_Arabian", [68224,68256]);
scriptExtensions.set("Old_North_Arabian", []);
script.set("Old_Permic", [66384,66427]);
scriptExtensions.set("Old_Permic", [1155,1156]);
script.set("Old_Persian", [66464,66500,66504,66518]);
scriptExtensions.set("Old_Persian", []);
script.set("Old_Sogdian", [69376,69416]);
scriptExtensions.set("Old_Sogdian", []);
script.set("Old_South_Arabian", [68192,68224]);
scriptExtensions.set("Old_South_Arabian", []);
script.set("Old_Turkic", [68608,68681]);
scriptExtensions.set("Old_Turkic", []);
script.set("Oriya", [2817,2820,2821,2829,2831,2833,2835,2857,2858,2865,2866,2868,2869,2874,2876,2885,2887,2889,2891,2894,2902,2904,2908,2910,2911,2916,2918,2936]);
scriptExtensions.set("Oriya", [2385,2387,2404,2406,7386,7387,7410,7411]);
script.set("Osage", [66736,66772,66776,66812]);
scriptExtensions.set("Osage", []);
script.set("Osmanya", [66688,66718,66720,66730]);
scriptExtensions.set("Osmanya", []);
script.set("Pahawh_Hmong", [92928,92998,93008,93018,93019,93026,93027,93048,93053,93072]);
scriptExtensions.set("Pahawh_Hmong", []);
script.set("Palmyrene", [67680,67712]);
scriptExtensions.set("Palmyrene", []);
script.set("Pau_Cin_Hau", [72384,72441]);
scriptExtensions.set("Pau_Cin_Hau", []);
script.set("Phags_Pa", [43072,43128]);
scriptExtensions.set("Phags_Pa", [6146,6148,6149,6150]);
script.set("Phoenician", [67840,67868,67871,67872]);
scriptExtensions.set("Phoenician", []);
script.set("Psalter_Pahlavi", [68480,68498,68505,68509,68521,68528]);
scriptExtensions.set("Psalter_Pahlavi", [1600,1601]);
script.set("Rejang", [43312,43348,43359,43360]);
scriptExtensions.set("Rejang", []);
script.set("Runic", [5792,5867,5870,5881]);
scriptExtensions.set("Runic", []);
script.set("Samaritan", [2048,2094,2096,2111]);
scriptExtensions.set("Samaritan", []);
script.set("Saurashtra", [43136,43206,43214,43226]);
scriptExtensions.set("Saurashtra", []);
script.set("Sharada", [70016,70094,70096,70112]);
scriptExtensions.set("Sharada", [2385,2386,7383,7384,7385,7386,7388,7390,7392,7393]);
script.set("Shavian", [66640,66688]);
scriptExtensions.set("Shavian", []);
script.set("Siddham", [71040,71094,71096,71134]);
scriptExtensions.set("Siddham", []);
script.set("SignWriting", [120832,121484,121499,121504,121505,121520]);
scriptExtensions.set("SignWriting", []);
script.set("Sinhala", [3458,3460,3461,3479,3482,3506,3507,3516,3517,3518,3520,3527,3530,3531,3535,3541,3542,3543,3544,3552,3558,3568,3570,3573,70113,70133]);
scriptExtensions.set("Sinhala", [2404,2406]);
script.set("Sogdian", [69424,69466]);
scriptExtensions.set("Sogdian", [1600,1601]);
script.set("Sora_Sompeng", [69840,69865,69872,69882]);
scriptExtensions.set("Sora_Sompeng", []);
script.set("Soyombo", [72272,72355]);
scriptExtensions.set("Soyombo", []);
script.set("Sundanese", [7040,7104,7360,7368]);
scriptExtensions.set("Sundanese", []);
script.set("Syloti_Nagri", [43008,43052]);
scriptExtensions.set("Syloti_Nagri", [2404,2406,2534,2544]);
script.set("Syriac", [1792,1806,1807,1867,1869,1872,2144,2155]);
scriptExtensions.set("Syriac", [1548,1549,1563,1565,1567,1568,1600,1601,1611,1622,1648,1649]);
script.set("Tagalog", [5888,5901,5902,5909]);
scriptExtensions.set("Tagalog", [5941,5943]);
script.set("Tagbanwa", [5984,5997,5998,6001,6002,6004]);
scriptExtensions.set("Tagbanwa", [5941,5943]);
script.set("Tai_Le", [6480,6510,6512,6517]);
scriptExtensions.set("Tai_Le", [4160,4170]);
script.set("Tai_Tham", [6688,6751,6752,6781,6783,6794,6800,6810,6816,6830]);
scriptExtensions.set("Tai_Tham", []);
script.set("Tai_Viet", [43648,43715,43739,43744]);
scriptExtensions.set("Tai_Viet", []);
script.set("Takri", [71296,71353,71360,71370]);
scriptExtensions.set("Takri", [2404,2406,43056,43066]);
script.set("Tamil", [2946,2948,2949,2955,2958,2961,2962,2966,2969,2971,2972,2973,2974,2976,2979,2981,2984,2987,2990,3002,3006,3011,3014,3017,3018,3022,3024,3025,3031,3032,3046,3067,73664,73714,73727,73728]);
scriptExtensions.set("Tamil", [2385,2387,2404,2406,7386,7387,43251,43252,70401,70402,70403,70404,70459,70461]);
script.set("Tangut", [94176,94177,94208,100344,100352,101107]);
scriptExtensions.set("Tangut", []);
script.set("Telugu", [3072,3085,3086,3089,3090,3113,3114,3130,3133,3141,3142,3145,3146,3150,3157,3159,3160,3163,3168,3172,3174,3184,3191,3200]);
scriptExtensions.set("Telugu", [2385,2387,2404,2406,7386,7387,7410,7411]);
script.set("Thaana", [1920,1970]);
scriptExtensions.set("Thaana", [1548,1549,1563,1565,1567,1568,1632,1642,65010,65011,65021,65022]);
script.set("Thai", [3585,3643,3648,3676]);
scriptExtensions.set("Thai", []);
script.set("Tibetan", [3840,3912,3913,3949,3953,3992,3993,4029,4030,4045,4046,4053,4057,4059]);
scriptExtensions.set("Tibetan", []);
script.set("Tifinagh", [11568,11624,11631,11633,11647,11648]);
scriptExtensions.set("Tifinagh", []);
script.set("Tirhuta", [70784,70856,70864,70874]);
scriptExtensions.set("Tirhuta", [2385,2387,2404,2406,7410,7411,43056,43066]);
script.set("Ugaritic", [66432,66462,66463,66464]);
scriptExtensions.set("Ugaritic", []);
script.set("Vai", [42240,42540]);
scriptExtensions.set("Vai", []);
script.set("Warang_Citi", [71840,71923,71935,71936]);
scriptExtensions.set("Warang_Citi", []);
script.set("Yi", [40960,42125,42128,42183]);
scriptExtensions.set("Yi", [12289,12291,12296,12306,12308,12316,12539,12540,65377,65382]);
script.set("Zanabazar_Square", [72192,72264]);
scriptExtensions.set("Zanabazar_Square", []);

// See https://www.ecma-international.org/ecma-262/10.0/index.html#sec-characterclassescape.

/** A `CharSet` which contains ASCII digits. */
const digit = new CharSet();
digit.add(0x30, 0x39 + 1); // 0..9

/** A `CharSet` which does not contain ASCII digits. */
const invertDigit = digit.clone().invert();

/** A `CharSet` which contains ASCII word characters. */
const word = new CharSet();
word.add(0x30, 0x39 + 1); // 0..9
word.add(0x41, 0x5a + 1); // A..Z
word.add(0x61, 0x7a + 1); // a..z
word.add(0x5f, 0x5f + 1); // _

/** A `CharSet` which does not contain ASCII word characters. */
const invertWord = word.clone().invert();

/**
 * A `CharSet` which contains Unicode word characters.
 *
 * See https://www.ecma-international.org/ecma-262/10.0/index.html#sec-runtime-semantics-wordcharacters-abstract-operation.
 */
const unicodeWord = word.clone();
for (const c of extraWordCharacters) {
  unicodeWord.add(c, c + 1);
}

/** A `CharSet` which does not contain Unicode word characters. */
const invertUnicodeWord = unicodeWord.clone().invert();

/**
 * A `CharSet` which contains space characters.
 *
 * See https://www.ecma-international.org/ecma-262/10.0/index.html#prod-WhiteSpace
 * and https://www.ecma-international.org/ecma-262/10.0/index.html#prod-LineTerminator.
 */
// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
const space = new CharSet(category.get('Space_Separator'));
space.add(0x09, 0x0d + 1); // <TAB>, <LF>, <VT>, <FF>, <CR>
space.add(0xa0, 0xa0 + 1); // <NBSP>
space.add(0xfeff, 0xfeff + 1); // <ZWNBSP>

/** A `CharSet` which does not contain space characters. */
const invertSpace = space.clone().invert();

// Generated using `npm run build`. Do not edit!
var unicodePropertyAliasesEcmascript = new Map([
	['scx', 'Script_Extensions'],
	['sc', 'Script'],
	['gc', 'General_Category'],
	['AHex', 'ASCII_Hex_Digit'],
	['Alpha', 'Alphabetic'],
	['Bidi_C', 'Bidi_Control'],
	['Bidi_M', 'Bidi_Mirrored'],
	['Cased', 'Cased'],
	['CI', 'Case_Ignorable'],
	['CWCF', 'Changes_When_Casefolded'],
	['CWCM', 'Changes_When_Casemapped'],
	['CWKCF', 'Changes_When_NFKC_Casefolded'],
	['CWL', 'Changes_When_Lowercased'],
	['CWT', 'Changes_When_Titlecased'],
	['CWU', 'Changes_When_Uppercased'],
	['Dash', 'Dash'],
	['Dep', 'Deprecated'],
	['DI', 'Default_Ignorable_Code_Point'],
	['Dia', 'Diacritic'],
	['Ext', 'Extender'],
	['Gr_Base', 'Grapheme_Base'],
	['Gr_Ext', 'Grapheme_Extend'],
	['Hex', 'Hex_Digit'],
	['IDC', 'ID_Continue'],
	['Ideo', 'Ideographic'],
	['IDS', 'ID_Start'],
	['IDSB', 'IDS_Binary_Operator'],
	['IDST', 'IDS_Trinary_Operator'],
	['Join_C', 'Join_Control'],
	['LOE', 'Logical_Order_Exception'],
	['Lower', 'Lowercase'],
	['Math', 'Math'],
	['NChar', 'Noncharacter_Code_Point'],
	['Pat_Syn', 'Pattern_Syntax'],
	['Pat_WS', 'Pattern_White_Space'],
	['QMark', 'Quotation_Mark'],
	['Radical', 'Radical'],
	['RI', 'Regional_Indicator'],
	['SD', 'Soft_Dotted'],
	['STerm', 'Sentence_Terminal'],
	['Term', 'Terminal_Punctuation'],
	['UIdeo', 'Unified_Ideograph'],
	['Upper', 'Uppercase'],
	['VS', 'Variation_Selector'],
	['WSpace', 'White_Space'],
	['space', 'White_Space'],
	['XIDC', 'XID_Continue'],
	['XIDS', 'XID_Start']
]);

// Generated using `npm run build`. Do not edit!
var unicodePropertyValueAliasesEcmascript = new Map([
	['General_Category', new Map([
		['C', 'Other'],
		['Cc', 'Control'],
		['cntrl', 'Control'],
		['Cf', 'Format'],
		['Cn', 'Unassigned'],
		['Co', 'Private_Use'],
		['Cs', 'Surrogate'],
		['L', 'Letter'],
		['LC', 'Cased_Letter'],
		['Ll', 'Lowercase_Letter'],
		['Lm', 'Modifier_Letter'],
		['Lo', 'Other_Letter'],
		['Lt', 'Titlecase_Letter'],
		['Lu', 'Uppercase_Letter'],
		['M', 'Mark'],
		['Combining_Mark', 'Mark'],
		['Mc', 'Spacing_Mark'],
		['Me', 'Enclosing_Mark'],
		['Mn', 'Nonspacing_Mark'],
		['N', 'Number'],
		['Nd', 'Decimal_Number'],
		['digit', 'Decimal_Number'],
		['Nl', 'Letter_Number'],
		['No', 'Other_Number'],
		['P', 'Punctuation'],
		['punct', 'Punctuation'],
		['Pc', 'Connector_Punctuation'],
		['Pd', 'Dash_Punctuation'],
		['Pe', 'Close_Punctuation'],
		['Pf', 'Final_Punctuation'],
		['Pi', 'Initial_Punctuation'],
		['Po', 'Other_Punctuation'],
		['Ps', 'Open_Punctuation'],
		['S', 'Symbol'],
		['Sc', 'Currency_Symbol'],
		['Sk', 'Modifier_Symbol'],
		['Sm', 'Math_Symbol'],
		['So', 'Other_Symbol'],
		['Z', 'Separator'],
		['Zl', 'Line_Separator'],
		['Zp', 'Paragraph_Separator'],
		['Zs', 'Space_Separator']
	])],
	['Script', new Map([
		['Adlm', 'Adlam'],
		['Aghb', 'Caucasian_Albanian'],
		['Ahom', 'Ahom'],
		['Arab', 'Arabic'],
		['Armi', 'Imperial_Aramaic'],
		['Armn', 'Armenian'],
		['Avst', 'Avestan'],
		['Bali', 'Balinese'],
		['Bamu', 'Bamum'],
		['Bass', 'Bassa_Vah'],
		['Batk', 'Batak'],
		['Beng', 'Bengali'],
		['Bhks', 'Bhaiksuki'],
		['Bopo', 'Bopomofo'],
		['Brah', 'Brahmi'],
		['Brai', 'Braille'],
		['Bugi', 'Buginese'],
		['Buhd', 'Buhid'],
		['Cakm', 'Chakma'],
		['Cans', 'Canadian_Aboriginal'],
		['Cari', 'Carian'],
		['Cham', 'Cham'],
		['Cher', 'Cherokee'],
		['Copt', 'Coptic'],
		['Qaac', 'Coptic'],
		['Cprt', 'Cypriot'],
		['Cyrl', 'Cyrillic'],
		['Deva', 'Devanagari'],
		['Dogr', 'Dogra'],
		['Dsrt', 'Deseret'],
		['Dupl', 'Duployan'],
		['Egyp', 'Egyptian_Hieroglyphs'],
		['Elba', 'Elbasan'],
		['Elym', 'Elymaic'],
		['Ethi', 'Ethiopic'],
		['Geor', 'Georgian'],
		['Glag', 'Glagolitic'],
		['Gong', 'Gunjala_Gondi'],
		['Gonm', 'Masaram_Gondi'],
		['Goth', 'Gothic'],
		['Gran', 'Grantha'],
		['Grek', 'Greek'],
		['Gujr', 'Gujarati'],
		['Guru', 'Gurmukhi'],
		['Hang', 'Hangul'],
		['Hani', 'Han'],
		['Hano', 'Hanunoo'],
		['Hatr', 'Hatran'],
		['Hebr', 'Hebrew'],
		['Hira', 'Hiragana'],
		['Hluw', 'Anatolian_Hieroglyphs'],
		['Hmng', 'Pahawh_Hmong'],
		['Hmnp', 'Nyiakeng_Puachue_Hmong'],
		['Hrkt', 'Katakana_Or_Hiragana'],
		['Hung', 'Old_Hungarian'],
		['Ital', 'Old_Italic'],
		['Java', 'Javanese'],
		['Kali', 'Kayah_Li'],
		['Kana', 'Katakana'],
		['Khar', 'Kharoshthi'],
		['Khmr', 'Khmer'],
		['Khoj', 'Khojki'],
		['Knda', 'Kannada'],
		['Kthi', 'Kaithi'],
		['Lana', 'Tai_Tham'],
		['Laoo', 'Lao'],
		['Latn', 'Latin'],
		['Lepc', 'Lepcha'],
		['Limb', 'Limbu'],
		['Lina', 'Linear_A'],
		['Linb', 'Linear_B'],
		['Lisu', 'Lisu'],
		['Lyci', 'Lycian'],
		['Lydi', 'Lydian'],
		['Mahj', 'Mahajani'],
		['Maka', 'Makasar'],
		['Mand', 'Mandaic'],
		['Mani', 'Manichaean'],
		['Marc', 'Marchen'],
		['Medf', 'Medefaidrin'],
		['Mend', 'Mende_Kikakui'],
		['Merc', 'Meroitic_Cursive'],
		['Mero', 'Meroitic_Hieroglyphs'],
		['Mlym', 'Malayalam'],
		['Modi', 'Modi'],
		['Mong', 'Mongolian'],
		['Mroo', 'Mro'],
		['Mtei', 'Meetei_Mayek'],
		['Mult', 'Multani'],
		['Mymr', 'Myanmar'],
		['Nand', 'Nandinagari'],
		['Narb', 'Old_North_Arabian'],
		['Nbat', 'Nabataean'],
		['Newa', 'Newa'],
		['Nkoo', 'Nko'],
		['Nshu', 'Nushu'],
		['Ogam', 'Ogham'],
		['Olck', 'Ol_Chiki'],
		['Orkh', 'Old_Turkic'],
		['Orya', 'Oriya'],
		['Osge', 'Osage'],
		['Osma', 'Osmanya'],
		['Palm', 'Palmyrene'],
		['Pauc', 'Pau_Cin_Hau'],
		['Perm', 'Old_Permic'],
		['Phag', 'Phags_Pa'],
		['Phli', 'Inscriptional_Pahlavi'],
		['Phlp', 'Psalter_Pahlavi'],
		['Phnx', 'Phoenician'],
		['Plrd', 'Miao'],
		['Prti', 'Inscriptional_Parthian'],
		['Rjng', 'Rejang'],
		['Rohg', 'Hanifi_Rohingya'],
		['Runr', 'Runic'],
		['Samr', 'Samaritan'],
		['Sarb', 'Old_South_Arabian'],
		['Saur', 'Saurashtra'],
		['Sgnw', 'SignWriting'],
		['Shaw', 'Shavian'],
		['Shrd', 'Sharada'],
		['Sidd', 'Siddham'],
		['Sind', 'Khudawadi'],
		['Sinh', 'Sinhala'],
		['Sogd', 'Sogdian'],
		['Sogo', 'Old_Sogdian'],
		['Sora', 'Sora_Sompeng'],
		['Soyo', 'Soyombo'],
		['Sund', 'Sundanese'],
		['Sylo', 'Syloti_Nagri'],
		['Syrc', 'Syriac'],
		['Tagb', 'Tagbanwa'],
		['Takr', 'Takri'],
		['Tale', 'Tai_Le'],
		['Talu', 'New_Tai_Lue'],
		['Taml', 'Tamil'],
		['Tang', 'Tangut'],
		['Tavt', 'Tai_Viet'],
		['Telu', 'Telugu'],
		['Tfng', 'Tifinagh'],
		['Tglg', 'Tagalog'],
		['Thaa', 'Thaana'],
		['Thai', 'Thai'],
		['Tibt', 'Tibetan'],
		['Tirh', 'Tirhuta'],
		['Ugar', 'Ugaritic'],
		['Vaii', 'Vai'],
		['Wara', 'Warang_Citi'],
		['Wcho', 'Wancho'],
		['Xpeo', 'Old_Persian'],
		['Xsux', 'Cuneiform'],
		['Yiii', 'Yi'],
		['Zanb', 'Zanabazar_Square'],
		['Zinh', 'Inherited'],
		['Qaai', 'Inherited'],
		['Zyyy', 'Common'],
		['Zzzz', 'Unknown']
	])],
	['Script_Extensions', new Map([
		['Adlm', 'Adlam'],
		['Aghb', 'Caucasian_Albanian'],
		['Ahom', 'Ahom'],
		['Arab', 'Arabic'],
		['Armi', 'Imperial_Aramaic'],
		['Armn', 'Armenian'],
		['Avst', 'Avestan'],
		['Bali', 'Balinese'],
		['Bamu', 'Bamum'],
		['Bass', 'Bassa_Vah'],
		['Batk', 'Batak'],
		['Beng', 'Bengali'],
		['Bhks', 'Bhaiksuki'],
		['Bopo', 'Bopomofo'],
		['Brah', 'Brahmi'],
		['Brai', 'Braille'],
		['Bugi', 'Buginese'],
		['Buhd', 'Buhid'],
		['Cakm', 'Chakma'],
		['Cans', 'Canadian_Aboriginal'],
		['Cari', 'Carian'],
		['Cham', 'Cham'],
		['Cher', 'Cherokee'],
		['Copt', 'Coptic'],
		['Qaac', 'Coptic'],
		['Cprt', 'Cypriot'],
		['Cyrl', 'Cyrillic'],
		['Deva', 'Devanagari'],
		['Dogr', 'Dogra'],
		['Dsrt', 'Deseret'],
		['Dupl', 'Duployan'],
		['Egyp', 'Egyptian_Hieroglyphs'],
		['Elba', 'Elbasan'],
		['Elym', 'Elymaic'],
		['Ethi', 'Ethiopic'],
		['Geor', 'Georgian'],
		['Glag', 'Glagolitic'],
		['Gong', 'Gunjala_Gondi'],
		['Gonm', 'Masaram_Gondi'],
		['Goth', 'Gothic'],
		['Gran', 'Grantha'],
		['Grek', 'Greek'],
		['Gujr', 'Gujarati'],
		['Guru', 'Gurmukhi'],
		['Hang', 'Hangul'],
		['Hani', 'Han'],
		['Hano', 'Hanunoo'],
		['Hatr', 'Hatran'],
		['Hebr', 'Hebrew'],
		['Hira', 'Hiragana'],
		['Hluw', 'Anatolian_Hieroglyphs'],
		['Hmng', 'Pahawh_Hmong'],
		['Hmnp', 'Nyiakeng_Puachue_Hmong'],
		['Hrkt', 'Katakana_Or_Hiragana'],
		['Hung', 'Old_Hungarian'],
		['Ital', 'Old_Italic'],
		['Java', 'Javanese'],
		['Kali', 'Kayah_Li'],
		['Kana', 'Katakana'],
		['Khar', 'Kharoshthi'],
		['Khmr', 'Khmer'],
		['Khoj', 'Khojki'],
		['Knda', 'Kannada'],
		['Kthi', 'Kaithi'],
		['Lana', 'Tai_Tham'],
		['Laoo', 'Lao'],
		['Latn', 'Latin'],
		['Lepc', 'Lepcha'],
		['Limb', 'Limbu'],
		['Lina', 'Linear_A'],
		['Linb', 'Linear_B'],
		['Lisu', 'Lisu'],
		['Lyci', 'Lycian'],
		['Lydi', 'Lydian'],
		['Mahj', 'Mahajani'],
		['Maka', 'Makasar'],
		['Mand', 'Mandaic'],
		['Mani', 'Manichaean'],
		['Marc', 'Marchen'],
		['Medf', 'Medefaidrin'],
		['Mend', 'Mende_Kikakui'],
		['Merc', 'Meroitic_Cursive'],
		['Mero', 'Meroitic_Hieroglyphs'],
		['Mlym', 'Malayalam'],
		['Modi', 'Modi'],
		['Mong', 'Mongolian'],
		['Mroo', 'Mro'],
		['Mtei', 'Meetei_Mayek'],
		['Mult', 'Multani'],
		['Mymr', 'Myanmar'],
		['Nand', 'Nandinagari'],
		['Narb', 'Old_North_Arabian'],
		['Nbat', 'Nabataean'],
		['Newa', 'Newa'],
		['Nkoo', 'Nko'],
		['Nshu', 'Nushu'],
		['Ogam', 'Ogham'],
		['Olck', 'Ol_Chiki'],
		['Orkh', 'Old_Turkic'],
		['Orya', 'Oriya'],
		['Osge', 'Osage'],
		['Osma', 'Osmanya'],
		['Palm', 'Palmyrene'],
		['Pauc', 'Pau_Cin_Hau'],
		['Perm', 'Old_Permic'],
		['Phag', 'Phags_Pa'],
		['Phli', 'Inscriptional_Pahlavi'],
		['Phlp', 'Psalter_Pahlavi'],
		['Phnx', 'Phoenician'],
		['Plrd', 'Miao'],
		['Prti', 'Inscriptional_Parthian'],
		['Rjng', 'Rejang'],
		['Rohg', 'Hanifi_Rohingya'],
		['Runr', 'Runic'],
		['Samr', 'Samaritan'],
		['Sarb', 'Old_South_Arabian'],
		['Saur', 'Saurashtra'],
		['Sgnw', 'SignWriting'],
		['Shaw', 'Shavian'],
		['Shrd', 'Sharada'],
		['Sidd', 'Siddham'],
		['Sind', 'Khudawadi'],
		['Sinh', 'Sinhala'],
		['Sogd', 'Sogdian'],
		['Sogo', 'Old_Sogdian'],
		['Sora', 'Sora_Sompeng'],
		['Soyo', 'Soyombo'],
		['Sund', 'Sundanese'],
		['Sylo', 'Syloti_Nagri'],
		['Syrc', 'Syriac'],
		['Tagb', 'Tagbanwa'],
		['Takr', 'Takri'],
		['Tale', 'Tai_Le'],
		['Talu', 'New_Tai_Lue'],
		['Taml', 'Tamil'],
		['Tang', 'Tangut'],
		['Tavt', 'Tai_Viet'],
		['Telu', 'Telugu'],
		['Tfng', 'Tifinagh'],
		['Tglg', 'Tagalog'],
		['Thaa', 'Thaana'],
		['Thai', 'Thai'],
		['Tibt', 'Tibetan'],
		['Tirh', 'Tirhuta'],
		['Ugar', 'Ugaritic'],
		['Vaii', 'Vai'],
		['Wara', 'Warang_Citi'],
		['Wcho', 'Wancho'],
		['Xpeo', 'Old_Persian'],
		['Xsux', 'Cuneiform'],
		['Yiii', 'Yi'],
		['Zanb', 'Zanabazar_Square'],
		['Zinh', 'Inherited'],
		['Qaai', 'Inherited'],
		['Zyyy', 'Common'],
		['Zzzz', 'Unknown']
	])]
]);

function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
/** Cache for loaded `ChaeSet`. */
const CACHE = new Map();

/** Load `CharSet` corresponding to Unicode `General_Category` value. */
const loadCategory = (v) => {
  // Canonicalize value name.
  v = _optionalChain([unicodePropertyValueAliasesEcmascript, 'access', _ => _.get, 'call', _2 => _2('General_Category'), 'optionalAccess', _3 => _3.get, 'call', _4 => _4(v)]) || v;

  const key = `General_Category.${v}`;
  const cache = CACHE.get(key);
  if (cache) {
    return cache;
  }

  const data = category.get(v);
  if (!data) {
    return null;
  }
  const set = new CharSet(data);
  CACHE.set(key, set);
  return set;
};

/** Load `CharSet` corresponding to Unicode `Script` value. */
const loadScript = (v) => {
  // Canonicalize value name.
  v = _optionalChain([unicodePropertyValueAliasesEcmascript, 'access', _5 => _5.get, 'call', _6 => _6('Script'), 'optionalAccess', _7 => _7.get, 'call', _8 => _8(v)]) || v;

  const key = `Script.${v}`;
  const cache = CACHE.get(key);
  if (cache) {
    return cache;
  }

  const data = script.get(v);
  if (!data) {
    return null;
  }
  const set = new CharSet(data);
  CACHE.set(key, set);
  return set;
};

/** Load `CharSet` corresponding to Unicode `Script_Extensions` value. */
const loadScriptExtensions = (v) => {
  // Canonicalize value name.
  v = _optionalChain([unicodePropertyValueAliasesEcmascript, 'access', _9 => _9.get, 'call', _10 => _10('Script_Extensions'), 'optionalAccess', _11 => _11.get, 'call', _12 => _12(v)]) || v;

  const key = `Script_Extensions.${v}`;
  const cache = CACHE.get(key);
  if (cache) {
    return cache;
  }

  const baseSet = loadScript(v);
  if (!baseSet) {
    return null;
  }
  const data = scriptExtensions.get(v);
  if (!data) {
    throw new Error('BUG: Script_Extensions must contain each value of Script');
  }

  const extSet = new CharSet(data);
  const set = baseSet.clone();
  set.addCharSet(extSet);
  CACHE.set(key, set);
  return set;
};

/**
 * Load `CharSet` corresponding to Unicode property.
 *
 * Return `null` if property is invalid.
 *
 * See https://www.ecma-international.org/ecma-262/10.0/index.html#sec-runtime-semantics-unicodematchproperty-p.
 */
const loadProperty = (p) => {
  // Canonicalize property name.
  p = unicodePropertyAliasesEcmascript.get(p) || p;

  const cache = CACHE.get(p);
  if (cache) {
    return cache;
  }

  const data = property.get(p);
  if (!data) {
    return null;
  }

  const set = new CharSet(data);
  CACHE.set(p, set);
  return set;
};

/**
 * Load `CharSet` corresponding to Unicode property and value.
 *
 * Return `null` if property or value is invalid.
 *
 * See https://www.ecma-international.org/ecma-262/10.0/index.html#sec-runtime-semantics-unicodematchpropertyvalue-p-v.
 */
const loadPropertyValue = (p, v) => {
  // Canonicalize property name.
  p = unicodePropertyAliasesEcmascript.get(p) || p;

  switch (p) {
    case 'General_Category':
      return loadCategory(v);
    case 'Script':
      return loadScript(v);
    case 'Script_Extensions':
      return loadScriptExtensions(v);
    default:
      return null;
  }
};

/** `SyntaxError` for `RegExp`. */
class RegExpSyntaxError extends SyntaxError {
  constructor(message) {
    super(`invalid regular expression: ${message}`);
  }
}

// THIS SCRIPT IS GENERATED BY tools/make-legacy.ts. DO NOT EDIT!

const inverseFoldMap$1 = new Map([
  [0x39C, [0xB5, 0x3BC]],
  [0x1C4, [0x1C5, 0x1C6]],
  [0x1C7, [0x1C8, 0x1C9]],
  [0x1CA, [0x1CB, 0x1CC]],
  [0x1F1, [0x1F2, 0x1F3]],
  [0x399, [0x345, 0x3B9, 0x1FBE]],
  [0x392, [0x3B2, 0x3D0]],
  [0x395, [0x3B5, 0x3F5]],
  [0x398, [0x3B8, 0x3D1]],
  [0x39A, [0x3BA, 0x3F0]],
  [0x3A0, [0x3C0, 0x3D6]],
  [0x3A1, [0x3C1, 0x3F1]],
  [0x3A3, [0x3C2, 0x3C3]],
  [0x3A6, [0x3C6, 0x3D5]],
  [0x412, [0x432, 0x1C80]],
  [0x414, [0x434, 0x1C81]],
  [0x41E, [0x43E, 0x1C82]],
  [0x421, [0x441, 0x1C83]],
  [0x422, [0x442, 0x1C84, 0x1C85]],
  [0x42A, [0x44A, 0x1C86]],
  [0x462, [0x463, 0x1C87]],
  [0xA64A, [0x1C88, 0xA64B]],
  [0x1E60, [0x1E61, 0x1E9B]],
]);

function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }
/** Return case-folded code point for ignore-case comparison. */
const canonicalize = (c, unicode) => {
  if (unicode) {
    return foldMap.get(c) || c;
  }

  const s = String.fromCharCode(c);
  const u = s.toUpperCase();
  if (u.length >= 2) {
    return c;
  }
  const d = u.charCodeAt(0);
  if (c >= 0x80 && d < 0x80) {
    return c;
  }
  return d;
};

/**
 * Inverse function of `canonicalize`.
 *
 * It is used for character class matching on ignore-case.
 */
const uncanonicalize = (c, unicode) => {
  if (unicode) {
    return _nullishCoalesce(inverseFoldMap.get(c), () => []);
  }

  const d = inverseFoldMap$1.get(c);
  if (d !== undefined) {
    return d;
  }
  const s = String.fromCharCode(c);
  return [s.toLowerCase().charCodeAt(0)];
};

function _nullishCoalesce$1(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }/** Type for whole regular expression pattern. */








































































































































































































































/**
 * Escapes raw character for showing.
 *
 * See https://www.ecma-international.org/ecma-262/10.0/index.html#sec-escaperegexppattern.
 */
const escapeRaw = (raw) => {
  switch (raw) {
    case '\n':
      return '\\n';
    case '\r':
      return '\\r';
    case '\u2028':
      return '\\u2028';
    case '\u2029':
      return '\\u2029';
  }
  return raw;
};

/** Show class item as string. */
const classItemToString = (n) => {
  switch (n.type) {
    case 'Char':
      return escapeRaw(n.raw);
    case 'EscapeClass':
      switch (n.kind) {
        case 'digit':
          return n.invert ? '\\D' : '\\d';
        case 'word':
          return n.invert ? '\\W' : '\\w';
        case 'space':
          return n.invert ? '\\S' : '\\s';
        case 'unicode_property':
          return `\\${n.invert ? 'P' : 'p'}{${n.property}}`;
        case 'unicode_property_value':
          return `\\${n.invert ? 'P' : 'p'}{${n.property}=${n.value}}`;
      }
    // The above `switch-case` is exhaustive and it is checked by `tsc`, so `eslint` rule is disabled.
    // eslint-disable-next-line no-fallthrough
    case 'ClassRange':
      return `${escapeRaw(n.children[0].raw)}-${escapeRaw(n.children[1].raw)}`;
  }
};

/** Show node as string. */
const nodeToString = (n) => {
  switch (n.type) {
    case 'Sequence':
      return n.children.map(nodeToString).join('');
    case 'Disjunction':
      return n.children.map(nodeToString).join('|');
    case 'Capture':
      return `(${nodeToString(n.child)})`;
    case 'NamedCapture':
      return `(?<${n.raw}>${nodeToString(n.child)})`;
    case 'Group':
      return `(?:${nodeToString(n.child)})`;
    case 'Many':
      return `${nodeToString(n.child)}*${n.nonGreedy ? '?' : ''}`;
    case 'Some':
      return `${nodeToString(n.child)}+${n.nonGreedy ? '?' : ''}`;
    case 'Optional':
      return `${nodeToString(n.child)}?${n.nonGreedy ? '?' : ''}`;
    case 'Repeat': {
      let s = nodeToString(n.child);
      s += `{${n.min}`;
      if (n.max === Infinity) {
        s += ',';
      } else if ((_nullishCoalesce$1(n.max, () => n.min)) != n.min) {
        s += `,${n.max}`;
      }
      s += '}' + (n.nonGreedy ? '?' : '');
      return s;
    }
    case 'WordBoundary':
      return n.invert ? '\\B' : '\\b';
    case 'LineBegin':
      return '^';
    case 'LineEnd':
      return '$';
    case 'LookAhead':
      return `(?${n.negative ? '!' : '='}${nodeToString(n.child)})`;
    case 'LookBehind':
      return `(?<${n.negative ? '!' : '='}${nodeToString(n.child)})`;
    case 'Char': {
      const c = escapeRaw(n.raw);
      return c === '/' ? '\\/' : c;
    }
    case 'EscapeClass':
      return classItemToString(n);
    case 'Class':
      return `[${n.invert ? '^' : ''}${n.children.map(classItemToString).join('')}]`;
    case 'Dot':
      return '.';
    case 'BackRef':
      return `\\${n.index}`;
    case 'NamedBackRef':
      return `\\k<${n.raw}>`;
  }
};

/** Show flag set as string. */
const flagSetToString = (set) => {
  let s = '';
  if (set.global) {
    s += 'g';
  }
  if (set.ignoreCase) {
    s += 'i';
  }
  if (set.multiline) {
    s += 'm';
  }
  if (set.dotAll) {
    s += 's';
  }
  if (set.unicode) {
    s += 'u';
  }
  if (set.sticky) {
    s += 'y';
  }
  return s;
};

/** Show pattern as string. */
const patternToString = (p) => {
  let s = '/';
  const n = nodeToString(p.child);
  s += n === '' ? '(?:)' : n;
  s += '/';
  s += flagSetToString(p.flagSet);
  return s;
};

function _nullishCoalesce$2(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }

/** `Match` is result data of regular expression pattern matching. */
class Match {
  /** An input string of this matching. */
  

  
  

  constructor(input, caps, names) {
    this.input = input;
    this.caps = caps;
    this.names = names;
  }

  /** Return the initial index of this matching. */
   get index() {
    return this.caps[0];
  }

  /** Return the last index of this matching. */
   get lastIndex() {
    return this.caps[1];
  }

  /**
   * Return number of capture group.
   *
   * This number contains capture `0` (whole matching) also.
   */
   get length() {
    return this.caps.length / 2;
  }

  /** Get the capture `k`. */
   get(k) {
    const [i, j] = this.resolve(k);
    if (i < 0 || j < 0) {
      return undefined;
    }

    return this.input.slice(i, j);
  }

  /** Get the begin index of the capture `k`. */
   begin(k) {
    const i = this.resolve(k)[0];
    return i < 0 ? undefined : i;
  }

  /** Get the end index of the capture `k`. */
   end(k) {
    const j = this.resolve(k)[1];
    return j < 0 ? undefined : j;
  }

  /**
   * Resolve name to capture index.
   *
   * If not resolved, it returns `-1`.
   */
   resolve(k) {
    if (typeof k === 'string') {
      k = _nullishCoalesce$2(this.names.get(k), () => -1);
    }
    return [_nullishCoalesce$2(this.caps[k * 2], () => -1), _nullishCoalesce$2(this.caps[k * 2 + 1], () => -1)];
  }

  /** Convert this into `RegExp`'s result array. */
   toArray() {
    // In TypeScript definition, `RegExpExecArray` extends `string[]`.
    // However the **real** `RegExpExecArray` can contain `undefined`.
    // So this method uses type casting to set properties.

    const array = [];
    (array ).index = this.index;
    (array ).input = this.input;
    array.length = this.length;

    for (let i = 0; i < this.length; i++) {
      array[i] = this.get(i);
    }

    if (this.names.size > 0) {
      const groups = Object.create(null);
      for (const [name, i] of this.names) {
        groups[name] = array[i];
      }

      // `RegExpExecArray`'s group does not accept `undefined` value, so cast to `any` for now.
      (array ).groups = groups; // eslint-disable-line @typescript-eslint/no-explicit-any
    } else {
      (array ).groups = undefined;
    }

    return array ;
  }

   toString() {
    const array = this.toArray();
    const show = (x) =>
      x === undefined ? 'undefined' : JSON.stringify(x);
    return `Match[${array.map(show).join(', ')}]`;
  }

   [Symbol.for('nodejs.util.inspect.custom')](
    depth,
    options
  ) {
    let s = `${options.stylize('Match', 'special')} [\n`;
    const inverseNames = new Map(Array.from(this.names).map(([k, i]) => [i, k]));
    for (let i = 0; i < this.length; i++) {
      const name = options.stylize(
        JSON.stringify(_nullishCoalesce$2(inverseNames.get(i), () => i)),
        inverseNames.has(i) ? 'string' : 'number'
      );
      let capture = this.get(i);
      if (capture === undefined) {
        s += `  ${name} => ${options.stylize('undefined', 'undefined')},\n`;
        continue;
      }
      const begin = options.stylize(this.caps[i * 2].toString(), 'number');
      const end = options.stylize(this.caps[i * 2 + 1].toString(), 'number');
      capture = options.stylize(JSON.stringify(capture), 'string');
      s += `  ${name} [${begin}:${end}] => ${capture},\n`;
    }
    s += ']';
    return s;
  }
}

/** `OpCode` is a type of op-codes. */






























/** Show op-codes as string. */
const codesToString = (codes) => {
  const pc = (i) => `#${i.toString().padStart(3, '0')}`;
  const op = (s) => s.padEnd(13, ' ');

  const lines = codes.map((code, lineno) => {
    let line = `${pc(lineno)}: ${op(code.op)}`;

    switch (code.op) {
      case 'cap_begin':
      case 'cap_end':
        line += `${code.index}`;
        break;
      case 'cap_reset':
        line += `${code.from} ${code.to}`;
        break;
      case 'char':
        line += `'${escape(code.value)}'`;
        break;
      case 'class':
      case 'class_not':
        line += `${code.set.toRegExpPattern(code.op === 'class_not')}`;
        break;
      case 'fork_cont':
      case 'fork_next':
        line += `${pc(lineno + 1 + code.next)}`;
        break;
      case 'jump':
      case 'loop':
        line += `${pc(lineno + 1 + code.cont)}`;
        break;
      case 'push':
        line += `${code.value}`;
        break;
      case 'ref':
      case 'ref_back':
        line += `${code.index}`;
        break;
    }

    return line;
  });

  return lines.join('\n');
};

function _nullishCoalesce$3(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }

/** Get `s[i]` code point. */
const index = (s, i, unicode) => {
  if (unicode) {
    return _nullishCoalesce$3(s.codePointAt(i), () => -1);
  }

  const c = s.charCodeAt(i);
  return Number.isNaN(c) ? -1 : c;
};

/** Get `s[i - 1]` code point. */
const prevIndex = (s, i, unicode) => {
  const c = index(s, i - 1, unicode);
  if (!unicode) {
    return c;
  }

  if (0xdc00 <= c && c <= 0xdfff) {
    const d = index(s, i - 2, unicode);
    if (0x10000 <= d && d <= 0x10ffff) {
      return d;
    }
  }

  return c;
};

/** Calculate code point size. */
const size = (c) => (c >= 0x10000 ? 2 : 1);

/** Check the code point is line terminator. */
const isLineTerminator = (c) =>
  c === 0x0a || c === 0x0d || c === 0x2028 || c === 0x2029;

/** Calculate the maximum stack size without execution. */
const calculateMaxStackSize = (codes) => {
  let stackSize = 0;
  let maxStackSize = 0;
  for (const code of codes) {
    switch (code.op) {
      case 'push':
      case 'push_pos':
      case 'push_proc':
        stackSize++;
        break;
      case 'empty_check':
      case 'pop':
      case 'restore_pos':
      case 'rewind_proc':
        stackSize--;
        break;
    }
    maxStackSize = Math.max(stackSize, maxStackSize);
  }
  return maxStackSize;
};

/** `Proc` is execution state of VM. */
class Proc {
  /** A current position of `input` string. */
  

  /** A program counter. */
  

  /**
   * A stack for matching.
   *
   * This stack can contain a position, a counter and a `proc` id.
   * Every values are integer value, so this type is an array of `number`.
   *
   * Note that this stack is allocated to available size before execution.
   * So, the real stack size is managed by `stackSize` property.
   */
  

  /** A current stack size. */
  

  /** A capture indexes. */
  

  constructor(pos, pc, stack, stackSize, caps) {
    this.pos = pos;
    this.pc = pc;
    this.stack = stack;
    this.stackSize = stackSize;
    this.caps = caps;
  }

  /** Clone this. */
   clone() {
    return new Proc(
      this.pos,
      this.pc,
      Array.from(this.stack),
      this.stackSize,
      Array.from(this.caps)
    );
  }
}

/**
 * `Program` is a container of compiled regular expreession.
 *
 * This can execute op-codes on VM also.
 */
class Program {
  /** A regular expression pattern. */
  

  /** An array of op-codes compiled `pattern`. */
  

  /** Pre-calculated maximum stack size. */
  

   get ignoreCase() {
    return this.pattern.flagSet.ignoreCase;
  }

   get multiline() {
    return this.pattern.flagSet.multiline;
  }

   get dotAll() {
    return this.pattern.flagSet.dotAll;
  }

   get unicode() {
    return this.pattern.flagSet.unicode;
  }

   get sticky() {
    return this.pattern.flagSet.sticky;
  }

   get captureParens() {
    return this.pattern.captureParens;
  }

   get names() {
    return this.pattern.names;
  }

  constructor(pattern, codes) {
    this.pattern = pattern;
    this.codes = codes;
    this.maxStackSize = calculateMaxStackSize(codes);
  }

   toString() {
    let s = '';
    const codes = codesToString(this.codes).split('\n').join('\n    ');
    s += 'Program {\n';
    s += `  pattern: ${patternToString(this.pattern)},\n`;
    s += '  codes:\n';
    s += `    ${codes}\n`;
    s += '}';
    return s;
  }

   [Symbol.for('nodejs.util.inspect.custom')](
    depth,
    options
  ) {
    let s = ``;
    const pattern = options.stylize(patternToString(this.pattern), 'regexp');
    const codes = codesToString(this.codes)
      .split('\n')
      .map((line) => options.stylize(line, 'string'))
      .join('\n    ');
    s += `${options.stylize('Program', 'special')} {\n`;
    s += `  pattern: ${pattern},\n`;
    s += '  codes:\n';
    s += `    ${codes}\n`;
    s += '}';
    return s;
  }

   exec(input, pos = 0) {
    while (pos <= input.length) {
      const procs = [];
      procs.push(this.createProc(pos));

      while (procs.length > 0) {
        const proc = procs[procs.length - 1];
        const code = this.codes[proc.pc];
        let backtrack = false;
        proc.pc++;

        switch (code.op) {
          case 'any': {
            const c = index(input, proc.pos, this.unicode);
            if (c >= 0 && (this.dotAll || !isLineTerminator(c))) {
              proc.pos += size(c);
            } else {
              backtrack = true;
            }
            break;
          }

          case 'back': {
            const c = prevIndex(input, proc.pos, this.unicode);
            if (c >= 0) {
              proc.pos -= size(c);
            } else {
              backtrack = true;
            }
            break;
          }

          case 'cap_begin':
            proc.caps[code.index * 2] = proc.pos;
            break;

          case 'cap_end':
            proc.caps[code.index * 2 + 1] = proc.pos;
            break;

          case 'cap_reset':
            for (let i = code.from; i < code.to; i++) {
              proc.caps[i * 2] = proc.caps[i * 2 + 1] = -1;
            }
            break;

          case 'char': {
            const c = index(input, proc.pos, this.unicode);
            if (c < 0) {
              backtrack = true;
            }
            const cc = this.ignoreCase ? canonicalize(c, this.unicode) : c;
            if (cc === code.value) {
              proc.pos += size(c);
            } else {
              backtrack = true;
            }
            break;
          }

          case 'class':
          case 'class_not': {
            const c = index(input, proc.pos, this.unicode);
            if (c < 0) {
              backtrack = true;
              break;
            }
            const cc = this.ignoreCase ? canonicalize(c, this.unicode) : c;

            let actual = code.set.has(cc);
            const expected = code.op === 'class';

            if (this.ignoreCase) {
              for (const d of uncanonicalize(cc, this.unicode)) {
                actual = actual || code.set.has(d);
              }
            }

            if (actual === expected) {
              proc.pos += size(c);
            } else {
              backtrack = true;
            }
            break;
          }

          case 'dec':
            proc.stack[proc.stackSize - 1]--;
            break;

          case 'empty_check': {
            const pos = proc.stack[--proc.stackSize];
            if (pos === proc.pos) {
              backtrack = true;
            }
            break;
          }

          case 'fail':
            backtrack = true;
            break;

          case 'fork_cont':
          case 'fork_next': {
            const newProc = proc.clone();
            procs.push(newProc);
            if (code.op === 'fork_cont') {
              proc.pc += code.next;
            } else {
              newProc.pc += code.next;
            }
            break;
          }

          case 'jump':
            proc.pc += code.cont;
            break;

          case 'line_begin': {
            const c = prevIndex(input, proc.pos, this.unicode);
            if (proc.pos !== 0 && !(this.multiline && isLineTerminator(c))) {
              backtrack = true;
            }
            break;
          }

          case 'line_end': {
            const c = index(input, proc.pos, this.unicode);
            if (proc.pos !== input.length && !(this.multiline && isLineTerminator(c))) {
              backtrack = true;
            }
            break;
          }

          case 'loop': {
            const n = proc.stack[proc.stackSize - 1];
            if (n > 0) {
              proc.pc += code.cont;
            }
            break;
          }

          case 'match':
            return new Match(input, proc.caps, this.names);

          case 'pop':
            proc.stackSize--;
            break;

          case 'push':
            proc.stack[proc.stackSize++] = code.value;
            break;

          case 'push_pos':
            proc.stack[proc.stackSize++] = proc.pos;
            break;

          case 'push_proc':
            proc.stack[proc.stackSize++] = procs.length;
            break;

          case 'ref': {
            const begin = proc.caps[code.index * 2];
            const end = proc.caps[code.index * 2 + 1];
            const s = begin < 0 || end < 0 ? '' : input.slice(begin, end);
            let i = 0;
            while (i < s.length) {
              const c = index(input, proc.pos, this.unicode);
              const d = index(s, i, this.unicode);

              const cc = this.ignoreCase ? canonicalize(c, this.unicode) : c;
              const dc = this.ignoreCase ? canonicalize(d, this.unicode) : d;

              if (cc !== dc) {
                backtrack = true;
                break;
              }

              proc.pos += size(c);
              i += size(d);
            }
            break;
          }

          case 'ref_back': {
            const begin = proc.caps[code.index * 2];
            const end = proc.caps[code.index * 2 + 1];
            const s = begin < 0 || end < 0 ? '' : input.slice(begin, end);
            let i = s.length;
            while (i > 0) {
              const c = prevIndex(input, proc.pos, this.unicode);
              const d = prevIndex(s, i, this.unicode);

              const cc = this.ignoreCase ? canonicalize(c, this.unicode) : c;
              const dc = this.ignoreCase ? canonicalize(d, this.unicode) : d;

              if (cc !== dc) {
                backtrack = true;
                break;
              }

              proc.pos -= size(c);
              i -= size(d);
            }
            break;
          }

          case 'restore_pos':
            proc.pos = proc.stack[--proc.stackSize];
            break;

          case 'rewind_proc':
            procs.length = proc.stack[--proc.stackSize];
            procs[procs.length - 1] = proc;
            break;

          case 'word_boundary':
          case 'word_boundary_not': {
            const c = prevIndex(input, proc.pos, this.unicode);
            const d = index(input, proc.pos, this.unicode);
            const set = this.unicode && this.ignoreCase ? unicodeWord : word;
            const actual = set.has(c) !== set.has(d);
            const expected = code.op === 'word_boundary';
            if (actual !== expected) {
              backtrack = true;
            }
            break;
          }
        }

        if (backtrack) {
          procs.pop();
        }
      }

      if (this.sticky) {
        break;
      }

      pos += size(index(input, pos, this.unicode));
    }

    return null;
  }

   createProc(pos) {
    const caps = [];
    const capsLength = (this.captureParens + 1) * 2;
    for (let i = 0; i < capsLength; i++) {
      caps.push(-1);
    }

    const stack = [];
    for (let i = 0; i < this.maxStackSize; i++) {
      stack.push(0);
    }

    return new Proc(pos, 0, stack, 0, caps);
  }
}

function _nullishCoalesce$4(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }
/** `Compiler` is a compiler for `Pattern` to `Program`. */
class Compiler {
  

   __init() {this.advance = false;}
   __init2() {this.captureParensIndex = 1;}
   __init3() {this.direction = 'forward';}

   get ignoreCase() {
    return this.pattern.flagSet.ignoreCase;
  }

   get unicode() {
    return this.pattern.flagSet.unicode;
  }

   get captureParens() {
    return this.pattern.captureParens;
  }

   get names() {
    return this.pattern.names;
  }

  constructor(pattern) {Compiler.prototype.__init.call(this);Compiler.prototype.__init2.call(this);Compiler.prototype.__init3.call(this);
    this.pattern = pattern;
  }

  /** Run compiler and return compiled `Program`. */
   compile() {
    const codes0 = this.compileNode(this.pattern.child);
    const codes1 = [
      { op: 'cap_begin', index: 0 },
      ...codes0,
      { op: 'cap_end', index: 0 },
      { op: 'match' },
    ];
    return new Program(this.pattern, codes1);
  }

   compileNode(node) {
    switch (node.type) {
      case 'Disjunction':
        return this.compileDisjunction(node);
      case 'Sequence':
        return this.compileSequence(node);
      case 'Capture':
        return this.compileCapture(node);
      case 'NamedCapture':
        return this.compileNamedCapture(node);
      case 'Group':
        return this.compileGroup(node);
      case 'Many':
        return this.compileMany(node);
      case 'Some':
        return this.compileSome(node);
      case 'Optional':
        return this.compileOptional(node);
      case 'Repeat':
        return this.compileRepeat(node);
      case 'WordBoundary':
        return this.compileWordBoundary(node);
      case 'LineBegin':
        return this.compileLineBegin(node);
      case 'LineEnd':
        return this.compileLineEnd(node);
      case 'LookAhead':
        return this.compileLookAhead(node);
      case 'LookBehind':
        return this.compileLookBehind(node);
      case 'Char':
        return this.compileChar(node);
      case 'EscapeClass':
        return this.compileEscapeClass(node);
      case 'Class':
        return this.compileClass(node);
      case 'Dot':
        return this.compileDot(node);
      case 'BackRef':
        return this.compileBackRef(node);
      case 'NamedBackRef':
        return this.compileNamedBackRef(node);
    }
  }

   compileDisjunction(node) {
    if (node.children.length === 0) {
      throw new Error('BUG: invalid pattern');
    }

    const children = [];
    let advance = true;
    for (const child of node.children) {
      children.push(this.compileNode(child));
      advance = advance && this.advance;
    }
    this.advance = advance;

    return children.reduceRight((codes, codes0) => [
      { op: 'fork_cont', next: codes0.length + 1 },
      ...codes0,
      { op: 'jump', cont: codes.length },
      ...codes,
    ]);
  }

   compileSequence(node) {
    const children = Array.from(node.children);
    if (this.direction === 'backward') {
      children.reverse();
    }

    const codes = [];
    let advance = false;
    for (const child of children) {
      const codes0 = this.compileNode(child);
      codes.push(...codes0);
      advance = advance || this.advance;
    }
    this.advance = advance;

    return codes;
  }

   compileGroup(node) {
    return this.compileNode(node.child);
  }

   compileCapture(node) {
    const codes0 = this.compileNode(node.child);
    if (node.index !== this.captureParensIndex++) {
      throw new Error('BUG: invalid pattern');
    }
    return [
      { op: this.direction === 'backward' ? 'cap_end' : 'cap_begin', index: node.index },
      ...codes0,
      { op: this.direction === 'backward' ? 'cap_begin' : 'cap_end', index: node.index },
    ];
  }

   compileNamedCapture(node) {
    const codes0 = this.compileNode(node.child);
    const index = this.names.get(node.name);
    if (index === undefined || index !== this.captureParensIndex++) {
      throw new Error('BUG: invalid pattern');
    }
    return [{ op: 'cap_begin', index }, ...codes0, { op: 'cap_end', index }];
  }

   compileMany(node) {
    const from = this.captureParensIndex;
    const codes0 = this.insertEmptyCheck(this.compileNode(node.child));
    const codes1 = this.insertCapReset(from, codes0);
    this.advance = false;

    return [
      { op: node.nonGreedy ? 'fork_next' : 'fork_cont', next: codes1.length + 1 },
      ...codes1,
      { op: 'jump', cont: -1 - codes1.length - 1 },
    ];
  }

   compileSome(node) {
    const from = this.captureParensIndex;
    const codes0 = this.compileNode(node.child);
    const codes1 = this.insertCapReset(from, this.insertEmptyCheck(codes0));

    return [
      ...codes0,
      { op: node.nonGreedy ? 'fork_next' : 'fork_cont', next: codes1.length + 1 },
      ...codes1,
      { op: 'jump', cont: -1 - codes1.length - 1 },
    ];
  }

   compileOptional(node) {
    const codes0 = this.compileNode(node.child);
    this.advance = false;

    return [{ op: node.nonGreedy ? 'fork_next' : 'fork_cont', next: codes0.length }, ...codes0];
  }

   compileRepeat(node) {
    const from = this.captureParensIndex;
    const codes0 = this.compileNode(node.child);
    const codes = [];

    if (node.min === 1) {
      codes.push(...codes0);
    } else if (node.min > 1) {
      const codes1 = this.insertCapReset(from, codes0);
      codes.push(
        { op: 'push', value: node.min },
        ...codes1,
        { op: 'dec' },
        { op: 'loop', cont: -1 - codes1.length - 1 },
        { op: 'pop' }
      );
    } else {
      this.advance = false;
    }

    const max = _nullishCoalesce$4(node.max, () => node.min);
    if (max === Infinity) {
      const codes1 = this.insertCapReset(from, this.insertEmptyCheck(codes0));
      codes.push(
        { op: node.nonGreedy ? 'fork_next' : 'fork_cont', next: codes1.length + 1 },
        ...codes1,
        { op: 'jump', cont: -1 - codes1.length - 1 }
      );
    } else if (max > node.min) {
      const remain = max - node.min;
      const codes1 = this.insertCapReset(from, this.insertEmptyCheck(codes0));
      if (remain === 1) {
        codes.push(
          { op: node.nonGreedy ? 'fork_next' : 'fork_cont', next: codes1.length },
          ...codes1
        );
      } else {
        codes.push(
          { op: 'push', value: remain + 1 },
          { op: node.nonGreedy ? 'fork_next' : 'fork_cont', next: codes0.length + 4 },
          ...codes1,
          { op: 'dec' },
          { op: 'loop', cont: -1 - codes0.length - 2 },
          { op: 'fail' },
          { op: 'pop' }
        );
      }
    }

    return codes;
  }

   insertEmptyCheck(codes0) {
    return this.advance ? codes0 : [{ op: 'push_pos' }, ...codes0, { op: 'empty_check' }];
  }

   insertCapReset(from, codes0) {
    if (from === this.captureParensIndex) {
      return codes0;
    }
    return [{ op: 'cap_reset', from, to: this.captureParensIndex }, ...codes0];
  }

   compileWordBoundary(node) {
    this.advance = false;
    return [{ op: node.invert ? 'word_boundary_not' : 'word_boundary' }];
  }

   compileLineBegin(_node) {
    this.advance = false;
    return [{ op: 'line_begin' }];
  }

   compileLineEnd(_node) {
    this.advance = false;
    return [{ op: 'line_end' }];
  }

   compileLookAhead(node) {
    const oldDirection = this.direction;
    this.direction = 'forward';
    const codes = this.compileLookAround(node);
    this.direction = oldDirection;
    return codes;
  }

   compileLookBehind(node) {
    const oldDirection = this.direction;
    this.direction = 'backward';
    const codes = this.compileLookAround(node);
    this.direction = oldDirection;
    return codes;
  }

   compileLookAround(node) {
    const codes0 = this.compileNode(node.child);
    this.advance = false;

    if (node.negative) {
      return [
        { op: 'push_pos' },
        { op: 'push_proc' },
        { op: 'fork_cont', next: codes0.length + 2 },
        ...codes0,
        { op: 'rewind_proc' },
        { op: 'fail' },
        { op: 'pop' },
        { op: 'restore_pos' },
      ];
    }

    return [
      { op: 'push_pos' },
      { op: 'push_proc' },
      ...codes0,
      { op: 'rewind_proc' },
      { op: 'restore_pos' },
    ];
  }

   compileChar(node) {
    let value = node.value;
    if (this.ignoreCase) {
      value = canonicalize(value, this.unicode);
    }
    this.advance = true;
    return this.insertBack([{ op: 'char', value }]);
  }

   compileEscapeClass(node) {
    const set = this.escapeClassToSet(node);
    this.advance = true;
    return this.insertBack([{ op: 'class', set }]);
  }

   compileClass(node) {
    const set = new CharSet();
    for (const item of node.children) {
      switch (item.type) {
        case 'Char':
          set.add(item.value, item.value + 1);
          break;
        case 'EscapeClass':
          set.addCharSet(this.escapeClassToSet(item));
          break;
        case 'ClassRange':
          set.add(item.children[0].value, item.children[1].value + 1);
          break;
      }
    }
    this.advance = true;
    return this.insertBack([{ op: node.invert ? 'class_not' : 'class', set }]);
  }

   escapeClassToSet(node) {
    switch (node.kind) {
      case 'digit':
        return node.invert ? invertDigit : digit;
      case 'word':
        if (this.unicode && this.ignoreCase) {
          return node.invert ? invertUnicodeWord : unicodeWord;
        }
        return node.invert ? invertWord : word;
      case 'space':
        return node.invert ? invertSpace : space;
      case 'unicode_property': {
        const set =
          _nullishCoalesce$4(loadPropertyValue('General_Category', node.property), () => loadProperty(node.property));
        if (set === null) {
          throw new RegExpSyntaxError('invalid Unicode property');
        }
        return node.invert ? set.clone().invert() : set;
      }
      case 'unicode_property_value': {
        const set = loadPropertyValue(node.property, node.value);
        if (set === null) {
          throw new RegExpSyntaxError('invalid Unicode property value');
        }
        return node.invert ? set.clone().invert() : set;
      }
    }
  }

   compileDot(_node) {
    this.advance = true;
    return this.insertBack([{ op: 'any' }]);
  }

   insertBack(codes) {
    if (this.direction === 'forward') {
      return codes;
    }
    return [{ op: 'back' }, ...codes, { op: 'back' }];
  }

   compileBackRef(node) {
    if (node.index < 1 || this.captureParens < node.index) {
      throw new Error('invalid back reference');
    }
    this.advance = false;
    return [{ op: this.direction === 'backward' ? 'ref_back' : 'ref', index: node.index }];
  }

   compileNamedBackRef(node) {
    const index = this.names.get(node.name);
    if (index === undefined || index < 1 || this.captureParens < index) {
      throw new Error('invalid named back reference');
    }
    this.advance = false;
    return [{ op: this.direction === 'backward' ? 'ref_back' : 'ref', index }];
  }
}

function _nullishCoalesce$5(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }

/** Check the node is assertion, which means cannot become a child of repetition node. */
const isAssertion = (n) => {
  switch (n.type) {
    case 'WordBoundary':
    case 'LineBegin':
    case 'LineEnd':
    case 'LookAhead':
    case 'LookBehind':
      return true;
  }
  return false;
};

/** Check the character is sequence delimiter. */
const isSequenceDelimiter = (c) => c === '|' || c === ')' || c === '';

/** Check the character is digit. */
const isDigit = (c) => '0' <= c && c <= '9';

/** Check the character is hex digit. */
const isHexDigit = (c) =>
  isDigit(c) || ('a' <= c && c <= 'f') || ('A' <= c && c <= 'F');

/** Check the character has meaning in pattern. */
const isSyntax = (c) => c !== '' && '^$\\.*+?()[]{}|'.includes(c);

/** Check the character can use for control escape. */
const isControl = (c) => ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z');

/** Check the character is part of Unicode property name. */
const isUnicodeProperty = (c) => isControl(c) || c === '_';

/** Check the character is part of Unicode property value. */
const isUnicodePropertyValue = (c) => isUnicodeProperty(c) || isDigit(c);

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
const idStart = new CharSet(property.get('ID_Start'));
/** Check the character is identifier start character. */
const isIDStart = (c) =>
  c === '$' || c === '_' || idStart.has(_nullishCoalesce$5(c.codePointAt(0), () => -1));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
const idContinue = new CharSet(property.get('ID_Continue'));
/** Check the character is identifier part character. */
const isIDPart = (c) =>
  c === '$' || c === '\u200C' || c === '\u200D' || idContinue.has(_nullishCoalesce$5(c.codePointAt(0), () => -1));

/** Type of repeat quantifier. */





/**
 * `Parser` is parser for regular expression pattern.
 *
 * This parses ECMA-262 `RegExp` pattern syntax.
 * See https://www.ecma-international.org/ecma-262/10.0/index.html#sec-patterns.
 *
 * Also, "Additional ECMAScript Features for Web Browsers" is supported if `additional` flag is `true` (default).
 * See https://www.ecma-international.org/ecma-262/10.0/index.html#sec-regular-expressions-patterns.
 */
class Parser {
  /** The source pattern string to parse. */
  
  /** The flags string. */
  

  /* Parsed flags. */
  

  /**
   * A flag whether support "Additional ECMAScript Features for Web Browsers" syntax.
   *
   * See https://www.ecma-international.org/ecma-262/10.0/index.html#sec-regular-expressions-patterns.
   */
  

  /** Precalculated number of capture group parens. */
   __init() {this.captureParens = 0;}
  /** Precalculated `Map` associate from capture group name to its index. */
   __init2() {this.names = new Map();}

  /** Is the `flagSet` has `unicode`? */
   get unicode() {
    return this.flagSet.unicode;
  }

  /** The current position of `source` string on parsing. */
   __init3() {this.pos = 0;}
  /** The current capture group parens index number. */
   __init4() {this.captureParensIndex = 0;}

  constructor(source, flags = '', additional = true) {Parser.prototype.__init.call(this);Parser.prototype.__init2.call(this);Parser.prototype.__init3.call(this);Parser.prototype.__init4.call(this);
    this.source = source;
    this.flags = flags;
    this.additional = additional;
  }

  /** Run this parser. */
   parse() {
    this.flagSet = this.preprocessFlags();
    this.preprocessCaptures();

    this.pos = 0;
    const child = this.parseDisjunction();
    if (this.current() !== '') {
      throw new RegExpSyntaxError("too many ')'");
    }

    return {
      type: 'Pattern',
      flagSet: this.flagSet,
      captureParens: this.captureParens,
      names: this.names,
      child,
      range: [0, this.pos],
    };
  }

  /** Parse flags. */
   preprocessFlags() {
    const flagSet = {
      global: false,
      ignoreCase: false,
      multiline: false,
      unicode: false,
      dotAll: false,
      sticky: false,
    };

    for (const c of this.flags) {
      switch (c) {
        case 'g':
          if (flagSet.global) {
            throw new RegExpSyntaxError("duplicated 'g' flag");
          }
          flagSet.global = true;
          break;
        case 'i':
          if (flagSet.ignoreCase) {
            throw new RegExpSyntaxError("duplicated 'i' flag");
          }
          flagSet.ignoreCase = true;
          break;
        case 'm':
          if (flagSet.multiline) {
            throw new RegExpSyntaxError("duplicated 'm' flag");
          }
          flagSet.multiline = true;
          break;
        case 's':
          if (flagSet.dotAll) {
            throw new RegExpSyntaxError("duplicated 's' flag");
          }
          flagSet.dotAll = true;
          break;
        case 'u':
          if (flagSet.unicode) {
            throw new RegExpSyntaxError("duplicated 'u' flag");
          }
          flagSet.unicode = true;
          break;
        case 'y':
          if (flagSet.sticky) {
            throw new RegExpSyntaxError("duplicated 's' flag");
          }
          flagSet.sticky = true;
          break;
        default:
          throw new RegExpSyntaxError('unknown flag');
      }
    }

    return flagSet;
  }

  /**
   * Count number of capture group parens, and collect names.
   *
   * This process is needed before parsing because the syntax changes
   * its behavior when a pattern has named captrue.
   */
   preprocessCaptures() {
    while (this.pos < this.source.length) {
      const c = this.current();
      switch (c) {
        case '(':
          if (this.source.startsWith('(?<', this.pos)) {
            this.pos += 3; // skip '(?<'
            const d = this.current();
            if (d !== '=' && d !== '!') {
              this.captureParens++;
              const name = this.parseCaptureName();
              this.names.set(name, this.captureParens);
            }
          } else {
            if (!this.source.startsWith('(?', this.pos)) {
              this.captureParens++;
            }
            this.pos++; // skip '('
          }
          break;
        case '\\':
          this.pos++; // skip '\\'
          this.pos += this.current().length; // skip any character.
          break;
        case '[':
          this.skipCharClass();
          break;
        default:
          this.pos += c.length; // skip any character.
          break;
      }
    }
  }

  /** Skip character class without parsing. */
   skipCharClass() {
    this.pos += 1; // skip '['
    while (this.pos < this.source.length) {
      const c = this.current();
      switch (c) {
        case ']':
          this.pos += 1; // skip ']'
          return;
        case '\\':
          this.pos++; // skip '\\'
          this.pos += this.current().length; // skip any character.
          break;
        default:
          this.pos += c.length; // skip any character
          break;
      }
    }
  }

  /**
   * Parse `disjunction` pattern.
   *
   * See https://www.ecma-international.org/ecma-262/10.0/index.html#prod-Disjunction.
   */
   parseDisjunction() {
    const begin = this.pos;
    const children = [this.parseSequence()];

    for (;;) {
      if (this.current() !== '|') {
        break;
      }
      this.pos += 1; // skip '|'
      children.push(this.parseSequence());
    }

    if (children.length === 1) {
      return children[0];
    }

    return { type: 'Disjunction', children, range: [begin, this.pos] };
  }

  /**
   * Parse `sequence` pattern.
   *
   * `sequence` is named `Alternative` in ECMA-262 specification.
   * However this naming is very confusing because
   * it does not make sence without the relation to `Disjunction`.
   * In formal language theory, `sequence` or `concatination` is better.
   *
   * See https://www.ecma-international.org/ecma-262/10.0/index.html#prod-Alternative.
   */
   parseSequence() {
    const begin = this.pos;
    const children = [];

    for (;;) {
      if (isSequenceDelimiter(this.current())) {
        break;
      }
      children.push(this.parseQuantifier());
    }

    if (children.length === 1) {
      return children[0];
    }

    return { type: 'Sequence', children, range: [begin, this.pos] };
  }

  /**
   * Parse `quantifier` pattern.
   *
   * `quantifier` is one of `*`, `+`, `?` and `{n,m}` suffix operators,
   * and they can follow `?` for non-greedy matching.
   *
   * Note that ECMA-262 specification does not allow to quantify assertions like `/\b/`.
   *
   * See https://www.ecma-international.org/ecma-262/10.0/index.html#prod-Quantifier,
   * and https://www.ecma-international.org/ecma-262/10.0/index.html#prod-Term.
   */
   parseQuantifier() {
    const begin = this.pos;
    const child = this.parseAtom();

    if (isAssertion(child)) {
      if (this.additional && !this.unicode && child.type === 'LookAhead') ; else {
        return child;
      }
    }

    switch (this.current()) {
      case '*':
        return this.parseSimpleQuantifier('Many', begin, child);
      case '+':
        return this.parseSimpleQuantifier('Some', begin, child);
      case '?':
        return this.parseSimpleQuantifier('Optional', begin, child);
      case '{':
        return this.parseRepeat(begin, child);
    }

    return child;
  }

  /**
   * Parse simple quantifier suffix.
   *
   * Simple quantifier suffix means quantifiers execpt for `{n,m}`.
   */
   parseSimpleQuantifier(
    type,
    begin,
    child
  ) {
    this.pos += 1; // skip one of '*', '+', '?'
    let nonGreedy = false;
    if (this.current() === '?') {
      this.pos += 1; // skip '?'
      nonGreedy = true;
    }
    return { type, nonGreedy, child, range: [begin, this.pos] };
  }

  /**
   * Parse repeat quantifier suffix (`{n}`, `{n,m}` or `{n,}`).
   *
   * When parsing is failed, however it is in `additional` mode,
   * it is retryable. And the real parsing is done by
   * `tryParseRepeatQuantifier` method.
   */
   parseRepeat(begin, child) {
    const save = this.pos;
    const quantifier = this.tryParseRepeatQuantifier();
    if (quantifier === null) {
      if (this.additional && !this.unicode) {
        this.pos = save;
        return child;
      }
      throw new RegExpSyntaxError('incomplete quantifier');
    }

    const { min, max } = quantifier;
    if (min > (_nullishCoalesce$5(max, () => min))) {
      throw new RegExpSyntaxError('numbers out of order in quantifier');
    }

    let nonGreedy = false;
    if (this.current() === '?') {
      this.pos += 1; // skip '?'
      nonGreedy = true;
    }

    return { type: 'Repeat', min, max, nonGreedy, child, range: [begin, this.pos] };
  }

  /**
   * Try to parse repeat quantifier.
   *
   * This method is separated from `parseRepeat` because
   * it is reused by `parseAtom` to detect "nothing to repeat" error
   * of repeat quantifier.
   *
   * When parsing is failed, it does not consume any character and return `null`.
   */
   tryParseRepeatQuantifier() {
    const save = this.pos;
    this.pos += 1; // skip '{'

    const min = this.parseDigits();
    if (min < 0) {
      this.pos = save;
      return null;
    }

    let max = null;
    if (this.current() === ',') {
      this.pos += 1; // skip ','
      if (this.current() === '}') {
        max = Infinity;
      } else {
        max = this.parseDigits();
        if (max < 0) {
          this.pos = save;
          return null;
        }
      }
    }

    if (this.current() !== '}') {
      this.pos = save;
      return null;
    }
    this.pos += 1; // skip '}'

    return { min, max };
  }

  /**
   * Parse `atom` pattern.
   *
   * This method also parses `assertion` pattern.
   *
   * See https://www.ecma-international.org/ecma-262/10.0/index.html#prod-Assertion,
   * and https://www.ecma-international.org/ecma-262/10.0/index.html#prod-Atom.
   */
   parseAtom() {
    const begin = this.pos;
    const c = this.current();
    switch (c) {
      case '.':
        this.pos++; // skip '.'
        return { type: 'Dot', range: [begin, this.pos] };
      case '^':
        this.pos++; // skip '^'
        return { type: 'LineBegin', range: [begin, this.pos] };
      case '$':
        this.pos++; // skip '$'
        return { type: 'LineEnd', range: [begin, this.pos] };
      case '[':
        return this.parseClass();
      case '\\':
        return this.parseEscape();
      case '(':
        return this.parseParen();
      case '*':
      case '+':
      case '?':
        throw new RegExpSyntaxError('nothing to repeat');
      case '{':
        if (this.additional && !this.unicode) {
          const quantifier = this.tryParseRepeatQuantifier();
          if (quantifier !== null) {
            throw new RegExpSyntaxError('nothing to repeat');
          }
          break;
        }
        throw new RegExpSyntaxError('lone quantifier brackets');
      case '}':
        if (this.additional && !this.unicode) {
          break;
        }
        throw new RegExpSyntaxError('lone quantifier brackets');
      case ']':
        if (this.additional && !this.unicode) {
          break;
        }
        throw new RegExpSyntaxError('lone character class brackets');
      case ')':
      case '|':
      case '':
        // Because this characters are handled by `parseSequence`.
        throw new Error('BUG: invalid character');
    }

    // All cases are through, then it should be a simple source character.

    this.pos += c.length; // skip any character
    const value = c.codePointAt(0);
    if (value === undefined) {
      throw new Error('BUG: invalid character');
    }
    return { type: 'Char', value, raw: c, range: [begin, this.pos] };
  }

  /** Parse `character class` pattern. */
   parseClass() {
    const begin = this.pos;
    this.pos++; // skip '['

    let invert = false;
    if (this.current() === '^') {
      this.pos++; // skip '^'
      invert = true;
    }

    const children = [];

    for (;;) {
      const c = this.current();
      if (c === ']') {
        break;
      }
      children.push(this.parseClassItem());
    }
    this.pos++; // skip ']'

    return { type: 'Class', invert, children, range: [begin, this.pos] };
  }

  /** Parse an item of `character class` pattern. */
   parseClassItem() {
    const beginPos = this.pos;

    const begin = this.parseClassAtom();
    if (this.current() !== '-') {
      return begin;
    }
    if (this.source.startsWith('-]', this.pos)) {
      return begin;
    }

    if (begin.type === 'EscapeClass') {
      if (this.additional && !this.unicode) {
        return begin;
      }
      throw new RegExpSyntaxError('invalid character class');
    }

    const save = this.pos;
    this.pos++; // skip '-'
    const end = this.parseClassAtom();
    if (end.type === 'EscapeClass') {
      if (this.additional && !this.unicode) {
        this.pos = save;
        return begin;
      }
      throw new RegExpSyntaxError('invalid character class');
    }

    if (begin.value > end.value) {
      throw new RegExpSyntaxError('range out of order in character class');
    }

    return { type: 'ClassRange', children: [begin, end], range: [beginPos, this.pos] };
  }

  /** Parse an atom of `character class` range. */
   parseClassAtom() {
    const begin = this.pos;
    const c = this.current();
    if (c === '') {
      throw new RegExpSyntaxError('unterminated character class');
    }

    if (c !== '\\') {
      this.pos += c.length; // skip any character
      const value = c.codePointAt(0);
      if (value === undefined) {
        throw new Error('BUG: invalid character');
      }
      return { type: 'Char', value, raw: c, range: [begin, this.pos] };
    }

    if (this.source.startsWith('\\-', this.pos)) {
      this.pos += 2; // skip '\\-'
      return { type: 'Char', value: 0x2d, raw: '\\-', range: [begin, this.pos] };
    }

    if (this.source.startsWith('\\b', this.pos)) {
      this.pos += 2; // skip '\\b'
      return { type: 'Char', value: 0x08, raw: '\\b', range: [begin, this.pos] };
    }

    const escapeClass = this.tryParseEscapeClass();
    if (escapeClass !== null) {
      return escapeClass;
    }

    const escape = this.tryParseEscape();
    if (escape !== null) {
      return escape;
    }

    throw new RegExpSyntaxError('invalid escape');
  }

  /**
   * Parse `escape sequence` pattern including `escape sequence character class`,
   * `back reference` and `word boundary assertion` patterns.
   */
   parseEscape() {
    const wordBoundary = this.tryParseWordBoundary();
    if (wordBoundary !== null) {
      return wordBoundary;
    }

    const backRef = this.tryParseBackRef();
    if (backRef !== null) {
      return backRef;
    }

    const escapeClass = this.tryParseEscapeClass();
    if (escapeClass !== null) {
      return escapeClass;
    }

    const escape = this.tryParseEscape();
    if (escape !== null) {
      return escape;
    }

    throw new RegExpSyntaxError('invalid escape');
  }

  /** Try to parse `word boundary` pattern. */
   tryParseWordBoundary() {
    const begin = this.pos;

    if (this.source.startsWith('\\b', this.pos)) {
      this.pos += 2; // skip '\\b'
      return { type: 'WordBoundary', invert: false, range: [begin, this.pos] };
    }

    if (this.source.startsWith('\\B', this.pos)) {
      this.pos += 2; // skip '\\B'
      return { type: 'WordBoundary', invert: true, range: [begin, this.pos] };
    }

    return null;
  }

  /** Try to parse `back reference` pattern. */
   tryParseBackRef() {
    const begin = this.pos;
    this.pos++; // skip '\\';

    if (this.names.size > 0) {
      if (this.current() === 'k') {
        this.pos++; // skip 'k'
        if (this.current() !== '<') {
          throw new RegExpSyntaxError('invalid named back reference');
        }
        const namePos = ++this.pos; // skip '<'
        const name = this.parseCaptureName();
        return {
          type: 'NamedBackRef',
          name,
          raw: this.source.slice(namePos, this.pos - 1),
          range: [begin, this.pos],
        };
      }
    }

    if (this.current() !== '0') {
      const index = this.parseDigits();
      if (index >= 1) {
        if (this.additional && !this.unicode) {
          if (index <= this.captureParens) {
            return { type: 'BackRef', index, range: [begin, this.pos] };
          }
        } else {
          return { type: 'BackRef', index, range: [begin, this.pos] };
        }
      }
    }

    this.pos = begin;
    return null;
  }

  /** Try to parse `escape sequence` pattern. */
   tryParseEscape() {
    const begin = this.pos;

    const unicode = this.tryParseUnicodeEscape();
    if (unicode !== '') {
      const value = unicode.codePointAt(0);
      if (value === undefined) {
        throw new Error('BUG: invalid character');
      }
      return {
        type: 'Char',
        value,
        raw: this.source.slice(begin, this.pos),
        range: [begin, this.pos],
      };
    }

    this.pos++; // skip '\\'
    switch (this.current()) {
      case 't':
        this.pos++; // skip 't'
        return { type: 'Char', value: 0x09, raw: '\\t', range: [begin, this.pos] };
      case 'n':
        this.pos++; // skip 'n'
        return { type: 'Char', value: 0x0a, raw: '\\n', range: [begin, this.pos] };
      case 'v':
        this.pos++; // skip 'v'
        return { type: 'Char', value: 0x0b, raw: '\\v', range: [begin, this.pos] };
      case 'f':
        this.pos++; // skip 'f'
        return { type: 'Char', value: 0x0c, raw: '\\f', range: [begin, this.pos] };
      case 'r':
        this.pos++; // skip 'r'
        return { type: 'Char', value: 0x0d, raw: '\\r', range: [begin, this.pos] };
      case 'c': {
        this.pos++; // skip 'c'
        const c = this.current();
        let value = 0;
        if (isControl(c)) {
          this.pos++; // skip a-z or A-Z
          value = c.charCodeAt(0) % 32;
        } else {
          if (this.additional && !this.unicode) {
            this.pos--; // go back 'c'
            break;
          }
          throw new RegExpSyntaxError('invalid control escape');
        }
        return {
          type: 'Char',
          value,
          raw: this.source.slice(begin, this.pos),
          range: [begin, this.pos],
        };
      }
      case 'x': {
        this.pos++; // skip 'x'
        const value = this.tryParseHexDigitsN(2);
        if (value < 0) {
          this.pos--; // go back 'x'
          break;
        }
        return {
          type: 'Char',
          value,
          raw: this.source.slice(begin, this.pos),
          range: [begin, this.pos],
        };
      }
      case '0': {
        this.pos++; // skip '0'
        if (isDigit(this.current())) {
          this.pos--; // go back '0'
          break;
        }
        return { type: 'Char', value: 0, raw: '\\0', range: [begin, this.pos] };
      }
      case '':
        throw new RegExpSyntaxError('\\ at end of pattern');
    }

    // Legacy octal escape.
    if (this.additional && !this.unicode) {
      const octal = this.pos;
      const c0 = this.current();
      if ('0' <= c0 && c0 <= '3') {
        this.pos++;
        const c1 = this.current();
        if ('0' <= c1 && c1 <= '7') {
          this.pos++;
          const c2 = this.current();
          if ('0' <= c2 && c2 <= '7') {
            this.pos++;
          }
        }
      } else if ('4' <= c0 && c0 <= '7') {
        this.pos++;
        const c1 = this.current();
        if ('0' <= c1 && c1 <= '7') {
          this.pos++;
        }
      }
      if (octal !== this.pos) {
        const value = Number.parseInt(this.source.slice(octal, this.pos), 8);
        return {
          type: 'Char',
          value,
          raw: this.source.slice(begin, this.pos),
          range: [begin, this.pos],
        };
      }
    }

    // Identity escape.
    const c = this.current();
    const value = c.codePointAt(0);
    if (value === undefined) {
      throw new Error('BUG: invalid character');
    }
    if (this.unicode) {
      if (isSyntax(c) || c === '/') {
        this.pos += c.length; // skip any char
        return { type: 'Char', value, raw: `\\${c}`, range: [begin, this.pos] };
      }
    } else {
      if (this.additional) {
        if (c === 'c') {
          return { type: 'Char', value: 0x5c, raw: '\\', range: [begin, this.pos] };
        }
        if (this.names.size === 0 || c !== 'k') {
          this.pos += c.length; // skip any char
          return { type: 'Char', value, raw: `\\${c}`, range: [begin, this.pos] };
        }
      } else {
        if (!idContinue.has(value)) {
          this.pos += c.length; // skip any char
          return { type: 'Char', value, raw: `\\${c}`, range: [begin, this.pos] };
        }
      }
    }

    this.pos = begin;
    return null;
  }

  /**
   * Try to parse `\uXXXX` or `\u{XXXXXX}` escape sequence.
   *
   * This method is separated from `tryParseEscape` because
   * it is reused by `parseCaptureNameChar`.
   *
   * When it is failed, it returns `''`.
   */
   tryParseUnicodeEscape(lead = true) {
    const begin = this.pos;
    this.pos++; // skip '\\'

    if (this.current() !== 'u') {
      this.pos = begin;
      return '';
    }
    this.pos++; // skip 'u'

    if (this.unicode && this.current() === '{') {
      if (!lead) {
        this.pos = begin;
        return '';
      }
      this.pos++; // skip '{'
      const c = this.parseHexDigits();
      if (c < 0 || 0x110000 <= c || this.current() !== '}') {
        throw new RegExpSyntaxError('invalid Unicode escape');
      }
      this.pos++; // skip '}'
      return String.fromCodePoint(c);
    }

    const c = this.tryParseHexDigitsN(4);
    if (c < 0) {
      if (this.additional && !this.unicode) {
        this.pos = begin;
        return '';
      }
      throw new RegExpSyntaxError('invalid Unicode escape');
    }

    const s = String.fromCharCode(c);
    if (!this.unicode) {
      return s;
    }

    if (lead && '\uD800' <= s && s <= '\uDBFF' && this.current() === '\\') {
      const save = this.pos;
      const t = this.tryParseUnicodeEscape(false);
      if ('\uDC00' <= t && t <= '\uDFFF') {
        return s + t;
      }
      this.pos = save;
    }

    return s;
  }

  /** Try to parse `escape sequence character class` pattern. */
   tryParseEscapeClass() {
    const begin = this.pos;
    this.pos++; // skip '\\'

    const c = this.current();
    switch (c) {
      case 'd':
      case 'D':
        this.pos++; // skip 'd' or 'D'
        return { type: 'EscapeClass', kind: 'digit', invert: c === 'D', range: [begin, this.pos] };
      case 'w':
      case 'W':
        this.pos++; // skip 'w' or 'W'
        return { type: 'EscapeClass', kind: 'word', invert: c === 'W', range: [begin, this.pos] };
      case 's':
      case 'S':
        this.pos++; // skip 's' or 'S'
        return { type: 'EscapeClass', kind: 'space', invert: c === 'S', range: [begin, this.pos] };
      case 'p':
      case 'P': {
        if (!this.unicode) {
          break;
        }
        const invert = c === 'P';
        this.pos++; // skip 'p' or 'P'

        if (this.current() !== '{') {
          throw new RegExpSyntaxError('invalid Unicode property escape');
        }
        this.pos++; // skip '{'

        const property = this.parseUnicodePropertyName();
        if (property === '') {
          throw new RegExpSyntaxError('invalid Unicode property name');
        }

        if (this.current() === '}') {
          this.pos++; // skip '}'
          return {
            type: 'EscapeClass',
            kind: 'unicode_property',
            property,
            invert,
            range: [begin, this.pos],
          };
        }

        if (this.current() !== '=') {
          throw new RegExpSyntaxError('invalid Unicode property escape');
        }
        this.pos++; // skip '='

        const value = this.parseUnicodePropertyValue();
        if (value === '') {
          throw new RegExpSyntaxError('invalid Unicode property value');
        }

        if (this.current() !== '}') {
          throw new RegExpSyntaxError('invalid Unicode property escape');
        }
        this.pos++; // skip '}'

        return {
          type: 'EscapeClass',
          kind: 'unicode_property_value',
          property,
          value,
          invert,
          range: [begin, this.pos],
        };
      }
    }

    this.pos = begin;
    return null;
  }

  /** Parse the first component of `\p{XXX=XXX}` escape sequence. */
   parseUnicodePropertyName() {
    let p = '';
    for (;;) {
      const c = this.current();
      if (!isUnicodeProperty(c)) {
        break;
      }
      p += c;
      this.pos += c.length; // skip any character
    }
    return p;
  }

  /** Parse the second component of `\p{XXX=XXX}` escape sequence. */
   parseUnicodePropertyValue() {
    let v = '';
    for (;;) {
      const c = this.current();
      if (!isUnicodePropertyValue(c)) {
        break;
      }
      v += c;
      this.pos += c.length; // skip any character
    }
    return v;
  }

  /** Parse grouping pattern by paren. */
   parseParen() {
    const begin = this.pos;

    if (!this.source.startsWith('(?', this.pos)) {
      this.pos++; // skip '('
      const child = this.parseDisjunction();
      const index = ++this.captureParensIndex;
      if (this.current() !== ')') {
        throw new RegExpSyntaxError('unterminated capture');
      }
      this.pos++; // skip ')'
      return { type: 'Capture', index, child, range: [begin, this.pos] };
    }

    if (this.source.startsWith('(?:', this.pos)) {
      this.pos += 3; // skip '(?:'
      const child = this.parseDisjunction();
      if (this.current() !== ')') {
        throw new RegExpSyntaxError('unterminated group');
      }
      this.pos++; // skip ')'
      return { type: 'Group', child, range: [begin, this.pos] };
    }

    if (this.source.startsWith('(?=', this.pos)) {
      this.pos += 3; // skip '(?='
      const child = this.parseDisjunction();
      if (this.current() !== ')') {
        throw new RegExpSyntaxError('unterminated look-ahead');
      }
      this.pos++; // skip ')'
      return { type: 'LookAhead', negative: false, child, range: [begin, this.pos] };
    }

    if (this.source.startsWith('(?!', this.pos)) {
      this.pos += 3; // skip '(?!'
      const child = this.parseDisjunction();
      if (this.current() !== ')') {
        throw new RegExpSyntaxError('unterminated look-ahead');
      }
      this.pos++; // skip ')'
      return { type: 'LookAhead', negative: true, child, range: [begin, this.pos] };
    }

    if (this.source.startsWith('(?<=', this.pos)) {
      this.pos += 4; // skip '(?<='
      const child = this.parseDisjunction();
      if (this.current() !== ')') {
        throw new RegExpSyntaxError('unterminated look-behind');
      }
      this.pos++; // skip ')'
      return { type: 'LookBehind', negative: false, child, range: [begin, this.pos] };
    }

    if (this.source.startsWith('(?<!', this.pos)) {
      this.pos += 4; // skip '(?<!'
      const child = this.parseDisjunction();
      if (this.current() !== ')') {
        throw new RegExpSyntaxError('unterminated look-behind');
      }
      this.pos++; // skip ')'
      return { type: 'LookBehind', negative: true, child, range: [begin, this.pos] };
    }

    if (this.source.startsWith('(?<', this.pos)) {
      const index = ++this.captureParensIndex;
      this.pos += 3; // skip '(?<'
      const namePos = this.pos;
      const name = this.parseCaptureName();
      const raw = this.source.slice(namePos, this.pos - 1);
      if (this.names.get(name) !== index) {
        throw new Error('BUG: invalid named capture');
      }
      const child = this.parseDisjunction();
      if (this.current() !== ')') {
        throw new RegExpSyntaxError('unterminated named capture');
      }
      this.pos++; // skip ')'
      return { type: 'NamedCapture', name, raw, child, range: [begin, this.pos] };
    }

    throw new RegExpSyntaxError('invalid group');
  }

  /**
   * Parse capture name.
   *
   * This method is used by `preprocessParens`, `tryParseBackRef` and `parseParen`.
   */
   parseCaptureName() {
    let name = '';
    const start = this.parseCaptureNameChar();
    if (!isIDStart(start)) {
      throw new RegExpSyntaxError('invalid capture group name');
    }
    name += start;

    for (;;) {
      const save = this.pos;
      const part = this.parseCaptureNameChar();
      if (!isIDPart(part)) {
        this.pos = save;
        break;
      }
      name += part;
    }

    if (this.current() !== '>') {
      throw new RegExpSyntaxError('invalid capture group name');
    }
    this.pos += 1; // skip '>'

    return name;
  }

  /**
   * Parse capture name character.
   *
   * Unicode escape sequences are used as capture name character.
   */
   parseCaptureNameChar() {
    const c = this.current();
    if (c === '\\') {
      return this.tryParseUnicodeEscape();
    }
    this.pos += c.length; // skip any character
    return c;
  }

  /** Parse digits. If parsing is failed, return `-1`. */
   parseDigits() {
    let s = '';
    while (isDigit(this.current())) {
      s += this.current();
      this.pos++; // skip digit
    }
    return s === '' ? -1 : Number.parseInt(s, 10);
  }

  /** Parse hex digits. If parsing is failed, return `-1`. */
   parseHexDigits() {
    let s = '';
    for (;;) {
      const c = this.current();
      if (!isHexDigit(c)) {
        break;
      }
      s += c;
      this.pos += c.length; // skip hex digit
    }
    return s === '' ? -1 : Number.parseInt(s, 16);
  }

  /** Try to parse `n` characters of hex digits.  If parsing is faield, return `-1`. */
   tryParseHexDigitsN(n) {
    const save = this.pos;
    let s = '';
    while (n-- > 0) {
      const c = this.current();
      if (!isHexDigit(c)) {
        this.pos = save;
        return -1;
      }
      s += c;
      this.pos += c.length; // skip hex digit
    }
    return Number.parseInt(s, 16);
  }

  /** Return the current character. */
   current() {
    if (this.unicode) {
      const c = this.source.codePointAt(this.pos);
      return c === undefined ? '' : String.fromCodePoint(c);
    }
    const c = this.source.charCodeAt(this.pos);
    return Number.isNaN(c) ? '' : String.fromCharCode(c);
  }
}

function _nullishCoalesce$6(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }/* eslint-disable @typescript-eslint/no-explicit-any */

const isRegExp = (argument) => {
  if (argument && typeof argument === 'object') {
    return !!(argument )[Symbol.match];
  }
  return false;
};

const advance = (s, i, unicode) => {
  if (!unicode || i + 1 >= s.length) {
    return i + 1;
  }
  const c = _nullishCoalesce$6(s.codePointAt(i), () => 0);
  if (0x10000 <= c) {
    return i + 2;
  }
  return i + 1;
};

const RegExpCompat = (() => {
  




  const klass = function RegExpCompat( source, flags) {
    if (new.target === undefined) {
      if (isRegExp(source) && flags === undefined) {
        if (source.constructor === RegExpCompat) {
          return source;
        }
      }
      return new (klass )(source, flags);
    }

    if (source instanceof RegExp || source instanceof RegExpCompat) {
      if (flags === undefined) {
        flags = (source ).flags;
      }
      source = (source ).source;
    }
    source = String(source);

    const parser = new Parser(source, flags, true);
    this.pattern = parser.parse();
    const compiler = new Compiler(this.pattern);
    this.program = compiler.compile();
    return this;
  };

  for (const name of ['$1', '$2', '$3', '$4', '$5', '$6', '$7', '$8', '$9', 'lastMatch']) {
    Object.defineProperty(klass, name, {
      get() {
        throw new Error(`RegExpCompat does not support old RegExp.${name} method`);
      },
    });
  }

  klass[Symbol.species] = klass;

  Object.defineProperty(klass.prototype, 'source', {
    get() {
      const n = nodeToString(this.pattern.child);
      return n === '' ? '(?:)' : n;
    },
  });

  Object.defineProperty(klass.prototype, 'flags', {
    get() {
      return flagSetToString(this.pattern.flagSet);
    },
  });

  for (const flag of [
    'global',
    'ignoreCase',
    'multiline',
    'dotAll',
    'unicode',
    'sticky',
  ] ) {
    Object.defineProperty(klass.prototype, flag, {
      get() {
        return this.pattern.flagSet[flag];
      },
    });
  }

  klass.prototype.compile = function compile() {
    return this;
  };

  klass.prototype.toString = function toString() {
    return patternToString(this.pattern);
  };

  klass.prototype.exec = function exec( string) {
    const update = this.global || this.sticky;

    let pos = 0;
    if (update) {
      pos = this.lastIndex;
    }
    const match = this.program.exec(string, pos);
    if (update) {
      this.lastIndex = _nullishCoalesce$6(_optionalChain$1([match, 'optionalAccess', _ => _.lastIndex]), () => 0);
    }

    return _nullishCoalesce$6(_optionalChain$1([match, 'optionalAccess', _2 => _2.toArray, 'call', _3 => _3()]), () => null);
  };

  klass.prototype.test = function test( string) {
    return !!this.exec(string);
  };

  klass.prototype[Symbol.match] = function (
    
    string
  ) {
    if (this.global) {
      this.lastIndex = 0;
      const result = [];
      for (;;) {
        const r = this.exec(string);
        if (r) {
          result.push(r[0]);
          if (r[0] === '') {
            this.lastIndex = advance(string, this.lastIndex, this.unicode);
          }
        } else {
          break;
        }
      }
      return result.length === 0 ? null : result;
    }
    return this.exec(string);
  };

  klass.prototype[Symbol.replace] = function (
    
    string,
    replacer
  ) {
    const matches = [];
    if (this.global) {
      this.lastIndex = 0;
    }

    // Collect matches to replace.
    // It must be done before building result string because
    // the replacer function calls `this.exec` and changes `this.lastIndex` maybe.
    for (;;) {
      const match = this.exec(string);
      if (!match) {
        break;
      }
      matches.push(match);
      if (!this.global) {
        break;
      }
      if (match[0] === '') {
        this.lastIndex = advance(string, this.lastIndex, this.unicode);
      }
    }

    // Build a result string.
    let pos = 0;
    let result = '';
    for (const match of matches) {
      result += string.slice(pos, match.index);
      pos = match.index + match[0].length;
      if (typeof replacer === 'function') {
        const args = [match[0], ...match.slice(1), match.index, string] ;
        if (match.groups) {
          args.push(match.groups);
        }
        result += String(replacer(...args));
      } else {
        let i = 0;
        for (;;) {
          const j = replacer.indexOf('$', i);
          result += replacer.slice(i, j === -1 ? string.length : j);
          if (j === -1) {
            break;
          }
          const c = replacer[j + 1];
          switch (c) {
            case '$':
              i = j + 2;
              result += '$';
              break;
            case '&':
              i = j + 2;
              result += match[0];
              break;
            case '`':
              i = j + 2;
              result += string.slice(0, match.index);
              break;
            case "'":
              i = j + 2;
              result += string.slice(pos);
              break;
            case '<': {
              const k = replacer.indexOf('>', j + 2);
              if (this.pattern.names.size === 0 || k === -1) {
                i = j + 2;
                result += '$<';
                break;
              }
              const name = replacer.slice(j + 2, k);
              result += _nullishCoalesce$6((match.groups && match.groups[name]), () => '');
              i = k + 1;
              break;
            }
            default: {
              if ('0' <= c && c <= '9') {
                const d = replacer[j + 2];
                const s = '0' <= d && d <= '9' ? c + d : c;
                let n = Number.parseInt(s, 10);
                if (0 < n && n < match.length) {
                  result += _nullishCoalesce$6(match[n], () => '');
                  i = j + 1 + s.length;
                  break;
                }
                n = Math.floor(n / 10);
                if (0 < n && n < match.length) {
                  result += _nullishCoalesce$6(match[n], () => '');
                  i = j + s.length;
                  break;
                }
              }
              result += '$';
              i = j + 1;
              break;
            }
          }
        }
      }
    }

    result += string.slice(pos);
    return result;
  };

  klass.prototype[Symbol.search] = function ( string) {
    const prevLastIndex = this.lastIndex;
    this.lastIndex = 0;
    const m = this.exec(string);
    this.lastIndex = prevLastIndex;
    return _nullishCoalesce$6((m && m.index), () => -1);
  };

  klass.prototype[Symbol.split] = function (
    
    string,
    limit
  ) {
    const flags = this.sticky ? this.flags : this.flags + 'y';
    const constructor = this.constructor;
    const species = _nullishCoalesce$6((constructor && constructor[Symbol.species]), () => klass);
    const splitter = new species(this.source, flags);
    limit = (_nullishCoalesce$6(limit, () => 2 ** 32 - 1)) >>> 0;

    const result = [];
    if (limit === 0) {
      return result;
    }

    // Special case for empty string.
    if (string.length === 0) {
      const match = splitter.exec(string);
      if (match === null) {
        result.push(string);
      }
      return result;
    }

    let p = 0;
    let q = p;
    while (q < string.length) {
      splitter.lastIndex = q;
      const match = splitter.exec(string);
      if (match === null) {
        q = advance(string, q, this.unicode);
        continue;
      }

      const e = Math.min(splitter.lastIndex, string.length);
      if (e === p) {
        q = advance(string, q, this.unicode);
        continue;
      }

      const t = string.slice(p, q);
      result.push(t);
      if (limit === result.length) {
        return result;
      }
      p = e;
      for (let i = 1; i < match.length; i++) {
        result.push(match[i]);
        if (limit === result.length) {
          return result;
        }
      }

      q = p;
    }

    const t = string.slice(p);
    result.push(t);
    return result;
  };

  return klass ;
})();

exports.CharSet = CharSet;
exports.Compiler = Compiler;
exports.Match = Match;
exports.Parser = Parser;
exports.Program = Program;
exports.RegExpCompat = RegExpCompat;
exports.codesToString = codesToString;
exports.flagSetToString = flagSetToString;
exports.nodeToString = nodeToString;
exports.patternToString = patternToString;
